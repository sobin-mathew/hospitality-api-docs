{
  "swagger": "2.0",
  "info": {
    "title": "OPERA Cloud Activity API",
    "description": "APIs to cater for Sales Activity functionality in OPERA Cloud. <br /><br /> Activities provide you with an account management tool for managing daily tasks such as appointments, sales calls, contact follow-up, and so on.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>",
    "version": "24.4",
    "termsOfService": "https://www.oracle.com/legal/terms.html",
    "contact": {
      "email": "hospitality_apis_ww_grp@oracle.com"
    },
    "license": {
      "name": "UPL",
      "url": "https://opensource.org/licenses/upl"
    }
  },
  "schemes": [
    "https"
  ],
  "basePath": "/act/v1",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/activities": {
      "get": {
        "summary": "Get activities",
        "description": "Use this API to retrieve activities for multiple hotels.  Results can be narrowed down by your search criteria in the request message. <p><strong>OperationId:</strong>getActivitiesByMultipleHotelIds</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>",
        "operationId": "getActivitiesByMultipleHotelIds",
        "parameters": [
          {
            "name": "completed",
            "in": "query",
            "required": false,
            "description": "Indicates whether the Activity is completed or not.",
            "type": "boolean"
          },
          {
            "name": "highPriority",
            "in": "query",
            "required": false,
            "description": "Indicates whether the Activity has high priority.",
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "description": "Search string to be used for super search.",
            "type": "string"
          },
          {
            "name": "hotelIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "ownerCode",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "activityClass",
            "in": "query",
            "enum": [
              "Appointment",
              "Todo"
            ],
            "required": false,
            "type": "string",
            "description": "A collection of supported list of activity classes.",
            "uniqueItems": true
          },
          {
            "name": "activityType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "activityPurpose",
            "in": "query",
            "required": false,
            "description": "Purpose of the Activity.",
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "name": "contactId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "name": "blockId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object after fetching Activities.",
            "schema": {
              "$ref": "#/definitions/activitiesInfo"
            },
            "examples": {
              "application/json": {
                "activitiesInformation": [
                  {
                    "activityId": {
                      "id": "149571"
                    },
                    "activityDetail": {
                      "hotelId": "HOTEL2",
                      "activityClass": "Todo",
                      "activityType": "OUT",
                      "activityPurpose": "Outlook Activity",
                      "activityOwner": "ABAS",
                      "startDateTime": "2019-12-09",
                      "endDateTime": "2019-12-10",
                      "status": {
                        "completed": false
                      },
                      "highPriority": false
                    }
                  },
                  {
                    "activityId": {
                      "id": "198848"
                    },
                    "activityDetail": {
                      "hotelId": "HOTEL1",
                      "activityClass": "Appointment",
                      "activityType": "BROCHURE",
                      "activityPurpose": "TEST1",
                      "activityOwner": "JBS",
                      "startDateTime": "2020-01-22",
                      "endDateTime": "2020-01-23",
                      "status": {
                        "completed": false
                      },
                      "highPriority": false
                    },
                    "linkedAccounts": {
                      "activityAccount": [
                        {
                          "profileIdList": [
                            {
                              "id": "679003"
                            }
                          ],
                          "profile": {
                            "customer": {
                              "personName": [
                                {
                                  "givenName": "Thomas"
                                }
                              ]
                            },
                            "telephones": {
                              "telephoneInfo": [
                                {
                                  "telephone": "+1 415 555 0100"
                                }
                              ]
                            },
                            "emails": {
                              "emailInfo": [
                                {
                                  "email": "eg@example.com"
                                }
                              ]
                            }
                          },
                          "primary": true
                        }
                      ],
                      "fullOverlay": false
                    },
                    "indicators": [
                      {
                        "indicatorName": "Profiles",
                        "count": "1"
                      }
                    ]
                  },
                  {
                    "activityId": {
                      "id": "221111"
                    },
                    "activityDetail": {
                      "hotelId": "HOTEL2",
                      "activityClass": "Appointment",
                      "activityType": "BROCHURE",
                      "activityPurpose": "127 1",
                      "activityOwner": "GSS",
                      "startDateTime": "2020-02-14 08:45:00.0",
                      "endDateTime": "2020-02-14 09:00:00.0",
                      "status": {
                        "completed": false
                      },
                      "highPriority": false
                    },
                    "linkedAccounts": {
                      "activityAccount": [
                        {
                          "profileIdList": [
                            {
                              "id": "783412"
                            }
                          ],
                          "profile": {
                            "customer": {
                              "personName": [
                                {
                                  "givenName": "Jenny"
                                }
                              ]
                            },
                            "telephones": {
                              "telephoneInfo": [
                                {
                                  "telephone": "+1 415 555 0100"
                                }
                              ]
                            },
                            "emails": {
                              "emailInfo": [
                                {
                                  "email": "Jenny@example.com"
                                }
                              ]
                            }
                          },
                          "primary": true
                        }
                      ],
                      "fullOverlay": false
                    },
                    "linkedBlocks": [
                      {
                        "blockIdList": [
                          {
                            "id": "26957"
                          }
                        ],
                        "blockName": "Christmas Party"
                      }
                    ],
                    "indicators": [
                      {
                        "indicatorName": "Profiles",
                        "count": "2"
                      },
                      {
                        "indicatorName": "Blocks",
                        "count": "1"
                      }
                    ]
                  },
                  {
                    "activityId": {
                      "id": "221112"
                    },
                    "activityDetail": {
                      "hotelId": "HOTEL2",
                      "activityClass": "Appointment",
                      "activityType": "BROCHURE",
                      "activityPurpose": "Brochure Requests",
                      "activityOwner": "GSS",
                      "startDateTime": "2020-02-14 08:45:00.0",
                      "endDateTime": "2020-02-14 09:00:00.0",
                      "status": {
                        "completed": false
                      },
                      "highPriority": true
                    },
                    "linkedContacts": {
                      "activityContact": [
                        {
                          "profileIdList": [
                            {
                              "id": "783419"
                            }
                          ],
                          "profile": {
                            "customer": {
                              "personName": [
                                {
                                  "givenName": "Sussan "
                                }
                              ]
                            },
                            "telephones": {
                              "telephoneInfo": [
                                {
                                  "telephone": "+1 415 555 0100"
                                }
                              ]
                            },
                            "emails": {
                              "emailInfo": [
                                {
                                  "email": "email@example.com"
                                }
                              ]
                            }
                          },
                          "primary": true
                        }
                      ],
                      "fullOverlay": false
                    },
                    "indicators": [
                      {
                        "indicatorName": "Profiles",
                        "count": "1"
                      }
                    ]
                  }
                ],
                "totalPages": "1",
                "pageNumber": "1",
                "maxFetchCount": "100",
                "allRowsFetched": true,
                "totalRows": "3"
              }
            }
          },
          "204": {
            "description": "ActivitiesByMultipleHotelIds not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      },
      "delete": {
        "summary": "Delete activities",
        "description": "If you want to delete an activity, use this API.  You must know the activity ID for the request. <p><strong>OperationId:</strong>deleteMultipleActivities</p>",
        "operationId": "deleteMultipleActivities",
        "parameters": [
          {
            "name": "activityIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      },
      "put": {
        "summary": "Operation to update multiple activities",
        "description": "You can use this API to bulk update activities <p><strong>OperationId:</strong>putBulkActivities</p>",
        "operationId": "putBulkActivities",
        "parameters": [
          {
            "name": "putBulkActivities",
            "in": "body",
            "required": true,
            "description": "Request object that will Change a list of activities.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/activitiesBulkUpdate"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Status/Info of the processed activities.",
            "schema": {
              "$ref": "#/definitions/activitiesBulkUpdateStatus"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/activities/activitiesCompletion": {
      "post": {
        "summary": "Complete activities",
        "description": "Use this API to mark multiple Activities as completed in 1 request.  You must know the OPERA Activity ID's for this API. <p><strong>OperationId:</strong>postMultipleActivitiesCompletion</p>",
        "operationId": "postMultipleActivitiesCompletion",
        "parameters": [
          {
            "name": "activitiesToChange",
            "in": "body",
            "required": true,
            "description": "Request object for changing Activities.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/activitiesToChange"
                },
                {
                  "example": {
                    "activitiesInformation": [
                      {
                        "activityId": {
                          "id": "88029"
                        },
                        "activityDetail": {
                          "hotelId": "HOTEL1",
                          "status": {
                            "completed": true,
                            "completedOn": "2020-02-11 12:01:00.0",
                            "completedBy": "BEN@HOTEL1"
                          },
                          "notes": "completing from external system",
                          "activityResult": "24"
                        }
                      },
                      {
                        "activityId": {
                          "id": "88030"
                        },
                        "activityDetail": {
                          "hotelId": "PROP1",
                          "status": {
                            "completed": true,
                            "completedOn": "2020-02-11 12:01:00.0",
                            "completedBy": "BEN@HOTEL1"
                          },
                          "notes": "completing from external system",
                          "activityResult": "25"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/activities/emails": {
      "get": {
        "summary": "Get Emails",
        "description": "Use this API to retrieve emails which have been received from an external system and stored in OPERA. They are stored against accounts, contacts and blocks in OPERA. <p><strong>OperationId:</strong>getEmails</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>90</strong> days.</p>",
        "operationId": "getEmails",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "code",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "name": "idExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "idContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "accountIdId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "name": "accountIdIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "accountIdIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "accountIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "contactIdId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "name": "contactIdIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "contactIdIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "contactIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "blockIdId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "name": "blockIdIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "blockIdIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "blockIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "emailSubject",
            "in": "query",
            "required": false,
            "description": "Subject of the email.",
            "type": "string"
          },
          {
            "name": "senderLastName",
            "in": "query",
            "required": false,
            "description": "Family name or last name of the Sender.",
            "type": "string"
          },
          {
            "name": "senderFirstName",
            "in": "query",
            "required": false,
            "description": "Given name or first name of the Sender.",
            "type": "string"
          },
          {
            "name": "senderEmailAddress",
            "in": "query",
            "required": false,
            "description": "Email address of the Sender.",
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for FetchEmails Operation.",
            "schema": {
              "$ref": "#/definitions/emailsDetails"
            }
          },
          "204": {
            "description": "Emails not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/activities/{activityId}": {
      "get": {
        "summary": "Get activity by ID",
        "description": "You can use this API to retrieve an Activity, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivityWithOutHotelId</p>",
        "operationId": "getActivityWithOutHotelId",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Activity ID which is used to find an Activity from OPERA. This ID is a primary identification of an Activity in OPERA."
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Instruction to fetch Activity's information, linked Block and Profile, Attachments and linked Activities.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "ActivityInfo",
                "Profiles",
                "Blocks",
                "Attachments",
                "LinkedActivities"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching activity.",
            "schema": {
              "$ref": "#/definitions/activity"
            }
          },
          "204": {
            "description": "ActivityWithOutHotelId not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      },
      "delete": {
        "summary": "Delete activity  by ID",
        "description": "Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivitiesWithOutHotelId</p>",
        "operationId": "deleteActivitiesWithOutHotelId",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Activity ID which is used to find an Activity from OPERA. This ID is a primary identification of an Activity in OPERA."
          },
          {
            "name": "activityIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/activities/{activityId}/attachments/{attachmentId}": {
      "delete": {
        "summary": "Delete an attachment from an Activity",
        "description": "You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachmentWithoutHotelId</p>",
        "operationId": "deleteActivityAttachmentWithoutHotelId",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Attachment ID"
          },
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Activity ID"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/hotels/{hotelId}/activities": {
      "get": {
        "summary": "Get activities by hotel",
        "description": "You can use this API to retrieve multiple Activities for a hotel, you can narrow the results using different search criteria  <p><strong>OperationId:</strong>getActivities</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "This is the Hotel Code of the Activity"
          },
          {
            "name": "completed",
            "in": "query",
            "required": false,
            "description": "Indicates whether the Activity is completed or not.",
            "type": "boolean"
          },
          {
            "name": "highPriority",
            "in": "query",
            "required": false,
            "description": "Indicates whether the Activity has high priority.",
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "text",
            "in": "query",
            "required": false,
            "description": "Search string to be used for super search.",
            "type": "string"
          },
          {
            "name": "hotelIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "ownerCode",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "activityClass",
            "in": "query",
            "enum": [
              "Appointment",
              "Todo"
            ],
            "required": false,
            "type": "string",
            "description": "A collection of supported list of activity classes.",
            "uniqueItems": true
          },
          {
            "name": "activityType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "activityPurpose",
            "in": "query",
            "required": false,
            "description": "Purpose of the Activity.",
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "name": "contactId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "name": "blockId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object after fetching Activities.",
            "schema": {
              "$ref": "#/definitions/activitiesInfo"
            },
            "examples": {
              "application/json": {
                "activitiesInformation": [
                  {
                    "activityId": {
                      "id": "128612"
                    },
                    "activityDetail": {
                      "hotelId": "HOTEL1",
                      "activityClass": "Appointment",
                      "activityType": "TODO",
                      "activityPurpose": "Call client and follow up on notes",
                      "activityOwner": "NC",
                      "startDateTime": "2020-02-06",
                      "endDateTime": "2020-02-07",
                      "status": {
                        "completed": false
                      },
                      "highPriority": false
                    }
                  },
                  {
                    "activityId": {
                      "id": "128613"
                    },
                    "activityDetail": {
                      "hotelId": "HOTEL1",
                      "activityClass": "Appointment",
                      "activityType": "TODO",
                      "activityPurpose": "Call client and follow up on meeting",
                      "activityOwner": "NC",
                      "startDateTime": "2020-02-06",
                      "endDateTime": "2020-02-07",
                      "status": {
                        "completed": false
                      },
                      "highPriority": false
                    }
                  },
                  {
                    "activityId": {
                      "id": "128614"
                    },
                    "activityDetail": {
                      "hotelId": "HOTEL1",
                      "activityClass": "Appointment",
                      "activityType": "ACTIVITYTYPE3",
                      "activityPurpose": "For discussion on project 2",
                      "activityOwner": "NC",
                      "startDateTime": "2020-02-06 09:45:00.0",
                      "endDateTime": "2020-02-06 10:05:00.0",
                      "status": {
                        "completed": false
                      },
                      "highPriority": false
                    }
                  },
                  {
                    "activityId": {
                      "id": "129843"
                    },
                    "activityDetail": {
                      "hotelId": "HOTEL3",
                      "activityClass": "Appointment",
                      "activityType": "1234",
                      "activityPurpose": "Update meeting Notes",
                      "activityOwner": "TJ",
                      "startDateTime": "2020-02-11 09:00:00.0",
                      "endDateTime": "2020-02-11 09:20:00.0",
                      "status": {
                        "completed": false
                      },
                      "highPriority": false
                    }
                  }
                ],
                "pageNumber": "1",
                "maxFetchCount": "200",
                "totalRows": "1000",
                "links": [
                  {
                    "href": "https://hotelCompany.example.com/act/v1/hotels/HOTEL1/activities/",
                    "rel": "self",
                    "templated": false,
                    "method": "POST",
                    "operationId": "postActivity"
                  }
                ]
              }
            }
          },
          "204": {
            "description": "Activities not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      },
      "post": {
        "summary": "Create activities in a hotel",
        "description": "Use postActivities to create a new activity for a hotel.  You would need to know the types of Activities a hotel accepts, such as Appointments, TODO.  Use ListOfValues API's to find the available types at a hotel. <p><strong>OperationId:</strong>postActivities</p>",
        "operationId": "postActivities",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of the hotel where activity is searched based on Activity ID."
          },
          {
            "name": "activitiesInformation",
            "in": "body",
            "required": true,
            "description": "Request object for creating Activities.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/activitiesInformation"
                },
                {
                  "example": {
                    "activitiesInformation": {
                      "activityDetail": {
                        "hotelId": "HOTEL1",
                        "activityClass": "Appointment",
                        "activityType": "FOLLOWUP",
                        "activityPurpose": "tomorrow",
                        "activityOwner": "3089500",
                        "startDateTime": "2020-10-28 09:45:32.0",
                        "endDateTime": "2020-10-28 10:45:32.0",
                        "status": {
                          "completed": false
                        },
                        "notes": "Notes about the activity can go here",
                        "highPriority": false
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/hotels/{hotelId}/activities/statistics": {
      "get": {
        "summary": "Get Activity statistics",
        "description": "You can use this API to retrieve all statistics of activities. <p><strong>OperationId:</strong>getActivityStatistics</p>",
        "operationId": "getActivityStatistics",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "hotelIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "reportStartDate",
            "in": "query",
            "required": false,
            "description": "Start date of the report.",
            "type": "string",
            "format": "date"
          },
          {
            "name": "activityTypeCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "ownerCodeList",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object after fetching activity statistics.",
            "schema": {
              "$ref": "#/definitions/activityStatistics"
            }
          },
          "204": {
            "description": "ActivityStatistics not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/hotels/{hotelId}/activities/{activityId}": {
      "get": {
        "summary": "Get activity in a hotel by ID",
        "description": "You can use this API to retrieve an Activity for a hotel, using the OPERA Activity ID in the request. <p><strong>OperationId:</strong>getActivity</p>",
        "operationId": "getActivity",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Activity ID which is used to find an Activity from OPERA. This ID is a primary identification of an Activity in OPERA."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of the hotel where activity is searched based on Activity ID."
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Instruction to fetch Activity's information, linked Block and Profile, Attachments and linked Activities.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "ActivityInfo",
                "Profiles",
                "Blocks",
                "Attachments",
                "LinkedActivities"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching activity.",
            "schema": {
              "$ref": "#/definitions/activity"
            },
            "examples": {
              "application/json": {
                "activityDetails": {
                  "activityId": {
                    "type": "Activity",
                    "id": "114026"
                  },
                  "activityDetail": {
                    "hotelId": "HOTEL1",
                    "activityClass": "Appointment",
                    "activityType": "ASDF",
                    "activityTypeDescription": "asd",
                    "activityPurpose": "Create new Appt with Main Stakeholder",
                    "activityOwner": "TOM",
                    "startDateTime": "2019-12-04 09:20:00.0",
                    "endDateTime": "2019-12-04 09:20:00.0",
                    "status": {
                      "completedOn": "2019-12-04 16:01:00.0",
                      "completed": true
                    },
                    "createDateTime": "2019-12-04 02:33:10.0",
                    "creatorId": "BEN@HOTEL1",
                    "lastModifyDateTime": "2019-12-20 01:49:58.0",
                    "lastModifierId": "BEN@HOTEL1"
                  },
                  "linkedAccounts": {
                    "activityAccount": [
                      {
                        "profileIdList": [
                          {
                            "id": "3108537"
                          }
                        ],
                        "profile": {
                          "customer": {
                            "personName": [
                              {
                                "givenName": "Tom"
                              }
                            ]
                          },
                          "addresses": {
                            "addressInfo": [
                              {
                                "address": {
                                  "addressLine": [
                                    "500 Oracle Parkway",
                                    null,
                                    null,
                                    null
                                  ],
                                  "cityName": "Redwood Shores",
                                  "postalCode": "94065",
                                  "county": "USA"
                                }
                              }
                            ]
                          },
                          "telephones": {
                            "telephoneInfo": [
                              {
                                "telephone": {
                                  "phoneNumber": "+1 415 555 0100"
                                }
                              }
                            ]
                          },
                          "profileType": "Company"
                        },
                        "primary": true
                      },
                      {
                        "profileIdList": [
                          {
                            "id": "3103255"
                          }
                        ],
                        "profile": {
                          "customer": {
                            "personName": [
                              {
                                "givenName": "Ben"
                              }
                            ]
                          },
                          "addresses": {
                            "addressInfo": [
                              {
                                "address": {
                                  "county": "USA"
                                }
                              }
                            ]
                          },
                          "profileType": "Source"
                        },
                        "primary": false
                      }
                    ],
                    "fullOverlay": false
                  },
                  "linkedContacts": {
                    "activityContact": [
                      {
                        "profileIdList": [
                          {
                            "id": "3108539"
                          }
                        ],
                        "profile": {
                          "customer": {
                            "personName": [
                              {
                                "givenName": "Chris"
                              }
                            ]
                          },
                          "addresses": {
                            "addressInfo": [
                              {
                                "address": {
                                  "addressLine": [
                                    "10 Main Street",
                                    null,
                                    null,
                                    null
                                  ],
                                  "county": "USA"
                                }
                              }
                            ]
                          },
                          "telephones": {
                            "telephoneInfo": [
                              {
                                "telephone": {
                                  "phoneNumber": "+1 415 555 0100"
                                }
                              }
                            ]
                          },
                          "relationships": {
                            "relationship": [
                              {
                                "relationshipProfile": {
                                  "profileIdList": [
                                    {
                                      "id": "3108537",
                                      "type": "ContactId"
                                    }
                                  ],
                                  "profileType": "Company"
                                }
                              }
                            ]
                          },
                          "profileType": "Contact"
                        },
                        "primary": true,
                        "activityLinkedProfileType": "CompanyContact"
                      },
                      {
                        "profileIdList": [
                          {
                            "id": "3106529"
                          }
                        ],
                        "profile": {
                          "customer": {
                            "personName": [
                              {
                                "givenName": "Sarah"
                              }
                            ]
                          },
                          "relationships": {
                            "relationship": [
                              {
                                "relationshipProfile": {
                                  "profileIdList": [
                                    {
                                      "id": "3089751",
                                      "type": "ContactId"
                                    }
                                  ],
                                  "profileType": "Company"
                                }
                              }
                            ]
                          },
                          "profileType": "Contact"
                        },
                        "primary": false,
                        "activityLinkedProfileType": "CompanyContact"
                      }
                    ],
                    "fullOverlay": false
                  },
                  "linkedBlocks": [
                    {
                      "blockIdList": [
                        {
                          "id": "30725"
                        }
                      ],
                      "blockCode": "0511ENDOF_001",
                      "blockName": "End of Season Event",
                      "timeSpan": {
                        "startDate": "2020-11-05",
                        "endDate": "2020-11-06"
                      }
                    }
                  ],
                  "indicators": [
                    {
                      "indicatorName": "Blocks",
                      "count": "1"
                    },
                    {
                      "indicatorName": "Profiles",
                      "count": "4"
                    }
                  ]
                },
                "links": [
                  {
                    "href": "https://hotelCompany.example.com/act/v1/hotels/HOTEL1/activities/114026?fetchInstructions=ActivityInfo",
                    "rel": "self",
                    "templated": false,
                    "method": "GET",
                    "operationId": "getActivity"
                  },
                  {
                    "href": "https://hotelCompany.example.com/act/v1/hotels/HOTEL1/activities/114026?fetchInstructions=Profiles",
                    "rel": "self",
                    "templated": false,
                    "method": "GET",
                    "operationId": "getActivity"
                  },
                  {
                    "href": "https://hotelCompany.example.com/act/v1/hotels/HOTEL1/activities/114026?fetchInstructions=Blocks",
                    "rel": "self",
                    "templated": false,
                    "method": "GET",
                    "operationId": "getActivity"
                  },
                  {
                    "href": "https://hotelCompany.example.com/act/v1/hotels/HOTEL1/activities/114026?fetchInstructions=Attachments",
                    "rel": "self",
                    "templated": false,
                    "method": "GET",
                    "operationId": "getActivity"
                  },
                  {
                    "href": "https://hotelCompany.example.com/act/v1/hotels/HOTEL1/activities/114026?fetchInstructions=LinkedActivities",
                    "rel": "self",
                    "templated": false,
                    "method": "GET",
                    "operationId": "getActivity"
                  }
                ]
              }
            }
          },
          "204": {
            "description": "Activity not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      },
      "put": {
        "summary": "Update activity in a hotel by ID",
        "description": "Use this to update an existing Activity for a hotel.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>putActivities</p>",
        "operationId": "putActivities",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Activity ID which is used to find an Activity from OPERA. This ID is a primary identification of an Activity in OPERA."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of the hotel where activity is searched based on Activity ID."
          },
          {
            "name": "activitiesToChange",
            "in": "body",
            "required": true,
            "description": "Request object for changing Activities.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/activitiesToChange"
                },
                {
                  "example": {
                    "activitiesInformation": {
                      "activityId": {
                        "id": "219113"
                      },
                      "activityDetail": {
                        "hotelId": "HOTEL1",
                        "activityClass": "Todo",
                        "activityType": "EXTMTG",
                        "activityTypeDescription": "External Meeting",
                        "activityPurpose": "Change activity to TODO",
                        "activityOwner": "287117",
                        "startDateTime": "2020-11-02",
                        "endDateTime": "2020-11-03",
                        "status": {
                          "completed": false
                        },
                        "notes": "Notes about the Activity can go here",
                        "createDateTime": "2020-02-14 02:13:33.0",
                        "creatorId": "BEN@HOTEL1",
                        "lastModifyDateTime": "2020-02-14 02:13:33.0",
                        "lastModifierId": "BEN@HOTEL1"
                      }
                    }
                  }
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      },
      "delete": {
        "summary": "Delete activity in a hotel by ID",
        "description": "Use this API to mark an Activity as deleted.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>deleteActivities</p>",
        "operationId": "deleteActivities",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Activity ID which is used to find an Activity from OPERA. This ID is a primary identification of an Activity in OPERA."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of the hotel where activity is searched based on Activity ID."
          },
          {
            "name": "activityIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/hotels/{hotelId}/activities/{activityId}/activityCompletion": {
      "post": {
        "summary": "Complete activity in a hotel by ID",
        "description": "Use this API to mark one Activity as completed in 1 request.  You must know the OPERA Activity ID for this API. <p><strong>OperationId:</strong>postSingleActivityCompletion</p>",
        "operationId": "postSingleActivityCompletion",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Activity ID which is used to find an Activity from OPERA. This ID is a primary identification of an Activity in OPERA."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of the hotel where activity is searched based on Activity ID."
          },
          {
            "name": "activitiesToChange",
            "in": "body",
            "required": true,
            "description": "Request object for changing Activities.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/activitiesToChange"
                },
                {
                  "example": {
                    "activitiesInformation": [
                      {
                        "activityDetail": {
                          "status": {
                            "completed": true,
                            "completedOn": "2020-01-01 12:01:00.0",
                            "completedBy": "BEN@HOTEL1"
                          },
                          "notes": "completing the Activity from external system",
                          "activityResult": "24"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/hotels/{hotelId}/activities/{activityId}/attachments": {
      "get": {
        "summary": "Get Activity Attachments",
        "description": "You can use this API when you want to view the attachments on an existing activity. <p><strong>OperationId:</strong>getActivityAttachments</p>",
        "operationId": "getActivityAttachments",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Activity ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "attachedFileName",
            "in": "query",
            "required": false,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "File name used to filter final list of attachments. For example, Document.txt."
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Description used to filter final list of attachments. For example, Offical guest ID. (This parameter does not require wildcard characters like * or % )."
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Return object to the request for information regarding activity attachments.",
            "schema": {
              "$ref": "#/definitions/activityAttachments"
            }
          },
          "204": {
            "description": "ActivityAttachments not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/hotels/{hotelId}/activities/{activityId}/attachments/{attachmentId}": {
      "delete": {
        "summary": "Delete an attachment from an Activity",
        "description": "You can use this API to delete an attachment which exists on an activity in OPERA Cloud. <p><strong>OperationId:</strong>deleteActivityAttachment</p>",
        "operationId": "deleteActivityAttachment",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Attachment ID"
          },
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Activity ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/hotels/{hotelId}/activities/{activityId}/linkedActivities": {
      "post": {
        "summary": "Create linked activities in a hotel by ID",
        "description": "You can use this API to invite one or multiple owners to an activity. <p><strong>OperationId:</strong>postLinkedActivities</p>",
        "operationId": "postLinkedActivities",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Activity ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "linkedActivities",
            "in": "body",
            "required": true,
            "description": "Request to create linked activities for an activity.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/linkedActivities"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/hotels/{hotelId}/activityLog": {
      "get": {
        "summary": "Get Activity Log",
        "description": "You can use this API to view the changes log for a specified Activity. <p><strong>OperationId:</strong>getActivityLog</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>90</strong> days.</p>",
        "operationId": "getActivityLog",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "module",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Activity module.",
            "uniqueItems": true,
            "enum": [
              "Reservation",
              "Contract",
              "Allotment",
              "Outlookview",
              "Profile",
              "Accountreceivables",
              "GdsConvRateCodes",
              "RateCode",
              "Billing",
              "Activity"
            ]
          },
          {
            "name": "moduleParamsParameterName",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Name of the parameter.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "moduleParamsParameterValue",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Value of the parameter.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "activityGroup",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "activityType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fromDate",
            "in": "query",
            "required": false,
            "description": "Search from date for the user activity log.",
            "type": "string",
            "format": "date"
          },
          {
            "name": "toDate",
            "in": "query",
            "required": false,
            "description": "Search to date for the user activity log.",
            "type": "string",
            "format": "date"
          },
          {
            "name": "searchText",
            "in": "query",
            "required": false,
            "description": "Search text for the user activity log.",
            "type": "string"
          },
          {
            "name": "userByIdUserIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "integer",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "userForIdUserIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "integer",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for request for the user activity log for activities.",
            "schema": {
              "$ref": "#/definitions/activityLog"
            }
          },
          "204": {
            "description": "ActivityLog not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/hotels/{hotelId}/recentlyAccessedActivities": {
      "get": {
        "summary": "Get recently accessed activities",
        "description": "This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivities</p>",
        "operationId": "getRecentlyAccessedActivities",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response with the fetched recently accessed activities.",
            "schema": {
              "$ref": "#/definitions/recentlyAccessedActivities"
            }
          },
          "204": {
            "description": "RecentlyAccessedActivities not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    },
    "/recentlyAccessedActivities": {
      "get": {
        "summary": "Get recently accessed activities",
        "description": "This API allows you to retrieve a list of activities that have recently been accessed.   <p><strong>OperationId:</strong>getRecentlyAccessedActivitiesWithOutHotelId</p>",
        "operationId": "getRecentlyAccessedActivitiesWithOutHotelId",
        "parameters": [
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response with the fetched recently accessed activities.",
            "schema": {
              "$ref": "#/definitions/recentlyAccessedActivities"
            }
          },
          "204": {
            "description": "RecentlyAccessedActivitiesWithOutHotelId not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "Activity"
        ]
      }
    }
  },
  "parameters": {
    "authKey": {
      "name": "authorization",
      "description": "Bearer token that needs to be passed which is generated post user authentication",
      "type": "string",
      "in": "header",
      "required": true
    },
    "x-app-key": {
      "name": "x-app-key",
      "description": "Client or Partner's Application Key",
      "type": "string",
      "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
      "in": "header",
      "required": true
    },
    "x-hotelid": {
      "name": "x-hotelid",
      "type": "string",
      "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
      "in": "header",
      "required": true
    },
    "x-externalsystem": {
      "name": "x-externalsystem",
      "type": "string",
      "maxLength": 80,
      "description": "External system code.",
      "in": "header",
      "x-example": "EXTERNALSYSTEMCODE"
    },
    "Accept-Language": {
      "name": "Accept-Language",
      "type": "string",
      "description": "Language code",
      "in": "header"
    },
    "x-hubid": {
      "name": "x-hubid",
      "type": "string",
      "description": "x-hubid is a logical grouping of multiple properties that allows api consumers to manage data from a group of properties. This x-hubid is a valid list of hub codes configured in OPERA to which the user has access. Rest APIs without hotelId in the operation path can support hub level integration using x-hubid",
      "in": "header"
    }
  },
  "responses": {
    "400": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/exceptionDetailType"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden"
    },
    "404": {
      "description": "Resource not found",
      "schema": {
        "$ref": "#/definitions/exceptionDetailType"
      }
    },
    "405": {
      "description": "Method not allowed"
    },
    "406": {
      "description": "Not acceptable."
    },
    "413": {
      "description": "Request Entity Too Large"
    },
    "414": {
      "description": "Request URI Too Large"
    },
    "415": {
      "description": "Unsupported Media Type"
    },
    "500": {
      "description": "System Error",
      "schema": {
        "$ref": "#/definitions/exceptionDetailType"
      }
    },
    "502": {
      "description": "Bad Gateway"
    },
    "503": {
      "description": "Service Unavailable"
    }
  },
  "definitions": {
    "activitiesInfo": {
      "type": "object",
      "properties": {
        "activitiesInformation": {
          "description": "Collection of fetched Activities.",
          "$ref": "#/definitions/activityListType"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "activityListType": {
      "type": "array",
      "description": "Activity information in detail.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/activityDetailsType"
      }
    },
    "activityDetailsType": {
      "type": "object",
      "description": "Complete Activity Related Information.",
      "properties": {
        "activityId": {
          "description": "Unique identifier for the activity.",
          "$ref": "#/definitions/activityId"
        },
        "activityDetail": {
          "description": "Activity information in detail.",
          "$ref": "#/definitions/activityInfoType"
        },
        "linkedAccounts": {
          "description": "Provides information about the accounts linked to an activity. Please note that during a change operation this performs a full overlay if the attribute FullOverlay is set to true. In a full overlay, all the accounts that should be associated to the activity should be provided during a change operation. Any accounts not provided will be detached from this activity. By default the full overlay is considered false if this property is left blank. If values are provided for accounts, only the full overlay functionality is provided at this time.",
          "type": "object",
          "properties": {
            "activityAccount": {
              "description": "The list of accounts associated with an activity.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/activityLinkedProfilesType"
              }
            },
            "fullOverlay": {
              "description": "Indicates whether to perform a full overlay for the accounts.",
              "type": "boolean"
            }
          }
        },
        "linkedContacts": {
          "description": "Provides information about the contacts linked to an activity. Please note that during a change operation this performs a full overlay if the attribute FullOverlay is set to true. In a full overlay, all the contacts that should be associated to the activity should be provided during a change operation. Any contacts not provided will be detached from this activity. By default the full overlay is considered false if this property is left blank. If values are provided for contacts, only the full overlay functionality is provided at this time.",
          "type": "object",
          "properties": {
            "activityContact": {
              "description": "The list of contacts associated with an activity.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/activityLinkedProfilesType"
              }
            },
            "fullOverlay": {
              "description": "Indicates whether to perform a full overlay for the contacts.",
              "type": "boolean"
            }
          }
        },
        "linkedBlocks": {
          "description": "Provides information about the blocks linked to the activity.",
          "$ref": "#/definitions/blockListType"
        },
        "linkedAttachments": {
          "description": "Provides information about the attachments linked to the activity.",
          "$ref": "#/definitions/attachmentsType"
        },
        "linkedActivities": {
          "description": "The list of activities associated with an activity.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/linkedActivityDetailsType"
          }
        },
        "indicators": {
          "description": "Indicators of additional information attached to the activity",
          "$ref": "#/definitions/indicatorsType"
        }
      }
    },
    "activityId": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "properties": {
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        }
      }
    },
    "activityInfoType": {
      "type": "object",
      "description": "Activity related information.",
      "properties": {
        "hotelId": {
          "description": "This is the Hotel Code of the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "activityClass": {
          "description": "Indicates the Activity Class.",
          "$ref": "#/definitions/activityConfigClassType"
        },
        "activityType": {
          "description": "Indicates the Activity Type used for the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "activityTypeDescription": {
          "description": "Indicates the description used for the Activity Type.",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "activityPurpose": {
          "description": "Indicates Purpose of the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "activityTraceCode": {
          "description": "Activity Trace code used for the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "activityOwner": {
          "description": "Owner of Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "startDateTime": {
          "description": "Start Date time of Activity.",
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "description": "End Date time of Activity.",
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "description": "Completion status of Activity.",
          "type": "object",
          "properties": {
            "completedBy": {
              "description": "Name of person who completed the Activity.",
              "type": "string"
            },
            "completedOn": {
              "description": "Date on which the Activity was completed.",
              "type": "string",
              "format": "date-time"
            },
            "completed": {
              "description": "Indicates whether Activity is Completed or not.",
              "type": "boolean"
            }
          }
        },
        "activityResult": {
          "description": "Indicates the outcome of a completed Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "notes": {
          "description": "Notes associated with an Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 4000
        },
        "followup": {
          "description": "Indicates whether Followup Activity is needed or not.",
          "type": "boolean"
        },
        "followupStartDateTime": {
          "description": "Start Date time of the Followup Activity.",
          "type": "string",
          "format": "date-time"
        },
        "highPriority": {
          "description": "Indicates whether Activity has a high priority.",
          "type": "boolean"
        },
        "overlapActivity": {
          "description": "Determines whether the Activity overlaps with another activity with same date and time for the same owner.",
          "type": "boolean"
        },
        "createDateTime": {
          "description": "Time stamp of the creation.",
          "type": "string",
          "format": "date-time"
        },
        "creatorId": {
          "description": "ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "lastModifyDateTime": {
          "description": "Time stamp of last modification.",
          "type": "string",
          "format": "date-time"
        },
        "lastModifierId": {
          "description": "Identifies the last software system or person to modify a record.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        }
      }
    },
    "activityConfigClassType": {
      "type": "string",
      "description": "A collection of supported list of activity classes.",
      "enum": [
        "Appointment",
        "Todo"
      ]
    },
    "activityLinkedProfilesType": {
      "type": "object",
      "description": "A collection of Unique IDs of Profiles.",
      "properties": {
        "profileIdList": {
          "description": "Unique identifiers for the Profile.",
          "$ref": "#/definitions/uniqueIDListType"
        },
        "profile": {
          "description": "Provides detailed information regarding the profile.",
          "$ref": "#/definitions/profileType"
        },
        "primary": {
          "description": "Is this attached profile primary?",
          "type": "boolean"
        },
        "activityLinkedProfileType": {
          "description": "Determines the type of the activity profile.",
          "$ref": "#/definitions/linkedProfileTypeType"
        }
      }
    },
    "uniqueIDListType": {
      "type": "array",
      "description": "Unique Id that references an object uniquely in the system.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/uniqueID_Type"
      }
    },
    "uniqueID_Type": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "properties": {
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "profileType": {
      "type": "object",
      "description": "Type provides the detailed information about the profile and its children.",
      "properties": {
        "customer": {
          "description": "Detailed customer information for this profile.",
          "$ref": "#/definitions/customerType"
        },
        "company": {
          "description": "Detailed company information for this profile.",
          "$ref": "#/definitions/companyType"
        },
        "addresses": {
          "description": "List of customer addresses.",
          "type": "object",
          "properties": {
            "addressInfo": {
              "description": "Collection of Detailed information on an address for the customer.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/addressInfoType"
              }
            }
          }
        },
        "telephones": {
          "description": "List of Telephone Number Information",
          "type": "object",
          "properties": {
            "telephoneInfo": {
              "description": "Collection of Detailed information on telephone/fax for the customer.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/telephoneInfoType"
              }
            }
          }
        },
        "emails": {
          "description": "List of email address for the customer.",
          "type": "object",
          "properties": {
            "emailInfo": {
              "description": "Collection of Detailed information on an eMail address for the customer.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/emailInfoType"
              }
            }
          }
        },
        "uRLs": {
          "description": "List of Information on a URL for the customer.",
          "type": "object",
          "properties": {
            "uRLInfo": {
              "description": "Collection of Detailed information on web url/address for the customer.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/uRLInfoType"
              }
            }
          }
        },
        "profileDeliveryMethods": {
          "description": "List of Delivery methods configured against a Property for this Profile.",
          "type": "object",
          "properties": {
            "profileDeliveryMethod": {
              "description": "Collection of delivery methods for this Profile.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/profileDeliveryMethod"
              }
            },
            "hasMore": {
              "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
              "type": "boolean"
            },
            "totalResults": {
              "description": "Total number of rows queried",
              "type": "integer"
            },
            "count": {
              "description": "Total number of rows returned",
              "type": "integer"
            }
          }
        },
        "relationships": {
          "description": "Contains a collection of profiles that have a relationship with this profile.",
          "type": "object",
          "properties": {
            "relationship": {
              "description": "A collection of the profiles that have a relationship with this profile.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/relationshipInfoType"
              }
            }
          }
        },
        "relationshipsSummary": {
          "description": "Contains a collection of profiles that have a relationship with this profile.",
          "type": "object",
          "properties": {
            "relationship": {
              "description": "A collection of the profiles summary that have a relationship with this profile.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/relationshipInfoSummaryType"
              }
            },
            "hasMore": {
              "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
              "type": "boolean"
            },
            "totalResults": {
              "description": "Total number of rows queried",
              "type": "integer"
            },
            "count": {
              "description": "Total number of rows returned",
              "type": "integer"
            }
          }
        },
        "stayReservationInfoList": {
          "description": "Collection of Detailed information on history and future reservations associated with the profile.",
          "$ref": "#/definitions/reservationStayHistoryFutureInfoType"
        },
        "eligibleForFiscalFolio": {
          "description": "Eligible for Fiscal Folio/Payload generation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "profileType": {
          "description": "Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.",
          "$ref": "#/definitions/profileTypeType"
        }
      }
    },
    "customerType": {
      "type": "object",
      "description": "Contains basic data on the customer's identity, location, relationships, finances, memberships, etc.",
      "properties": {
        "personName": {
          "description": "Detailed name information for the customer.",
          "type": "array",
          "maxItems": 5,
          "items": {
            "$ref": "#/definitions/personNameType"
          }
        }
      }
    },
    "personNameType": {
      "type": "object",
      "description": "This provides name information for a person.",
      "properties": {
        "givenName": {
          "description": "Given name, first name or names.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "companyType": {
      "type": "object",
      "properties": {
        "companyName": {
          "description": "Name of the company.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "addressInfoType": {
      "type": "object",
      "description": "Provides address information.",
      "properties": {
        "address": {
          "description": "Address details for the profile.",
          "$ref": "#/definitions/addressType"
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "addressType": {
      "type": "object",
      "description": "Provides address information.",
      "properties": {
        "isValidated": {
          "description": "Indicator to define if the Address is validated by the Address Validation System.",
          "type": "boolean"
        },
        "addressLine": {
          "description": "When the address is unformatted (FormattedInd=\"false\") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.",
          "type": "array",
          "maxItems": 4,
          "items": {
            "type": "string",
            "minLength": 0,
            "maxLength": 80
          }
        },
        "cityName": {
          "description": "City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "postalCode": {
          "description": "Post Office Code number.",
          "type": "string",
          "minLength": 0,
          "maxLength": 15
        },
        "cityExtension": {
          "description": "Post Office City Extension Code number. City Extension mainly used for UK addresses.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "county": {
          "description": "County or District Name (e.g., Fairfax). This is read only.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "state": {
          "description": "State or Province name (e.g., Texas).",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "country": {
          "description": "Country name (e.g., Ireland).",
          "$ref": "#/definitions/countryNameType"
        },
        "type": {
          "description": "Defines the type of address (e.g. home, business, other).",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "typeDescription": {
          "description": "Describes the type code",
          "type": "string"
        }
      }
    },
    "countryNameType": {
      "type": "object",
      "description": "Code for a country or a nationality.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Used for Character Strings, length 0 to 200.",
          "minLength": 0,
          "maxLength": 200
        },
        "code": {
          "description": "Code for a country or a nationality.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "telephoneInfoType": {
      "type": "object",
      "description": "Information on a telephone number for the customer.",
      "properties": {
        "telephone": {
          "description": "Phone details for the profile.",
          "$ref": "#/definitions/telephoneType"
        }
      }
    },
    "telephoneType": {
      "type": "object",
      "description": "Information on a telephone number for the customer.",
      "properties": {
        "phoneNumber": {
          "description": "Telephone number assigned to a single location.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "emailInfoType": {
      "type": "object",
      "description": "Information on an email for the customer.",
      "properties": {
        "email": {
          "description": "eMail deatils for the profile.",
          "$ref": "#/definitions/emailType"
        }
      }
    },
    "emailType": {
      "type": "object",
      "description": "Information on an email for the customer.",
      "properties": {
        "emailAddress": {
          "description": "Defines the e-mail address.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "type": {
          "description": "Defines the purpose of the e-mail address (e.g. personal, business, listserve).",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "uRLInfoType": {
      "type": "object",
      "description": "Web site address.",
      "properties": {
        "url": {
          "description": "Provides URL information.",
          "$ref": "#/definitions/uRLType"
        }
      }
    },
    "uRLType": {
      "type": "object",
      "description": "Web site address, in IETF(The Internet Engineering Task Force) specified format.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Property Value"
        },
        "type": {
          "description": "Defines the purpose of the URL address, such as personal, business, public, etc.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "profileDeliveryMethod": {
      "type": "object",
      "description": "Delivery Information type to the profile.",
      "properties": {
        "deliveryId": {
          "description": "Delivery ID. It will be empty in case of new delivery method.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "deliveryType": {
          "description": "Delivery type can have a value EMAIL, ELECTRONIC etc and it depends on the parameter set in OPERA Control.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "deliveryValue": {
          "description": "Delivery value holds the corresponding value of the delivery type..",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "hotelId": {
          "description": "Property that has delivery methods configured.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "deliveryModule": {
          "description": "Module where this delivery type will be used. Example : EFolio Export, EInvoice , Fiscal, etc..",
          "$ref": "#/definitions/profileDeliveryModuleType"
        },
        "primary": {
          "description": "When true, indicates a primary information.",
          "type": "boolean"
        },
        "orderSequence": {
          "description": "Display Order sequence.",
          "type": "number"
        }
      }
    },
    "profileDeliveryModuleType": {
      "type": "string",
      "description": "Module where this delivery type will be used. Example : EFolio Export, EInvoice , Fiscal, etc..",
      "enum": [
        "EfolioExport"
      ]
    },
    "relationshipInfoType": {
      "type": "object",
      "description": "Relationship Type contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.",
      "properties": {
        "relationshipProfile": {
          "description": "Refer to Relationship Profile type document.",
          "$ref": "#/definitions/relationshipProfileType"
        }
      }
    },
    "relationshipProfileType": {
      "type": "object",
      "properties": {
        "profileIdList": {
          "description": "Original profile details for which the relationships was created",
          "$ref": "#/definitions/uniqueIDListType"
        },
        "profileType": {
          "description": "Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.",
          "$ref": "#/definitions/profileTypeType"
        }
      }
    },
    "profileTypeType": {
      "type": "string",
      "description": "The types of Profile handled by the web service.",
      "enum": [
        "Guest",
        "Agent",
        "Company",
        "Group",
        "Source",
        "Employee",
        "Hotel",
        "Vendor",
        "Contact",
        "Purge",
        "BusinessHeader",
        "BillingAccount",
        "Activity",
        "Potential",
        "Account"
      ]
    },
    "relationshipInfoSummaryType": {
      "type": "object",
      "description": "RelationshipInfoSummaryType contains information about the associations between and among individuals, companies, travel agents, groups, sources, and contact profiles.",
      "properties": {
        "relationshipProfile": {
          "description": "Refer to Relationship Profile Summary type document.",
          "$ref": "#/definitions/relationshipProfileSummaryType"
        },
        "masterAccountDetails": {
          "description": "Refer to Master Profile type document.",
          "$ref": "#/definitions/masterAccountInfoType"
        },
        "relationshipID": {
          "description": "Relationship identifier.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "sourceRelation": {
          "description": "Indicates the type of relationship the current profile(Source Profile) has with the related profile(Target Profile).",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "sourceRelationDescription": {
          "description": "Displays the description of relationship the current profile(Source Profile) has with the related profile(Target Profile).",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "targetRelation": {
          "description": "Displays the type of relationship the Related profile(Target Profile) has with the current profile(Source Profile).",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "targetRelationDescription": {
          "description": "Displays the description of the target relation(Target Profile).",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        }
      }
    },
    "relationshipProfileSummaryType": {
      "type": "object",
      "properties": {
        "customerName": {
          "description": "Name of the customer",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "companyName": {
          "description": "Name of the company.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "telephoneNumber": {
          "description": "Telephone number assigned to a single location",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "address": {
          "description": "Information on address details for the customer/company",
          "$ref": "#/definitions/relationshipAddressType"
        },
        "emailAddress": {
          "description": "Defines the e-mail address.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "ownerCode": {
          "description": "Unique Code to identify the owner.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "profileIdList": {
          "description": "Original profile details for which the relationships was created",
          "$ref": "#/definitions/uniqueIDListType"
        },
        "primary": {
          "description": "Indicates if this relationship is the primary relationship.",
          "type": "boolean"
        },
        "profileStatus": {
          "description": "Status of the profile. Active/Inactive",
          "$ref": "#/definitions/profileStatusType"
        },
        "primaryOwnerCode": {
          "description": "When true, this is a primary owner.",
          "type": "boolean"
        },
        "profileType": {
          "description": "Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.",
          "$ref": "#/definitions/profileTypeType"
        }
      }
    },
    "relationshipAddressType": {
      "type": "object",
      "description": "Provides address information for a Relationship.",
      "properties": {
        "addressLine": {
          "description": "When the address is unformatted (FormattedInd=\"false\") these lines will contain free form address details. When the address is formatted and street number and street name must be sent independently, the street number will be sent using StreetNmbr, and the street name will be sent in the first AddressLine occurrence.",
          "type": "array",
          "maxItems": 4,
          "items": {
            "type": "string",
            "minLength": 0,
            "maxLength": 80
          }
        },
        "city": {
          "description": "City (e.g., Dublin), town, or postal station (i.e., a postal service territory, often used in a military address).",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "postalCode": {
          "description": "Post Office Code number.",
          "type": "string",
          "minLength": 0,
          "maxLength": 15
        },
        "state": {
          "description": "State or Province name (e.g., Texas).",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "country": {
          "description": "Country name (e.g., Ireland).",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        }
      }
    },
    "profileStatusType": {
      "type": "string",
      "enum": [
        "Active",
        "Inactive"
      ]
    },
    "masterAccountInfoType": {
      "type": "object",
      "properties": {
        "masterAccountId": {
          "description": "Unique ID of the Master account.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "masterAccountName": {
          "description": "Name of the Master account.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "reservationStayHistoryFutureInfoType": {
      "type": "object",
      "description": "Information of History and Future Reservation details attached to Profiles.",
      "properties": {
        "historyList": {
          "description": "Refer to History list type document.",
          "$ref": "#/definitions/stayHistoryListType"
        },
        "futureList": {
          "description": "Refer to Future list type document.",
          "$ref": "#/definitions/stayFutureListType"
        }
      }
    },
    "stayHistoryListType": {
      "type": "object",
      "description": "A collection of reservation history details attached to Profiles.",
      "properties": {
        "reservationInfo": {
          "description": "Additional reservation information attached to the profile . Eg : History reservation details",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/stayReservationInfoType"
          }
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        }
      }
    },
    "stayReservationInfoType": {
      "type": "object",
      "description": "The Reservation class contains the current reservation being created or altered.",
      "properties": {
        "reservationIdList": {
          "description": "Unique identifiers for the reservation for both internal and external systems",
          "$ref": "#/definitions/reservationIdList"
        },
        "roomStay": {
          "description": "Collection of room stays.",
          "$ref": "#/definitions/stayInfoType"
        },
        "attachedProfiles": {
          "description": "List of attached profiles",
          "$ref": "#/definitions/resAttachedProfileListType"
        },
        "hotelId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "reservationStatus": {
          "description": "Indicates the status of the reservation.",
          "$ref": "#/definitions/pMS_ResStatusType"
        },
        "computedReservationStatus": {
          "description": "Indicates the status of the reservation.",
          "$ref": "#/definitions/pMS_ResStatusType"
        }
      }
    },
    "reservationIdList": {
      "type": "array",
      "description": "Unique Id that references an object uniquely in the system.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/uniqueID_Type"
      }
    },
    "stayInfoType": {
      "type": "object",
      "description": "Details on the Room Stay including Guest Counts, Time Span of this Room Stay, pointers to Res Guests, guest Memberships, Comments and Special Requests pertaining to this particular Room Stay and finally financial information related to the Room Stay, including Guarantee, Deposit and Payment and Cancellation Penalties.",
      "properties": {
        "arrivalDate": {
          "type": "string",
          "format": "date"
        },
        "departureDate": {
          "type": "string",
          "format": "date"
        },
        "originalTimeSpan": {
          "description": "The Original Time Span covers the Room Stay dates of the original reservation.",
          "$ref": "#/definitions/timeSpanType"
        },
        "expectedTimes": {
          "description": "The expected arrival, return and departure times of the guest.",
          "$ref": "#/definitions/resExpectedTimesType"
        },
        "adultCount": {
          "description": "A collection of Guest Counts associated with Room Stay.",
          "type": "integer"
        },
        "childCount": {
          "description": "A collection of Child Counts associated with Room Stay.",
          "type": "integer"
        },
        "roomClass": {
          "description": "Room class code",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomType": {
          "description": "Room type code",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "componentRoomType": {
          "description": "True indicates room type is a component type.",
          "type": "boolean"
        },
        "numberOfRooms": {
          "description": "Room Id",
          "type": "integer"
        },
        "roomId": {
          "description": "Room Id",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "ratePlanCode": {
          "description": "Rate plan code",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "rateAmount": {
          "description": "Rate amount",
          "$ref": "#/definitions/currencyAmountType"
        },
        "points": {
          "description": "The Points contains the number of points used to book a particular room type.",
          "$ref": "#/definitions/pointsType"
        },
        "rateSuppressed": {
          "description": "Whether this rate should be suppressed from view",
          "type": "boolean"
        },
        "reservationBlock": {
          "description": "Key information about the block for this reservation.",
          "$ref": "#/definitions/reservationBlockType"
        },
        "bookingChannelCode": {
          "description": "Booking channel code",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "linkCode": {
          "description": "Party code",
          "type": "string",
          "maxLength": 2000
        },
        "fixedRate": {
          "description": "True if the rate is a fixed rate, otherwise false",
          "type": "boolean"
        },
        "totalAmount": {
          "description": "The total amount charged for the Room Stay including additional occupant amounts and fees. If TaxInclusive is set to True, then taxes are included in the total amount.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "guarantee": {
          "description": "The guarantee information associated to the Room Stay. A maximum of 5 occurances are available for use depending on the context.",
          "$ref": "#/definitions/resGuaranteeType"
        },
        "promotion": {
          "description": "Promotion Codes",
          "$ref": "#/definitions/promotionType"
        },
        "marketCode": {
          "description": "Market code",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "marketDescription": {
          "description": "Description of Market code",
          "type": "string",
          "minLength": 0,
          "maxLength": 4000
        },
        "sourceCode": {
          "description": "Source of business",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "sourceCodeDescription": {
          "description": "Description of the source of business.",
          "type": "string",
          "minLength": 0,
          "maxLength": 4000
        },
        "balance": {
          "description": "Balance amount",
          "$ref": "#/definitions/currencyAmountType"
        },
        "compBalance": {
          "description": "Comp Balance amount",
          "$ref": "#/definitions/currencyAmountType"
        },
        "roomTypeCharged": {
          "description": "Room type code that was charged",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "depositPayments": {
          "description": "A collection of deposit and/or payments for the Room Stay.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "guestServiceStatus": {
          "description": "Service Status of In House guest like DND or MUP",
          "$ref": "#/definitions/guestHousekeepingServiceRequestType"
        },
        "scheduledCheckoutTime": {
          "description": "Indicates that this reservation is scheduled for automated check out.",
          "type": "string",
          "format": "date"
        },
        "roomNumberLocked": {
          "description": "When true, indicates a room number cannot be changed. When false, indicates a room number may be changed.",
          "type": "boolean"
        },
        "pseudoRoom": {
          "description": "True indicates as pseudo room type. This is usually used for a posting master reservation.",
          "type": "boolean"
        },
        "assignedByAI": {
          "description": "Represents the room was assigned by AI Room Assignment.",
          "type": "boolean"
        },
        "upgradedByAI": {
          "description": "Represents the room was assigned by AI Room Assignment.",
          "type": "boolean"
        }
      }
    },
    "timeSpanType": {
      "type": "object",
      "description": "Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date.",
      "properties": {
        "startDate": {
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "endDate": {
          "type": "string",
          "format": "date",
          "maxLength": 8
        }
      }
    },
    "resExpectedTimesType": {
      "type": "object",
      "description": "Holds the Arrival and Departure Time Information",
      "properties": {
        "reservationExpectedArrivalTime": {
          "description": "Arrival Time",
          "type": "string",
          "format": "date-time"
        },
        "reservationExpectedDepartureTime": {
          "description": "Departure Time",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "currencyAmountType": {
      "type": "object",
      "description": "A monetary value expressed with a currency code.",
      "properties": {
        "amount": {
          "description": "A monetary amount.",
          "type": "number"
        },
        "currencyCode": {
          "description": "Provides a currency code to reflect the currency in which an amount may be expressed.",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        }
      }
    },
    "pointsType": {
      "type": "object",
      "description": "The Redeem Points contains the number of points required to book a room type.",
      "properties": {
        "awardsType": {
          "description": "Awards type for the award type rate code.",
          "type": "string"
        },
        "points": {
          "description": "No of points required to book this Room Stay.",
          "type": "integer"
        }
      }
    },
    "reservationBlockType": {
      "type": "object",
      "description": "Key information about the block for a reservation.",
      "properties": {
        "blockIdList": {
          "description": "Collection of unique block identifiers for the reservation.",
          "$ref": "#/definitions/blockIdList"
        },
        "blockName": {
          "description": "The Name of the block that is attached to the reservation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "hotelId": {
          "description": "This is the HotelCode of the Block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "blockIdList": {
      "type": "array",
      "description": "Unique Id that references an object uniquely in the system.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/uniqueID_Type"
      }
    },
    "resGuaranteeType": {
      "type": "object",
      "description": "Validations type record returned after Validations are done.",
      "properties": {
        "guaranteeCode": {
          "description": "Guarantee Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "shortDescription": {
          "description": "Guarantee Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "onHold": {
          "description": "Guarantee Code.",
          "type": "boolean"
        }
      }
    },
    "promotionType": {
      "type": "object",
      "description": "Type to specify a rate promotion. Usually attached to a reservation to indicate a specific promotion is applied to the reservation.",
      "properties": {
        "promotionCode": {
          "description": "Promotion code associated with the rate plan.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "promotionName": {
          "description": "Promotion code Name associated with the rate plan.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "couponCode": {
          "description": "Promotion Coupon Code when promotion is setup to have a valid coupon code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "guestHousekeepingServiceRequestType": {
      "type": "string",
      "description": "Possible values for the Guest Service Status.",
      "enum": [
        "DoNotDisturb",
        "MakeUpRoom",
        "NoStatusSelected"
      ]
    },
    "resAttachedProfileListType": {
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/resAttachedProfileType"
      }
    },
    "resAttachedProfileType": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Attached profile name",
          "type": "string"
        },
        "profileIdList": {
          "description": "Collection of unique profile identifiers",
          "$ref": "#/definitions/profileIdList"
        },
        "reservationProfileType": {
          "$ref": "#/definitions/resProfileTypeType"
        }
      }
    },
    "profileIdList": {
      "type": "array",
      "description": "Unique Id that references an object uniquely in the system.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/uniqueID_Type"
      }
    },
    "resProfileTypeType": {
      "type": "string",
      "enum": [
        "Guest",
        "Company",
        "Group",
        "TravelAgent",
        "Source",
        "ReservationContact",
        "BillingContact",
        "Addressee"
      ]
    },
    "pMS_ResStatusType": {
      "type": "string",
      "description": "This reservation is in checked in status and the business date is past departure date. This could occur when ORS and PMS are in same environment.",
      "enum": [
        "Reserved",
        "Requested",
        "NoShow",
        "Cancelled",
        "InHouse",
        "CheckedOut",
        "Waitlisted",
        "DueIn",
        "DueOut",
        "Walkin",
        "PendingCheckout"
      ]
    },
    "stayFutureListType": {
      "type": "object",
      "description": "A collection of reservation history details attached to Profiles.",
      "properties": {
        "reservationInfo": {
          "description": "Additional reservation information attached to the profile . Eg : Future reservation details",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/stayReservationInfoType"
          }
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        }
      }
    },
    "linkedProfileTypeType": {
      "type": "string",
      "description": "Simple type for profile types linked to activity.",
      "enum": [
        "Company",
        "Agent",
        "Source",
        "CompanyContact",
        "AgentContact",
        "SourceContact"
      ]
    },
    "blockListType": {
      "type": "array",
      "description": "List of Blocks that are linked to the Activity.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/activityBlockInfoType"
      }
    },
    "activityBlockInfoType": {
      "type": "object",
      "description": "",
      "properties": {
        "blockIdList": {
          "description": "List of Blocks that are linked to the Activity.",
          "$ref": "#/definitions/uniqueNameIDListType"
        },
        "blockCode": {
          "description": "Block code for the block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "blockName": {
          "description": "Name of the block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "timeSpan": {
          "description": "The Time Span(Start Date, End Date) which covers the Block Span.",
          "$ref": "#/definitions/timeSpanType"
        },
        "primary": {
          "description": "When true, indicates a primary information.",
          "type": "boolean"
        },
        "hotelId": {
          "description": "This is the HotelCode of the Block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "uniqueNameIDListType": {
      "type": "array",
      "description": "Defines descriptive name and unique identification combination.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/uniqueNameIDType"
      }
    },
    "uniqueNameIDType": {
      "type": "object",
      "description": "Defines descriptive name, unique identification, and basic information combination.",
      "properties": {
        "primary": {
          "description": "When true, indicates a primary information.",
          "type": "boolean"
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "attachmentsType": {
      "type": "array",
      "description": "Attachment List.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/attachmentType"
      }
    },
    "attachmentType": {
      "type": "object",
      "description": "Attached files.",
      "properties": {
        "fileName": {
          "description": "Name of the file.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "fileSize": {
          "description": "Size of the file.",
          "type": "integer"
        },
        "description": {
          "description": "Description for the file.",
          "type": "string",
          "minLength": 0,
          "maxLength": 4000
        },
        "global": {
          "description": "Flag to say if attachment is available across properties.",
          "type": "boolean"
        },
        "hotelId": {
          "description": "Hotel Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "history": {
          "description": "History data associated with Attachment.",
          "$ref": "#/definitions/dateTimeStampGroupType"
        },
        "url": {
          "description": "URL that identifies the location associated with the record identified by the UniqueID.",
          "type": "string"
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "instance": {
          "description": "The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idContext": {
          "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        }
      }
    },
    "dateTimeStampGroupType": {
      "type": "object",
      "properties": {
        "createDateTime": {
          "description": "Time stamp of the creation.",
          "type": "string",
          "format": "date-time"
        },
        "creatorId": {
          "description": "ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "lastModifyDateTime": {
          "description": "Time stamp of last modification.",
          "type": "string",
          "format": "date-time"
        },
        "lastModifierId": {
          "description": "Identifies the last software system or person to modify a record.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        }
      }
    },
    "linkedActivityDetailsType": {
      "type": "object",
      "description": "Linked Activity Related Information.",
      "properties": {
        "activityId": {
          "description": "Unique identifier of the linked activity.",
          "$ref": "#/definitions/activityId"
        },
        "linkedActivityDetail": {
          "description": "Linked Activity Related Information.",
          "$ref": "#/definitions/activityInfoType"
        }
      }
    },
    "indicatorsType": {
      "type": "array",
      "description": "Collection of lamp indicators.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/indicatorType"
      }
    },
    "indicatorType": {
      "type": "object",
      "description": "Lamp indicator Type.",
      "properties": {
        "indicatorName": {
          "description": "Name of the indicator.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "count": {
          "description": "Indicates number of occurrences of the indicator.",
          "type": "integer"
        }
      }
    },
    "links": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/instanceLink"
      }
    },
    "instanceLink": {
      "type": "object",
      "description": "Metadata describing link description objects that MAY appear in the JSON instance representation.",
      "properties": {
        "href": {
          "description": "URI [RFC3986] or URI Template [RFC6570]. If the value is set to URI Template, then the \"templated\" property must be set to true.",
          "type": "string"
        },
        "rel": {
          "description": "Name of the link relation that, in addition to the type property, can be used to retrieve link details. For example, href or profile.",
          "type": "string"
        },
        "templated": {
          "description": "Boolean flag that specifies that \"href\" property is a URI or URI Template. If the property is a URI template, set this value to true. By default, this value is false.",
          "type": "boolean",
          "default": false
        },
        "method": {
          "description": "HTTP method for requesting the target of the link.",
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS",
            "HEAD"
          ]
        },
        "targetSchema": {
          "description": "Link to the metadata of the resource, such as JSON-schema, that describes the resource expected when dereferencing the target resource..",
          "type": "string"
        },
        "operationId": {
          "description": "The operationId of the path you can call to follow this link.  This allows you to look up not only the path and method, but the description of that path and any parameters you need to supply.",
          "type": "string"
        },
        "title": {
          "description": "Exact copy of the \"summary\" field on the linked operation.",
          "type": "string"
        }
      }
    },
    "warningsType": {
      "type": "array",
      "description": "Used in conjunction with the Success element to define a business error.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/warningType"
      }
    },
    "warningType": {
      "type": "object",
      "description": "Used when a message has been successfully processed to report any warnings or business errors that occurred.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Property Value"
        },
        "shortText": {
          "description": "An abbreviated version of the error in textual format.",
          "type": "string",
          "maxLength": 2000
        },
        "code": {
          "description": "If present, this refers to a table of coded values exchanged between applications to identify errors or warnings.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "docURL": {
          "description": "If present, this URL refers to an online description of the error that occurred.",
          "type": "string",
          "maxLength": 2000
        },
        "status": {
          "description": "If present, recommended values are those enumerated in the ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.",
          "type": "string",
          "maxLength": 2000
        },
        "tag": {
          "description": "If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].",
          "type": "string",
          "maxLength": 2000
        },
        "recordId": {
          "description": "If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction.",
          "type": "string",
          "maxLength": 2000
        },
        "type": {
          "description": "The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type =\"Unknown\".",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "language": {
          "description": "Language identification.",
          "type": "string",
          "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
        },
        "rph": {
          "description": "Reference Place Holder used as an index for this warning.",
          "type": "string",
          "minLength": 1,
          "maxLength": 8
        }
      }
    },
    "exceptionDetailType": {
      "title": "Error Detail",
      "description": "Complex type that contains error details for a REST call.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML)."
        },
        "title": {
          "type": "string",
          "description": "Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization."
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code for this occurrence of the problem, set by the origin server."
        },
        "detail": {
          "type": "string",
          "description": "Human-readable description specific to this occurrence of the problem."
        },
        "o:errorCode": {
          "type": "string",
          "description": "Application error code, which is different from HTTP error code."
        },
        "o:errorPath": {
          "type": "string",
          "description": "Path to the problem at the resource or property level."
        },
        "o:errorDetails": {
          "description": "Details of the error message, consisting of a hierarchical tree structure.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorInstance"
          }
        },
        "links": {
          "$ref": "#/definitions/links"
        }
      },
      "required": [
        "type",
        "title"
      ]
    },
    "errorInstance": {
      "title": "Error Instance Details",
      "description": "Complex type that contains error instance details for a REST call.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML)."
        },
        "title": {
          "type": "string",
          "description": "Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization."
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code for this occurrence of the problem, set by the origin server."
        },
        "detail": {
          "type": "string",
          "description": "Human-readable description specific to this occurrence of the problem."
        },
        "instance": {
          "type": "string",
          "description": "Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced."
        },
        "o:errorCode": {
          "type": "string",
          "description": "Application error code, which is different from HTTP error code."
        },
        "o:errorPath": {
          "type": "string",
          "description": "Path to the problem at the resource or property level."
        }
      },
      "required": [
        "type",
        "title"
      ]
    },
    "status": {
      "type": "object",
      "description": "Response Body.",
      "properties": {
        "warnings": {
          "$ref": "#/definitions/warningsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        }
      }
    },
    "activitiesToChange": {
      "type": "object",
      "properties": {
        "activitiesInformation": {
          "description": "Activities details to be updated.",
          "$ref": "#/definitions/activityListType"
        },
        "activityDetailsEditFlag": {
          "description": "Signifies whether only activity details are being modified.",
          "type": "boolean"
        },
        "updateLinkedActivities": {
          "description": "Signifies whether the linked activity details should be modified or not.",
          "type": "boolean"
        },
        "completeMode": {
          "description": "Signifies whether complete details of activity should alone be modified.",
          "type": "boolean"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "emailsDetails": {
      "type": "object",
      "description": "Response object for FetchEmails Operation.",
      "properties": {
        "emailsFetched": {
          "description": "Collection of fetched External Emails.",
          "$ref": "#/definitions/emailsFetchedType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "emailsFetchedType": {
      "type": "object",
      "description": "Type contains the detailed information of a sender external email stored .",
      "properties": {
        "fetchedSenderEmailInfo": {
          "description": "Detailed information of a sender external email stored.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/emailInfoResponseType"
          }
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        }
      }
    },
    "emailInfoResponseType": {
      "type": "object",
      "description": "Defines elements related to fetched external emails stored.",
      "properties": {
        "hotelCodes": {
          "description": "This is the List of the Hotel Codes of the Sender External Email.",
          "$ref": "#/definitions/codeListType"
        },
        "emailID": {
          "description": "Unique identifier for the Sender External Email stored.",
          "$ref": "#/definitions/emailID"
        },
        "accountId": {
          "description": "Account ID linked to the Sender Email.",
          "$ref": "#/definitions/accountId"
        },
        "contactId": {
          "description": "Contact ID linked to the Sender Email.",
          "$ref": "#/definitions/contactId"
        },
        "blockId": {
          "description": "Block ID linked to the Sender Email.",
          "$ref": "#/definitions/blockId"
        },
        "emailSubject": {
          "description": "Subject of the email.",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "senderLastName": {
          "description": "Family name or last name of the Sender.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "senderFirstName": {
          "description": "Given name or first name of the Sender.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "senderEmailAddress": {
          "description": "Email address of the Sender.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "emailAttachmentId": {
          "description": "Email Attachment Id for stored external emails.",
          "type": "integer"
        },
        "emailReceivedDateTime": {
          "description": "Email Recieved Date Time of the Sender.",
          "type": "string",
          "format": "date-time"
        },
        "emailRecipients": {
          "description": "List of Email TO Recipients separated by \";\"",
          "type": "string",
          "minLength": 0,
          "maxLength": 4000
        },
        "hasEmailAttachments": {
          "description": "Indicates if the Email body has attachments included.",
          "type": "boolean"
        }
      }
    },
    "codeListType": {
      "type": "array",
      "maxItems": 4000,
      "items": {
        "type": "string",
        "minLength": 0,
        "maxLength": 20
      }
    },
    "emailID": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "properties": {
        "url": {
          "description": "URL that identifies the location associated with the record identified by the UniqueID.",
          "type": "string"
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "instance": {
          "description": "The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idContext": {
          "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idExtension": {
          "description": "Additional identifying value assigned by the creating system.",
          "type": "integer"
        }
      }
    },
    "accountId": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "properties": {
        "url": {
          "description": "URL that identifies the location associated with the record identified by the UniqueID.",
          "type": "string"
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "instance": {
          "description": "The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idContext": {
          "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idExtension": {
          "description": "Additional identifying value assigned by the creating system.",
          "type": "integer"
        }
      }
    },
    "contactId": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "properties": {
        "url": {
          "description": "URL that identifies the location associated with the record identified by the UniqueID.",
          "type": "string"
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "instance": {
          "description": "The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idContext": {
          "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idExtension": {
          "description": "Additional identifying value assigned by the creating system.",
          "type": "integer"
        }
      }
    },
    "blockId": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "properties": {
        "url": {
          "description": "URL that identifies the location associated with the record identified by the UniqueID.",
          "type": "string"
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "instance": {
          "description": "The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idContext": {
          "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idExtension": {
          "description": "Additional identifying value assigned by the creating system.",
          "type": "integer"
        }
      }
    },
    "activity": {
      "type": "object",
      "properties": {
        "activityDetails": {
          "description": "Type used to hold Activity in detail.",
          "$ref": "#/definitions/activityDetailsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "activitiesInformation": {
      "type": "object",
      "properties": {
        "activitiesInformation": {
          "description": "Activities details to be created.",
          "$ref": "#/definitions/activityListType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "activityStatistics": {
      "type": "object",
      "properties": {
        "reports": {
          "description": "Statistical report - each report is determined by the requested report in the service request criteria.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/activityStatReportType"
          }
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "activityStatReportType": {
      "type": "object",
      "description": "Base abstraction defining all details needed to create a statistical report.",
      "properties": {
        "chainCode": {
          "description": "The code that identifies a hotel chain or management group. The hotel chain code is decided between vendors. This attribute is optional if the hotel is an independent property that can be identified by the HotelCode attribute.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "hotelId": {
          "description": "The code that uniquely identifies a single hotel property. The hotel code is decided between vendors.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "hotelCityCode": {
          "description": "The IATA city code; for example DCA, ORD.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "hotelName": {
          "description": "A text field used to communicate the proper name of the hotel.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "hotelCodeContext": {
          "description": "A text field used to communicate the context (or source of - ex Sabre, Galileo, Worldspan, Amadeus) the HotelReferenceGroup codes.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "chainName": {
          "description": "The name of the hotel chain (e.g., Hilton, Marriott, Hyatt).",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "calendarDate": {
          "description": "Statistical date of the requested report.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "statCategory": {
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/activityStatCategoryType"
          }
        },
        "reportCode": {
          "$ref": "#/definitions/activityStatReportCodeType"
        }
      }
    },
    "activityStatCategoryType": {
      "type": "object",
      "description": "Defines the codes and corresponding categories for which the data in the other elements has been gathered.",
      "properties": {
        "statCode": {
          "description": "Defines where this statistical data is applied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "statCodeClass": {
          "description": "Classification of the statistical data.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "statSet": {
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/activityStatSetType"
          }
        },
        "statCategoryCode": {
          "$ref": "#/definitions/activityStatCategoryCodeType"
        }
      }
    },
    "activityStatSetType": {
      "type": "object",
      "description": "Base statistic set holder which defines the span of the statistical data.",
      "properties": {
        "start": {
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "end": {
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "stat": {
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/activityStatType"
          }
        },
        "owner": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "activityStatType": {
      "type": "object",
      "description": "Since the statistical value can be represented in different measure of units, this element will provide a flexible definition for the supported Opera9 statistical units.",
      "properties": {
        "unitType": {
          "description": "Unit of measurement or the actual code that defines the value. Eg. CurrencyCode for the Amount Category.",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        },
        "unitValue": {
          "description": "Statistical value.",
          "type": "number"
        },
        "unitCategory": {
          "description": "Statistical unit category.",
          "$ref": "#/definitions/statUnitCategoryType"
        },
        "code": {
          "$ref": "#/definitions/activityStatCodeType"
        }
      }
    },
    "statUnitCategoryType": {
      "type": "string",
      "description": "Supported statistical units.",
      "enum": [
        "Numeric",
        "Amount"
      ]
    },
    "activityStatCodeType": {
      "type": "string",
      "description": "Supported activity statistical codes.",
      "enum": [
        "CompletedToDo",
        "IncompleteToDo",
        "CompletedAppointments",
        "IncompleteAppointments"
      ]
    },
    "activityStatCategoryCodeType": {
      "type": "string",
      "description": "Supported activity statistical category codes.",
      "enum": [
        "HotelCode"
      ]
    },
    "activityStatReportCodeType": {
      "type": "string",
      "description": "Supported Activity report codes.",
      "enum": [
        "Activities"
      ]
    },
    "activityAttachments": {
      "type": "object",
      "properties": {
        "activityAttachmentList": {
          "description": "Collection of information about activity attachments returned/fetched as per the criteria in the fetch request.",
          "$ref": "#/definitions/attachmentsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "linkedActivities": {
      "type": "object",
      "properties": {
        "linkedActivityDetails": {
          "description": "Linked activities to be created.",
          "$ref": "#/definitions/linkedActivitiesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "linkedActivitiesType": {
      "type": "object",
      "description": "Provides the data to create linked activities to an activity .",
      "properties": {
        "hotelId": {
          "description": "Hotel Code of the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "activityId": {
          "description": "Unique identifier of the parent activity.",
          "$ref": "#/definitions/activityId"
        },
        "ownerCodeList": {
          "description": "List of Owner codes of the Linked Activity.",
          "$ref": "#/definitions/codeListType"
        }
      }
    },
    "activityLog": {
      "type": "object",
      "properties": {
        "activityLogDetails": {
          "description": "Collection of the list of Activities(Log) requested.",
          "$ref": "#/definitions/activityLogListType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "activityLogListType": {
      "type": "object",
      "properties": {
        "activityLog": {
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/activityLogType"
          }
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        }
      }
    },
    "activityLogType": {
      "type": "object",
      "properties": {
        "hotelId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "module": {
          "type": "string"
        },
        "logDate": {
          "type": "string",
          "format": "date-time"
        },
        "refActionId": {
          "type": "number"
        },
        "logUserId": {
          "type": "integer"
        },
        "logUserName": {
          "type": "string"
        },
        "machineStation": {
          "type": "string"
        },
        "croCode": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "actionType": {
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "actionDescription": {
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "iPAddress": {
          "description": "The IP Address of the machine that performed the activity",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "deviceCode": {
          "description": "The selected device code",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        }
      }
    },
    "recentlyAccessedActivities": {
      "type": "object",
      "properties": {
        "activities": {
          "description": "List of recently accessed profiles.",
          "$ref": "#/definitions/recentlyAccessedActivitiesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "recentlyAccessedActivitiesType": {
      "type": "array",
      "description": "A single recently accessed activity.",
      "maxItems": 10,
      "items": {
        "$ref": "#/definitions/recentlyAccessedActivityType"
      }
    },
    "recentlyAccessedActivityType": {
      "type": "object",
      "description": "A recently used activity details.",
      "properties": {
        "activityIdList": {
          "description": "List of unique ids, consisting of the activity id.",
          "$ref": "#/definitions/activityIdListType"
        },
        "activityTypeDescription": {
          "description": "Description of the ActivityType.",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "activityOwnerCode": {
          "description": "Owner Code of the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "timeSpan": {
          "description": "Activity start date and end date.",
          "$ref": "#/definitions/timeSpanType"
        },
        "accessDate": {
          "description": "The date the record was accessed.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "hotelId": {
          "description": "Hotel Code of the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "activityIdListType": {
      "type": "array",
      "description": "Unique identifier for the Activity.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/activityId"
      }
    },
    "activitiesBulkUpdate": {
      "type": "object",
      "description": "Request object that will Change a list of activities.",
      "properties": {
        "activitiesBulkUpdate": {
          "description": "Activities information, that is going to be updated in batch.",
          "$ref": "#/definitions/activitiesBulkUpdateType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "activitiesBulkUpdateType": {
      "type": "object",
      "description": "Collection of Activity Ids their details to be updated.",
      "properties": {
        "activityIdList": {
          "type": "array",
          "description": "Selected activities Unique identifier.",
          "maxItems": 200,
          "items": {
            "$ref": "#/definitions/activityIdRecord"
          }
        },
        "skipProcessing": {
          "description": "Boolean flag if True will skip processing activities",
          "type": "boolean"
        },
        "activityRec": {
          "description": "Selected activities to be updated with these activity details.",
          "$ref": "#/definitions/activityChanges"
        }
      }
    },
    "activityChanges": {
      "type": "object",
      "description": "Activities details to be updated.",
      "properties": {
        "activityClass": {
          "description": "Indicates the Activity Class.",
          "$ref": "#/definitions/activityConfigClassType"
        },
        "activityType": {
          "description": "Indicates the Activity Type used for the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "activityPurpose": {
          "description": "Indicates Purpose of the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "activityTraceCode": {
          "description": "Activity Trace code used for the Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "activityOwner": {
          "description": "Owner of Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "startDate": {
          "description": "Start Date of Activity.",
          "type": "string",
          "format": "date"
        },
        "startTime": {
          "description": "Start time of the Activity.",
          "type": "string"
        },
        "endDate": {
          "description": "End Date of Activity.",
          "type": "string",
          "format": "date"
        },
        "endTime": {
          "description": "End time of the Activity.",
          "type": "string"
        },
        "notes": {
          "description": "Notes associated with an Activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 4000
        },
        "highPriority": {
          "description": "Indicates whether Activity has a high priority.",
          "type": "boolean"
        },
        "activityAccount": {
          "description": "The list of accounts associated with an activity.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "activityContact": {
          "description": "The list of accounts associated with an activity.",
          "$ref": "#/definitions/uniqueID_Type"
        }
      }
    },
    "activityIdRecord": {
      "type": "object",
      "description": "Unique identifier for the Activity Record containing activity ID and activity property.",
      "properties": {
        "hotelId": {
          "description": "Hotel code to which activity belongs",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "id": {
          "description": "Unique ID belonging to the activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        }
      }
    },
    "activitiesBulkUpdateStatus": {
      "type": "object",
      "properties": {
        "activitiesBulkUpdateStatusType": {
          "description": "Status/Info of the processed activities.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/activitiesProcessedInfoType"
          }
        }
      }
    },
    "activitiesProcessedInfoType": {
      "type": "object",
      "description": "Status/Info of the processed activities.",
      "properties": {
        "activityIdRecord": {
          "description": "The activity details which were not processed.",
          "$ref": "#/definitions/activityIdRecord"
        },
        "reason": {
          "description": "Reason for not processing the activity.",
          "type": "string"
        },
        "processingInfoType": {
          "description": "Flag to indicate the warning messages from the API",
          "type": "string"
        },
        "processingInfoCode": {
          "description": "Erorr/Warning code for not processing the activity.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        }
      }
    }
  },
  "tags": [
    {
      "name": "Activity",
      "description": "The Activity REST APIs allow you to view, create, update, and complete an Activity in OPERA Cloud. You are also able to perform more actions such as add attachments."
    }
  ],
  "externalDocs": {
    "description": "Find out more about Oracle Hospitality",
    "url": "https://docs.oracle.com/en/industries/hospitality/integration_platforms.html"
  }
}