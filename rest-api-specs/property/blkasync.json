{
  "swagger": "2.0",
  "info": {
    "title": "OPERA Cloud Block Reservation Asynchronous API",
    "description": "APIs to cater Block Reservation related asynchronous functionality in OPERA.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>",
    "version": "24.4",
    "termsOfService": "https://www.oracle.com/legal/terms.html",
    "contact": {
      "email": "hospitality_apis_ww_grp@oracle.com"
    },
    "license": {
      "name": "UPL",
      "url": "https://opensource.org/licenses/upl"
    }
  },
  "schemes": [
    "https"
  ],
  "basePath": "/blk/async/v1",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary": {
      "post": {
        "summary": "This API facilitates fetching block allocation summary for a Hotel.",
        "description": "This API will fetch Block allocation information for a hotel, and specified date range. The block allocated inventory, rates and room type statistics are returned as part of the response. The maximum limit of date range (whether using start/endDate or startLastModifiedDate/endLastModifiedDate) is 94 days, but the recommendation is to use a date range proportionate to the size of the hotel.   Every identical request (employing the same query parameters) for the getBlockAllocationSummary operation when requesting data with start/endDate or startLastModifiedDate/endLastModifiedDate, necessitates a mandatory 30-minute interval between submissions. Please note that this limit applies regardless of whether the POST, HEAD, and GET cycle has been completed. The API returns a header parameter location that can be used in the getBlockAllocationSummaryProcessStatus operation.  Use event-driven APIs -(see https://docs.oracle.com/cd/F29336_01/doc.201/f27480/c_business_events.htm#OHIPU-BusinessEvents-F0AC1F1C) -to get real-time block updates. <p><strong>OperationId:</strong>startBlockAllocationSummaryProcess</p>",
        "operationId": "startBlockAllocationSummaryProcess",
        "x-interaction": [
          "async-polling"
        ],
        "responses": {
          "202": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of process status resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/links"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "extSystemCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "criteria",
            "in": "body",
            "required": true,
            "description": "Request object for fetching block allocation summary asynchronously.",
            "schema": {
              "$ref": "#/definitions/criteria"
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      }
    },
    "/externalSystems/{extSystemCode}/hotels/{hotelId}/blocks/allocationSummary/{requestId}": {
      "head": {
        "summary": "This API returns the status of asynchronous process scheduled for given id.",
        "description": " <p><strong>OperationId:</strong>getBlockAllocationSummaryProcessStatus</p>",
        "operationId": "getBlockAllocationSummaryProcessStatus",
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Status": {
                "type": "string",
                "description": "Status of the requested process.",
                "enum": [
                  "Processing",
                  "Invalid"
                ]
              },
              "Cache-Control": {
                "type": "string",
                "description": "number of seconds to wait before polling again.",
                "x-example": "max-age=10"
              }
            },
            "description": "Response for status of scheduled asynchronous process."
          },
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Status": {
                "type": "string",
                "description": "Status of the requested process.",
                "enum": [
                  "Completed"
                ]
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource once the status of process run is Complete."
              }
            },
            "description": "Response for status of scheduled asynchronous process."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "extSystemCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      },
      "get": {
        "summary": "This API returns a hotel's block allocation summary for a scheduled process.",
        "description": "This API will fetch Block allocation information for a hotel, and specified date range.  The block allocated inventory, rates and room type statistics are returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationSummary</p>",
        "operationId": "getBlockAllocationSummary",
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Callback request object for fetched block allocation summary.",
            "schema": {
              "$ref": "#/definitions/blockAllocationSummary"
            }
          },
          "204": {
            "description": "BlockAllocationSummary not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "extSystemCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      }
    },
    "/hotels/{hotelId}/blocks/{blockId}/allocation": {
      "post": {
        "summary": "This API facilitates setting Block Allocations for a Hotel.",
        "description": "Use this API to add block room type allocations and rates to a specified Block. <p><strong>OperationId:</strong>startBlockAllocationProcess</p>",
        "operationId": "startBlockAllocationProcess",
        "x-interaction": [
          "async-polling"
        ],
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "blockId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Block ID which is used to find a Block from OPERA. This ID is a primary identification of a Block in OPERA."
          },
          {
            "name": "allocation",
            "in": "body",
            "required": true,
            "description": "A Request message that sets the room allocations as a collection of room types and dates.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/allocation"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "202": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of process status resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/links"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      }
    },
    "/hotels/{hotelId}/blocks/{blockId}/allocation/{requestId}": {
      "head": {
        "summary": "This API returns the status of asynchronous process scheduled for given id.",
        "description": " <p><strong>OperationId:</strong>getBlockAllocationProcessStatus</p>",
        "operationId": "getBlockAllocationProcessStatus",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "blockId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Block ID which is used to find a Block from OPERA. This ID is a primary identification of a Block in OPERA."
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Status": {
                "type": "string",
                "description": "Status of the requested process.",
                "enum": [
                  "Processing",
                  "Invalid"
                ]
              },
              "Cache-Control": {
                "type": "string",
                "description": "number of seconds to wait before polling again.",
                "x-example": "max-age=10"
              }
            },
            "description": "Response for status of scheduled asynchronous process."
          },
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Status": {
                "type": "string",
                "description": "Status of the requested process.",
                "enum": [
                  "Completed"
                ]
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource once the status of process run is Complete."
              }
            },
            "description": "Response for status of scheduled asynchronous process."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      },
      "get": {
        "summary": "This API returns information about the set allocation process.",
        "description": "This API will fetch Block allocation warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getBlockAllocationProcessInfo</p>",
        "operationId": "getBlockAllocationProcessInfo",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "blockId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Block ID which is used to find a Block from OPERA. This ID is a primary identification of a Block in OPERA."
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Callback request object for fetched block allocation process information.",
            "schema": {
              "$ref": "#/definitions/processDetails"
            }
          },
          "204": {
            "description": "BlockAllocationProcessInfo not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      }
    },
    "/hotels/{hotelId}/blocks/{blockId}/allocationRanges": {
      "post": {
        "summary": "This API facilitates setting Block Allocation Ranges for a Hotel.",
        "description": "Use this API to set business block allocation for one or more date ranges, which are within business block date range, and for a list of room types. <p><strong>OperationId:</strong>startAllocationRangesProcess</p>",
        "operationId": "startAllocationRangesProcess",
        "x-interaction": [
          "async-polling"
        ],
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "blockId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Block ID which is used to find a Block from OPERA. This ID is a primary identification of a Block in OPERA."
          },
          {
            "name": "allocationRanges",
            "in": "body",
            "required": true,
            "description": "Request for updating block allocations for ranges of dates and list of room types.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/allocationRanges"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "202": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of process status resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/links"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      }
    },
    "/hotels/{hotelId}/blocks/{blockId}/allocationRanges/{requestId}": {
      "head": {
        "summary": "This API returns the status of asynchronous process scheduled for given id.",
        "description": " <p><strong>OperationId:</strong>getAllocationRangesProcessStatus</p>",
        "operationId": "getAllocationRangesProcessStatus",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "blockId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Block ID which is used to find a Block from OPERA. This ID is a primary identification of a Block in OPERA."
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Status": {
                "type": "string",
                "description": "Status of the requested process.",
                "enum": [
                  "Processing",
                  "Invalid"
                ]
              },
              "Cache-Control": {
                "type": "string",
                "description": "number of seconds to wait before polling again.",
                "x-example": "max-age=10"
              }
            },
            "description": "Response for status of scheduled asynchronous process."
          },
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Status": {
                "type": "string",
                "description": "Status of the requested process.",
                "enum": [
                  "Completed"
                ]
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource once the status of process run is Complete."
              }
            },
            "description": "Response for status of scheduled asynchronous process."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      },
      "get": {
        "summary": "This API returns information about the set allocation ranges process.",
        "description": "This API will fetch Block allocation ranges warnings for a hotel to allow for overbooking information to be returned as part of the response. <p><strong>OperationId:</strong>getAllocationRangesProcessInfo</p>",
        "operationId": "getAllocationRangesProcessInfo",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "blockId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Block ID which is used to find a Block from OPERA. This ID is a primary identification of a Block in OPERA."
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Callback request object for fetched block allocation process information.",
            "schema": {
              "$ref": "#/definitions/processDetails"
            }
          },
          "204": {
            "description": "AllocationRangesProcessInfo not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      }
    },
    "/hotels/{hotelId}/blocks/{blockId}/shift": {
      "post": {
        "summary": "Shifts the Block start date.",
        "description": "Use this API to move or shift the dates of a block in OPERA. <p><strong>OperationId:</strong>startShiftBlockProcess</p>",
        "operationId": "startShiftBlockProcess",
        "x-interaction": [
          "async-polling"
        ],
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "blockId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Block ID which is used to find a Block from OPERA. This ID is a primary identification of a Block in OPERA."
          },
          {
            "name": "blockToShift",
            "in": "body",
            "required": true,
            "description": "Request object to shift business block starting date.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/blockToShift"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "202": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of process status resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/links"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      }
    },
    "/hotels/{hotelId}/blocks/{blockId}/shift/{requestId}": {
      "head": {
        "summary": "This API returns the status of asynchronous process scheduled for given id.",
        "description": " <p><strong>OperationId:</strong>getShiftBlockProcessStatus</p>",
        "operationId": "getShiftBlockProcessStatus",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "blockId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Block ID which is used to find a Block from OPERA. This ID is a primary identification of a Block in OPERA."
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Status": {
                "type": "string",
                "description": "Status of the requested process.",
                "enum": [
                  "Processing",
                  "Invalid"
                ]
              },
              "Cache-Control": {
                "type": "string",
                "description": "number of seconds to wait before polling again.",
                "x-example": "max-age=10"
              }
            },
            "description": "Response for status of scheduled asynchronous process."
          },
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Status": {
                "type": "string",
                "description": "Status of the requested process.",
                "enum": [
                  "Completed"
                ]
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource once the status of process run is Complete."
              }
            },
            "description": "Response for status of scheduled asynchronous process."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      },
      "get": {
        "summary": "This API returns information about the shift block process.",
        "description": "This API will fetch shift Block warnings and errors to be returned as part of the response. <p><strong>OperationId:</strong>getShiftBlockProcessInfo</p>",
        "operationId": "getShiftBlockProcessInfo",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "name": "blockId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Block ID which is used to find a Block from OPERA. This ID is a primary identification of a Block in OPERA."
          },
          {
            "name": "requestId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Callback request object for fetched shift block process information.",
            "schema": {
              "$ref": "#/definitions/processDetails"
            }
          },
          "204": {
            "description": "Shift Block information not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "BlockAsync"
        ]
      }
    }
  },
  "parameters": {
    "authKey": {
      "name": "authorization",
      "description": "Bearer token that needs to be passed which is generated post user authentication",
      "type": "string",
      "in": "header",
      "required": true
    },
    "x-app-key": {
      "name": "x-app-key",
      "description": "Client or Partner's Application Key",
      "type": "string",
      "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
      "in": "header",
      "required": true
    },
    "x-hotelid": {
      "name": "x-hotelid",
      "type": "string",
      "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
      "in": "header",
      "required": true
    },
    "Accept-Language": {
      "name": "Accept-Language",
      "type": "string",
      "description": "Language code",
      "in": "header"
    }
  },
  "responses": {
    "400": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/exceptionDetailType"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden"
    },
    "404": {
      "description": "Resource not found",
      "schema": {
        "$ref": "#/definitions/exceptionDetailType"
      }
    },
    "405": {
      "description": "Method not allowed"
    },
    "406": {
      "description": "Not acceptable."
    },
    "413": {
      "description": "Request Entity Too Large"
    },
    "414": {
      "description": "Request URI Too Large"
    },
    "415": {
      "description": "Unsupported Media Type"
    },
    "500": {
      "description": "System Error",
      "schema": {
        "$ref": "#/definitions/exceptionDetailType"
      }
    },
    "502": {
      "description": "Bad Gateway"
    },
    "503": {
      "description": "Service Unavailable"
    }
  },
  "definitions": {
    "exceptionDetailType": {
      "title": "Error Detail",
      "description": "Complex type that contains error details for a REST call.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML)."
        },
        "title": {
          "type": "string",
          "description": "Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization."
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code for this occurrence of the problem, set by the origin server."
        },
        "detail": {
          "type": "string",
          "description": "Human-readable description specific to this occurrence of the problem."
        },
        "instance": {
          "type": "string",
          "description": "Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced."
        },
        "o:errorCode": {
          "type": "string",
          "description": "Application error code, which is different from HTTP error code."
        },
        "o:errorPath": {
          "type": "string",
          "description": "Path to the problem at the resource or property level."
        },
        "o:errorDetails": {
          "description": "Details of the error message, consisting of a hierarchical tree structure.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorInstance"
          }
        },
        "links": {
          "$ref": "#/definitions/links"
        }
      }
    },
    "errorInstance": {
      "title": "Error Instance Details",
      "description": "Complex type that contains error instance details for a REST call.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML)."
        },
        "title": {
          "type": "string",
          "description": "Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization."
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code for this occurrence of the problem, set by the origin server."
        },
        "detail": {
          "type": "string",
          "description": "Human-readable description specific to this occurrence of the problem."
        },
        "instance": {
          "type": "string",
          "description": "Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced."
        },
        "o:errorCode": {
          "type": "string",
          "description": "Application error code, which is different from HTTP error code."
        },
        "o:errorPath": {
          "type": "string",
          "description": "Path to the problem at the resource or property level."
        }
      }
    },
    "instanceLink": {
      "type": "object",
      "description": "Metadata describing link description objects that MAY appear in the JSON instance representation.",
      "properties": {
        "href": {
          "description": "URI [RFC3986] or URI Template [RFC6570]. If the value is set to URI Template, then the \"templated\" property must be set to true.",
          "type": "string"
        },
        "rel": {
          "description": "Name of the link relation that, in addition to the type property, can be used to retrieve link details. For example, href or profile.",
          "type": "string"
        },
        "templated": {
          "description": "Boolean flag that specifies that \"href\" property is a URI or URI Template. If the property is a URI template, set this value to true. By default, this value is false.",
          "type": "boolean",
          "default": false
        },
        "method": {
          "description": "HTTP method for requesting the target of the link.",
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS",
            "HEAD"
          ]
        },
        "targetSchema": {
          "description": "Link to the metadata of the resource, such as JSON-schema, that describes the resource expected when dereferencing the target resource..",
          "type": "string"
        },
        "operationId": {
          "description": "The operationId of the path you can call to follow this link.  This allows you to look up not only the path and method, but the description of that path and any parameters you need to supply.",
          "type": "string"
        },
        "title": {
          "description": "Exact copy of the \"summary\" field on the linked operation.",
          "type": "string"
        }
      }
    },
    "links": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/instanceLink"
      }
    },
    "warningType": {
      "type": "object",
      "description": "Used when a message has been successfully processed to report any warnings or business errors that occurred.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Property Value"
        },
        "shortText": {
          "description": "An abbreviated version of the error in textual format.",
          "type": "string",
          "maxLength": 2000
        },
        "code": {
          "description": "If present, this refers to a table of coded values exchanged between applications to identify errors or warnings.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "docURL": {
          "description": "If present, this URL refers to an online description of the error that occurred.",
          "type": "string",
          "maxLength": 2000
        },
        "status": {
          "description": "If present, recommended values are those enumerated in the ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.",
          "type": "string",
          "maxLength": 2000
        },
        "tag": {
          "description": "If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].",
          "type": "string",
          "maxLength": 2000
        },
        "recordId": {
          "description": "If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction.",
          "type": "string",
          "maxLength": 2000
        },
        "type": {
          "description": "The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type =\"Unknown\".",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "language": {
          "description": "Language identification.",
          "type": "string",
          "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
        },
        "rph": {
          "description": "Reference Place Holder used as an index for this warning.",
          "type": "string",
          "minLength": 1,
          "maxLength": 8
        }
      }
    },
    "warningsType": {
      "type": "array",
      "description": "Used in conjunction with the Success element to define a business error.",
      "maxItems": 100,
      "items": {
        "$ref": "#/definitions/warningType"
      }
    },
    "blockAllocationSummaryType": {
      "type": "object",
      "properties": {
        "blockId": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "number",
          "minLength": 0,
          "maxLength": 80
        },
        "blockCode": {
          "description": "Defined block code for the block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "blockName": {
          "description": "Name of the block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "masterBlockId": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "number",
          "minLength": 0,
          "maxLength": 80
        },
        "status": {
          "description": "Booking Status of the block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "marketCode": {
          "description": "Market Code of the block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "cutOffDate": {
          "type": "string",
          "format": "date-time"
        },
        "cutOffDays": {
          "type": "integer"
        },
        "cancellationDate": {
          "description": "Cancellation Date.",
          "type": "string",
          "format": "date-time"
        },
        "cancellationCode": {
          "description": "Code that idenfies the reason for cancellation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "cancellationDescription": {
          "description": "Description that explains the reason for cancellation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "cateringOwner": {
          "description": "Catering Owner",
          "type": "integer"
        },
        "cateringOwnerCode": {
          "description": "Primary Catering Owner Code",
          "type": "string",
          "minLength": 0,
          "maxLength": 10
        },
        "cateringOwnerResort": {
          "description": "Property of Catering Owner",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "owner": {
          "description": "Owner ID",
          "type": "integer"
        },
        "ownerCode": {
          "description": "Block Owner Code",
          "type": "string",
          "minLength": 0,
          "maxLength": 10
        },
        "ownerResort": {
          "description": "Property of Business Block Owner",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomsOwner": {
          "description": "Rooms Owner",
          "type": "integer"
        },
        "roomsOwnerCode": {
          "description": "Primary Rooms Owner Code",
          "type": "string",
          "minLength": 0,
          "maxLength": 10
        },
        "roomsOwnerResort": {
          "description": "Property of Rooms Owner",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "createDateTime": {
          "description": "The business date the block was created.",
          "type": "string",
          "format": "date-time"
        },
        "blockType": {
          "description": "Indicates the internal type of the block like G, etc.",
          "type": "string",
          "minLength": 0,
          "maxLength": 1
        },
        "reservationMethod": {
          "description": "Booking Method.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "ratePlanCode": {
          "description": "Rate code associated with Block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "lastModifiedDate": {
          "description": "Date Time when the block was modified last.",
          "type": "string",
          "format": "date-time"
        },
        "sourceCode": {
          "description": "Source of the Block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "allocationDates": {
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/roomAllocationDateType"
          }
        },
        "bookingMedium": {
          "description": "Booking Medium/Origin Code of the Block.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "blockProfiles": {
          "description": "A collection of all the Primary Profiles associated to a this block.",
          "type": "object",
          "properties": {
            "blockProfile": {
              "description": "The list of primary profiles associated with the block.",
              "type": "array",
              "maxItems": 4000,
              "items": {
                "$ref": "#/definitions/blockProfilesType"
              }
            }
          }
        }
      }
    },
    "blockProfilesType": {
      "type": "object",
      "description": "A collection of Profile objects or Unique IDs of Profiles.",
      "properties": {
        "profileIdList": {
          "description": "Unique identifiers for the Profile for both internal and external systems.",
          "$ref": "#/definitions/uniqueIDListType"
        },
        "profile": {
          "description": "Provides detailed information regarding either a company or a customer profile.",
          "$ref": "#/definitions/profileType"
        },
        "blockProfileType": {
          "description": "Determines the type of the block profile.",
          "$ref": "#/definitions/blockProfileTypeType"
        }
      }
    },
    "uniqueIDListType": {
      "type": "array",
      "description": "Unique Id that references an object uniquely in the system.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/uniqueID_Type"
      }
    },
    "uniqueID_Type": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system.",
      "properties": {
        "id": {
          "description": "A unique identifying value assigned by the creating system.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "profileType": {
      "type": "object",
      "description": "Type provides the detailed information about the profile and its children.",
      "properties": {
        "customer": {
          "description": "Detailed customer information for this profile.",
          "$ref": "#/definitions/customerType"
        },
        "company": {
          "description": "Detailed company information for this profile.",
          "$ref": "#/definitions/companyType"
        },
        "profileType": {
          "description": "Type of profile such as Guest, Agent, Company, Group, Source, Employee, Hotel, Vendor or Contact.",
          "$ref": "#/definitions/profileTypeType"
        }
      }
    },
    "customerType": {
      "type": "object",
      "description": "Contains basic data on the customer's identity.",
      "properties": {
        "personName": {
          "description": "Detailed name information for thecustomer.",
          "type": "array",
          "maxItems": 5,
          "items": {
            "$ref": "#/definitions/personNameType"
          }
        }
      }
    },
    "profileTypeType": {
      "type": "string",
      "description": "The types of Profile handled by the web service.",
      "enum": [
        "Guest",
        "Agent",
        "Company",
        "Group",
        "Source",
        "Employee",
        "Hotel",
        "Vendor",
        "Contact",
        "Purge",
        "BusinessHeader",
        "BillingAccount",
        "Activity",
        "Potential",
        "Account"
      ]
    },
    "personNameType": {
      "type": "object",
      "description": "This provides name information for a person.",
      "properties": {
        "givenName": {
          "description": "Given name, first name or names.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "surname": {
          "description": "Family name, last name.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "companyType": {
      "type": "object",
      "properties": {
        "companyName": {
          "description": "Name of the company.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "blockProfileTypeType": {
      "type": "string",
      "description": "Simple type for block profile types.",
      "enum": [
        "Company",
        "Group",
        "Agent",
        "Source",
        "CompanyContact",
        "AgentContact",
        "SourceContact"
      ]
    },
    "roomAllocationDateType": {
      "type": "object",
      "properties": {
        "allocationDate": {
          "description": "The block date for which the allocation details are listed.",
          "type": "string",
          "format": "date-time"
        },
        "allocations": {
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/roomAllocationDetailsType"
          }
        }
      }
    },
    "roomAllocationDetailsType": {
      "type": "object",
      "properties": {
        "originalRooms": {
          "description": "The total original( forecasted ) rooms for the block.",
          "type": "integer"
        },
        "roomType": {
          "description": "The room type for which the allocation details are listed.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "currentRooms": {
          "description": "The total current( projected + pickup ) rooms for the block.",
          "type": "integer"
        },
        "pickupRooms": {
          "description": "The total pickup rooms for the block.",
          "type": "integer"
        },
        "inventory": {
          "description": "The break up of projected rooms by occupancy.",
          "$ref": "#/definitions/blockGridInvType"
        },
        "rates": {
          "description": "The break up of occupancy rates.",
          "$ref": "#/definitions/blockGridRatesType"
        },
        "actualRevenue": {
          "description": "The break up of actual revenue for room type. Applicable for past dates, business date or future dates.",
          "$ref": "#/definitions/blockActualRevenueType"
        },
        "potentialRevenue": {
          "description": "The break up of potential revenue for room type. Applicable for business date or future dates.",
          "$ref": "#/definitions/blockPotenitalRevenueType"
        }
      }
    },
    "blockGridInvType": {
      "type": "object",
      "description": "Indicates the inventory values ( occupancy or availability ) per person occupancy.",
      "properties": {
        "onePerson": {
          "description": "Indicates the one person inventory value ( occupancy or availability ).",
          "type": "integer"
        },
        "twoPerson": {
          "description": "Indicates the two person inventory value ( occupancy or availability ).",
          "type": "integer"
        },
        "threePerson": {
          "description": "Indicates the three person inventory value ( occupancy or availability ).",
          "type": "integer"
        },
        "fourPerson": {
          "description": "Indicates the four person inventory value ( occupancy or availability ).",
          "type": "integer"
        },
        "sellLimit": {
          "description": "Indicates the sell limit",
          "type": "integer"
        },
        "cutoffDate": {
          "description": "Indicates the cutoff date.Date when inventory left in the block will be cut-off.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        }
      }
    },
    "blockActualRevenueType": {
      "type": "object",
      "description": "Indicates the sum of revenue breakup per room type per block per allocation date for the reservations. Applicable for past dates, business date or future dates.",
      "properties": {
        "roomRevenue": {
          "description": "Indicates room revenue amount.",
          "type": "number"
        },
        "foodRevenue": {
          "description": "Indicates food revenue amount.",
          "type": "number"
        },
        "otherRevenue": {
          "description": "Indicates other revenue amount.",
          "type": "number"
        },
        "nonRevenue": {
          "description": "Indicates non revenue amount.",
          "type": "number"
        },
        "totalRevenue": {
          "description": "Indicates total revenue amount.",
          "type": "number"
        },
        "roomRevenueTax": {
          "description": "Indicates room revenue tax amount.",
          "type": "number"
        },
        "foodRevenueTax": {
          "description": "Indicates food revenue tax amount.",
          "type": "number"
        },
        "otherRevenueTax": {
          "description": "Indicates other revenue tax amount.",
          "type": "number"
        },
        "nonRevenueTax": {
          "description": "Indicates non revenue tax amount.",
          "type": "number"
        },
        "totalRevenueTax": {
          "description": "Indicates total revenue tax amount.",
          "type": "number"
        },
        "currency": {
          "description": "Currency code to reflect the currency in which an amount may be expressed.",
          "type": "string"
        }
      }
    },
    "blockPotenitalRevenueType": {
      "type": "object",
      "description": "Indicates the sum of revenue breakup per room type per block per allocation date for the reservations. Applicable for business date or future dates.",
      "properties": {
        "roomRevenue": {
          "description": "Indicates room revenue amount.",
          "type": "number"
        },
        "foodRevenue": {
          "description": "Indicates food revenue amount.",
          "type": "number"
        },
        "otherRevenue": {
          "description": "Indicates other revenue amount.",
          "type": "number"
        },
        "nonRevenue": {
          "description": "Indicates non revenue amount.",
          "type": "number"
        },
        "totalRevenue": {
          "description": "Indicates total revenue amount.",
          "type": "number"
        },
        "roomRevenueTax": {
          "description": "Indicates room revenue tax amount.",
          "type": "number"
        },
        "foodRevenueTax": {
          "description": "Indicates food revenue tax amount.",
          "type": "number"
        },
        "otherRevenueTax": {
          "description": "Indicates other revenue tax amount.",
          "type": "number"
        },
        "nonRevenueTax": {
          "description": "Indicates non revenue tax amount.",
          "type": "number"
        },
        "totalRevenueTax": {
          "description": "Indicates total revenue tax amount.",
          "type": "number"
        },
        "currency": {
          "description": "Currency code to reflect the currency in which an amount may be expressed.",
          "type": "string"
        }
      }
    },
    "blockGridRatesType": {
      "type": "object",
      "description": "Indicates the rate amount values per person occupancy.",
      "properties": {
        "onePerson": {
          "description": "Indicates the one person occupancy rate amount.",
          "type": "number"
        },
        "twoPerson": {
          "description": "Indicates the two person occupancy rate amount.",
          "type": "number"
        },
        "threePerson": {
          "description": "Indicates the three person occupancy rate amount.",
          "type": "number"
        },
        "fourPerson": {
          "description": "Indicates the four person occupancy rate amount.",
          "type": "number"
        },
        "extraPerson": {
          "description": "Indicates the extra person occupancy rate amount.",
          "type": "number"
        }
      }
    },
    "criteria": {
      "type": "object",
      "description": "Request object for fetching block allocation summary asynchronously.",
      "properties": {
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "occupancyDate": {
          "type": "string",
          "format": "date"
        },
        "startLastModifiedDate": {
          "type": "string",
          "format": "date-time"
        },
        "endLastModifiedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "blockAllocationSummary": {
      "type": "array",
      "description": "Response object for fetched block allocation summary.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/blockAllocationSummaryType"
      }
    },
    "blockId": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "properties": {
        "url": {
          "description": "URL that identifies the location associated with the record identified by the UniqueID.",
          "type": "string"
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "instance": {
          "description": "The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idContext": {
          "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idExtension": {
          "description": "Additional identifying value assigned by the creating system.",
          "type": "integer"
        }
      }
    },
    "setBlockGridInvType": {
      "type": "object",
      "description": "Indicates the inventory values (occupancy or availability) per person occupancy.",
      "properties": {
        "onePerson": {
          "description": "Indicates the one person inventory value (occupancy or availability).",
          "type": "integer"
        },
        "twoPerson": {
          "description": "Indicates the two person inventory value (occupancy or availability).",
          "type": "integer"
        },
        "threePerson": {
          "description": "Indicates the three person inventory value (occupancy or availability).",
          "type": "integer"
        },
        "fourPerson": {
          "description": "Indicates the four person inventory value (occupancy or availability).",
          "type": "integer"
        },
        "sellLimit": {
          "description": "Indicates the sell limit",
          "type": "integer"
        },
        "cutoffDate": {
          "description": "Indicates the cutoff date.Date when inventory left in the block will be cut-off.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "forceOverbook": {
          "description": "Indicates whether to overbook the rooms in case there are not enough rooms at the house or room type level.",
          "type": "boolean"
        }
      }
    },
    "allocationGridByDateRangeType": {
      "type": "object",
      "description": "Indicates the block allocations for a date range. This can be rooms or rate amounts.",
      "properties": {
        "inventory": {
          "description": "Indicates the room inventory values per person occupancy.",
          "$ref": "#/definitions/setBlockGridInvType"
        },
        "rate": {
          "description": "Indicates the rate amount values per person occupancy.",
          "$ref": "#/definitions/blockGridRatesType"
        },
        "start": {
          "description": "The starting value of the date range.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "end": {
          "description": "The ending value of the date range.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "sunday": {
          "type": "boolean"
        },
        "monday": {
          "type": "boolean"
        },
        "tuesday": {
          "type": "boolean"
        },
        "wednesday": {
          "type": "boolean"
        },
        "thursday": {
          "type": "boolean"
        },
        "friday": {
          "type": "boolean"
        },
        "saturday": {
          "type": "boolean"
        }
      }
    },
    "allocationGridByDateRangesType": {
      "type": "object",
      "description": "A collection of Allocation objects for a block, such as Current Rooms, Original Rooms, Rate Amounts, etc.",
      "properties": {
        "roomAllocationInfo": {
          "description": "Allocation objects for a block.",
          "type": "array",
          "maxItems": 100,
          "items": {
            "$ref": "#/definitions/allocationGridByDateRangeType"
          }
        },
        "allocation": {
          "description": "Indicates the type of the Allocation objects.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "sellLimitGridByDateRangeType": {
      "type": "object",
      "description": "Indicates the sell limits for a date range. This will be rooms.",
      "properties": {
        "start": {
          "description": "The starting value of the date range.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "end": {
          "description": "The ending value of the date range.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "sunday": {
          "type": "boolean"
        },
        "monday": {
          "type": "boolean"
        },
        "tuesday": {
          "type": "boolean"
        },
        "wednesday": {
          "type": "boolean"
        },
        "thursday": {
          "type": "boolean"
        },
        "friday": {
          "type": "boolean"
        },
        "saturday": {
          "type": "boolean"
        },
        "sellLimit": {
          "description": "Indicates the sell limit for the date range.",
          "type": "integer"
        }
      }
    },
    "allocationGridByRoomTypeType": {
      "type": "object",
      "description": "A collection of Allocation objects for a block defined by room type.",
      "properties": {
        "allocationGridDates": {
          "description": "Allocation objects for a block by date ranges.",
          "type": "array",
          "maxItems": 100,
          "items": {
            "$ref": "#/definitions/allocationGridByDateRangesType"
          }
        },
        "sellLimitGridDates": {
          "description": "Sell limits for a block by date ranges.",
          "type": "array",
          "maxItems": 100,
          "items": {
            "$ref": "#/definitions/sellLimitGridByDateRangeType"
          }
        },
        "roomType": {
          "description": "Indicates the room type of the Allocation objects.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "allocationGridByRoomTypesType": {
      "type": "object",
      "description": "A collection of Allocation objects for a block defined by room type.",
      "properties": {
        "hotelId": {
          "description": "Opera Hotel code for the Set Allocation Grid request.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "blockId": {
          "description": "Unique block identifier of the block for which the allocations need to be set.",
          "$ref": "#/definitions/blockId"
        },
        "allocationRoomTypes": {
          "description": "Allocation objects of a block grouped by room types.",
          "type": "array",
          "maxItems": 100,
          "items": {
            "$ref": "#/definitions/allocationGridByRoomTypeType"
          }
        },
        "genericRoomType": {
          "description": "Indicates if the Allocation objects refer to Generic Room Types (Room Pools).",
          "type": "boolean"
        }
      }
    },
    "allocation": {
      "type": "object",
      "description": "A Request message that sets the room allocations as a collection of room types and dates.",
      "properties": {
        "criteria": {
          "description": "This element contains the block allocations as a collection of room types and dates.",
          "$ref": "#/definitions/allocationGridByRoomTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "statusType": {
      "type": "string",
      "description": "Status of the process.",
      "enum": [
        "Success",
        "Error",
        "Running",
        "Stopped",
        "Warning",
        "Failed",
        "Started",
        "CompletedWithLogs"
      ]
    },
    "codeDescriptionType": {
      "type": "object",
      "description": "This contains a generic code and description information.",
      "properties": {
        "code": {
          "description": "Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "description.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        }
      }
    },
    "cateringEventsProcessedInfoType": {
      "type": "object",
      "description": "Status/Info of the processed events.",
      "properties": {
        "hotelId": {
          "description": "Hotel code where event will be copied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "blockId": {
          "description": "BlockID of the event.",
          "$ref": "#/definitions/blockId"
        },
        "eventName": {
          "description": "Name of event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 60
        },
        "eventType": {
          "description": "Type of event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "eventDate": {
          "description": "Date of the event",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "room": {
          "description": "The function space room where the event takes place .",
          "$ref": "#/definitions/codeDescriptionType"
        },
        "status": {
          "description": "Status of the processed event. e.g Completed, Not Processed.",
          "type": "string"
        },
        "reason": {
          "description": "Reason for not processing the event.",
          "type": "string"
        },
        "processingInfoType": {
          "description": "Flag to indicate the warning messages from the API",
          "type": "string"
        },
        "processingInfoCode": {
          "description": "Erorr/Warning code for not processing th event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        }
      }
    },
    "cateringEventsProcessedInfoList": {
      "type": "array",
      "description": "Status/Info of the processed events.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringEventsProcessedInfoType"
      }
    },
    "processDetails": {
      "type": "object",
      "description": "Response object to hold the details of process.",
      "properties": {
        "status": {
          "description": "Status of the process.",
          "$ref": "#/definitions/statusType"
        },
        "cateringEventsProcessedInfo": {
          "description": "Status of the processed events after the process.",
          "$ref": "#/definitions/cateringEventsProcessedInfoList"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "allocationType": {
      "type": "string",
      "description": "Simple type for block allocation used in room rate grid.",
      "enum": [
        "Initial",
        "Actual",
        "Rates",
        "Pickup",
        "Contract",
        "Available",
        "Pickupperc",
        "Changes",
        "Released",
        "Houseavailability",
        "SellLimit",
        "AvailableSellLimit",
        "MasterAllocInitial",
        "Allocated",
        "SubAllocResv",
        "CutoffDate",
        "ForecastRooms",
        "ForecastRates"
      ]
    },
    "blockRangeModeType": {
      "type": "string",
      "description": "Enumerates range operation modes.",
      "enum": [
        "Core",
        "ShoulderStart",
        "ShoulderEnd"
      ]
    },
    "blockAllocationRangeType": {
      "type": "object",
      "description": "Container for information related to block allocation range update operation",
      "properties": {
        "blockId": {
          "description": "Specifies the Block ID which is the unique identifier for the Block for both internal and external systems.",
          "$ref": "#/definitions/blockId"
        },
        "hotelId": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomTypes": {
          "description": "List of room types for which the range update has to be applied.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "type": "string",
            "minLength": 0,
            "maxLength": 20
          }
        },
        "beginDate": {
          "description": "Begin date for range update operation.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "endDate": {
          "description": "End date for range update operation.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "allocationType": {
          "description": "Allocation type for which the range operation is applied.",
          "$ref": "#/definitions/allocationType"
        },
        "incrementFlag": {
          "description": "Flag to indicate if the occupancy data is absolute or relative to the current value.",
          "type": "boolean"
        },
        "blockInventory": {
          "description": "Occupancy data for range operation.",
          "$ref": "#/definitions/blockGridInvType"
        },
        "blockRates": {
          "description": "Rate details for range operation.",
          "$ref": "#/definitions/blockGridRatesType"
        },
        "cutoffDate": {
          "description": "Date after which unused block rooms should be returned to house.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "cutoffDays": {
          "description": "Number of days from block start date after which unused block rooms should be returned to house.",
          "type": "integer"
        },
        "overrideCutoffSchedule": {
          "description": "A true value indicates that the cutoff schedule, if added to Business Block, can be overridden.",
          "type": "boolean"
        },
        "includedDays": {
          "type": "string",
          "minLength": 0,
          "maxLength": 8
        },
        "rangeMode": {
          "description": "Indicates whether the range is being applied on shoulder dates or core dates.",
          "$ref": "#/definitions/blockRangeModeType"
        },
        "overbookList": {
          "description": "Date which has to be overbooked or excluded.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "type": "object",
            "properties": {
              "stayDate": {
                "description": "Date which has to be overbooked or excluded.",
                "type": "string",
                "format": "date",
                "maxLength": 8
              },
              "roomType": {
                "description": "Room type that has to be overbooked or excluded.",
                "type": "string",
                "minLength": 0,
                "maxLength": 20
              },
              "overbook": {
                "description": "A true value indicates that the date/room type should be overbooked for inventory. A false value indicates that this combination should be excluded from range.",
                "type": "boolean"
              }
            }
          }
        },
        "genericRoomType": {
          "description": "Indicates if the Allocation objects refer to Generic Room Types (Room Pools).",
          "type": "boolean"
        }
      }
    },
    "blockAllocationRanges": {
      "type": "object",
      "description": "Collection of block allocation ranges.",
      "properties": {
        "blockAllocationRanges": {
          "description": "Collection of Range information for the block allocation ranges operation.",
          "type": "array",
          "maxItems": 20,
          "items": {
            "$ref": "#/definitions/blockAllocationRangeType"
          }
        }
      }
    },
    "allocationRanges": {
      "type": "object",
      "description": "Request for setting block allocation for ranges of dates for a list of room types.",
      "properties": {
        "allocationRanges": {
          "description": "Collection of Range information for the block allocation ranges operation.",
          "$ref": "#/definitions/blockAllocationRanges"
        },
        "genericRoomType": {
          "description": "Indicates if the Allocation objects refer to Generic Room Types (Room Pools).",
          "type": "boolean"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "shiftBlockCriteriaType": {
      "type": "object",
      "properties": {
        "newStartDate": {
          "description": "New start date of the business block.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "removeAlternateDates": {
          "description": "When true, this will remove alternate dates for this block before shifting dates.",
          "type": "boolean"
        },
        "validateAlternateDates": {
          "description": "When true, this will validate alternate dates for this block before shifting dates.",
          "type": "boolean"
        },
        "overbookAll": {
          "description": "When true, this will overbook allocated rooms if needed.",
          "type": "boolean"
        },
        "validatePreAllocatedRooms": {
          "description": "When true, this will validate if there are rooms pre-allocated before shifting the block dates.",
          "type": "boolean"
        },
        "validateTraces": {
          "description": "When true, this will validate if there are active traces before shifting the block dates.",
          "type": "boolean"
        },
        "overrideEventsProcessingWarnings": {
          "description": "Indicates whether to ignore any warning during applying the changes to the events associated with the current block.",
          "type": "boolean"
        }
      }
    },
    "blockToShift": {
      "type": "object",
      "description": "Request object to shift business block starting date.",
      "properties": {
        "criteria": {
          "description": "Contains details of the block to be shifted along with the new start date to be applied.",
          "$ref": "#/definitions/shiftBlockCriteriaType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    }
  },
  "tags": [
    {
      "name": "BlockAsync",
      "description": "The Block Async Service Web Service provides capability to implement block related asynchronous operations in OPERA Cloud."
    }
  ],
  "externalDocs": {
    "description": "Find out more about Oracle Hospitality",
    "url": "https://docs.oracle.com/en/industries/hospitality/integration_platforms.html"
  }
}