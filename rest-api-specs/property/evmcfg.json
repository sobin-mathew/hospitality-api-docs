{
  "swagger": "2.0",
  "info": {
    "title": "OPERA Cloud Event Configuration API",
    "description": "This API caters for Event Configuration in OPERA Cloud. <br /><There are operations to post, update, fetch and delete codes such as item inventory, function spaces, menu items and many more.<br /><br /> Compatible with OPERA Cloud release 24.4.<br /><br /><p> This document and all content within is available under the Universal Permissive License v 1.0 (https://oss.oracle.com/licenses/upl). Copyright (c) 2020, 2024 Oracle and/or its affiliates.</p>",
    "version": "24.4",
    "termsOfService": "https://www.oracle.com/legal/terms.html",
    "contact": {
      "email": "hospitality_apis_ww_grp@oracle.com"
    },
    "license": {
      "name": "UPL",
      "url": "https://opensource.org/licenses/upl"
    }
  },
  "schemes": [
    "https"
  ],
  "basePath": "/evm/config/v1",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/EventForecasts/copy": {
      "put": {
        "summary": "Copy event forecasts",
        "description": "This API will allow you to copy an Event Forecast from a property to another. <p><strong>OperationId:</strong>copyEventForecasts</p>",
        "operationId": "copyEventForecasts",
        "parameters": [
          {
            "name": "eventForecastsCopy",
            "in": "body",
            "required": true,
            "description": "Request object for Copying Event Forecasts to multiple hotels.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/eventForecastsCopy"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringContainers": {
      "get": {
        "summary": "Get catering containers",
        "description": "This API allows you to retrieve all existing Menu Item Catering Container codes. <p><strong>OperationId:</strong>getCateringContainers</p>",
        "operationId": "getCateringContainers",
        "parameters": [
          {
            "name": "fetchInactive",
            "in": "query",
            "required": false,
            "description": "Determines wether to fetch inactive records or not.",
            "type": "boolean"
          },
          {
            "name": "codes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the code.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Catering Code Containers details.",
            "schema": {
              "$ref": "#/definitions/cateringContainersInfo"
            }
          },
          "204": {
            "description": "CateringContainers not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create catering containers",
        "description": "Menu Item Catering Containers describe how individual menu item are sold (for example, per piece, per dozen, or each) when they are not included in the price of the menu. The description prints on reports such as the Banquet Event Order (BEO) and Proforma Invoice.  This API allows you to create a new Menu Item Catering Container code and description. <p><strong>OperationId:</strong>postCateringContainers</p>",
        "operationId": "postCateringContainers",
        "parameters": [
          {
            "name": "cateringContainers",
            "in": "body",
            "required": true,
            "description": "Request object which holds new Catering Code Containers.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringContainers"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringContainers/{cateringContainersCode}": {
      "put": {
        "summary": "Change catering containers",
        "description": "This API allows you to update an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>putCateringContainers</p>",
        "operationId": "putCateringContainers",
        "parameters": [
          {
            "name": "cateringContainersCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Container Code"
          },
          {
            "name": "cateringContainers",
            "in": "body",
            "required": true,
            "description": "Request object which holds modified Catering Code Containers.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringContainers"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "delete": {
        "summary": "Delete Catering container",
        "description": "This API allows you to delete an existing Menu Item Catering Container code. <p><strong>OperationId:</strong>deleteCateringContainers</p>",
        "operationId": "deleteCateringContainers",
        "parameters": [
          {
            "name": "cateringContainersCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Container Code"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringEventTypes": {
      "get": {
        "summary": "Get Function Space Event Types",
        "description": "Use this API to get Function Space Event Types. <p><strong>OperationId:</strong>getFunctionSpaceEventTypes</p>",
        "operationId": "getFunctionSpaceEventTypes",
        "parameters": [
          {
            "name": "codes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Specifies the Event field value description to search.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object of the Function Space Event Types.",
            "schema": {
              "$ref": "#/definitions/functionSpaceEventTypesDetails"
            }
          },
          "204": {
            "description": "FunctionSpaceEventTypes not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      },
      "post": {
        "summary": "Create Function Space Event Types",
        "description": "Use this API to create Function Space Event Types. <p><strong>OperationId:</strong>postFunctionSpaceEventTypes</p>",
        "operationId": "postFunctionSpaceEventTypes",
        "parameters": [
          {
            "name": "functionSpaceEventTypesCriteria",
            "in": "body",
            "required": true,
            "description": "Request object to create new Function Space Event Types.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpaceEventTypesCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      }
    },
    "/cateringEventTypes/{eventTypeCode}": {
      "put": {
        "summary": "Change Function Space Event Types",
        "description": "Use this API to update Function Space Event Types. <p><strong>OperationId:</strong>changeFunctionSpaceEventTypes</p>",
        "operationId": "changeFunctionSpaceEventTypes",
        "parameters": [
          {
            "name": "eventTypeCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of Event Types."
          },
          {
            "name": "functionSpaceEventTypesToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object to update the existing Function Space Event Types.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpaceEventTypesToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      },
      "delete": {
        "summary": "Delete Function Space Event Types",
        "description": "Use this API to delete Function Space Event Types. <p><strong>OperationId:</strong>removeFunctionSpaceEventTypes</p>",
        "operationId": "removeFunctionSpaceEventTypes",
        "parameters": [
          {
            "name": "eventTypeCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of Event Types."
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      }
    },
    "/cateringItemRates": {
      "get": {
        "summary": "Get catering item rates",
        "description": "Retrieve catering item rates <p><strong>OperationId:</strong>getCateringItemRates</p>",
        "operationId": "getCateringItemRates",
        "parameters": [
          {
            "name": "fetchInactive",
            "in": "query",
            "required": false,
            "description": "Determines wether to fetch inactive records or not.",
            "type": "boolean"
          },
          {
            "name": "codes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the code.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Catering Code's Item Rate details.",
            "schema": {
              "$ref": "#/definitions/cateringItemRatesInfo"
            }
          },
          "204": {
            "description": "CateringItemRates not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create Catering Item rates",
        "description": "Create Catering Item rates <p><strong>OperationId:</strong>postCateringItemRates</p>",
        "operationId": "postCateringItemRates",
        "parameters": [
          {
            "name": "cateringItemRates",
            "in": "body",
            "required": true,
            "description": "Request object which holds new Catering Code's Item Rates.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringItemRates"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringItemRates/{cateringItemRatesCode}": {
      "put": {
        "summary": "Change catering item rates",
        "description": "Change catering item rates code <p><strong>OperationId:</strong>putCateringItemRates</p>",
        "operationId": "putCateringItemRates",
        "parameters": [
          {
            "name": "cateringItemRatesCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Item Rates Codes"
          },
          {
            "name": "cateringItemRates",
            "in": "body",
            "required": true,
            "description": "Request object which holds modified Catering Code's Item Rate.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringItemRates"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "delete": {
        "summary": "Remove catering item rates",
        "description": "Remove catering item rates code <p><strong>OperationId:</strong>deleteCateringItemRates</p>",
        "operationId": "deleteCateringItemRates",
        "parameters": [
          {
            "name": "cateringItemRatesCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Item Rates Codes"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringMenuClasses": {
      "post": {
        "summary": "Create menu classes",
        "description": "You can use this API to create menu classes. <p><strong>OperationId:</strong>postCateringMenuClasses</p>",
        "operationId": "postCateringMenuClasses",
        "parameters": [
          {
            "name": "cateringMenuClasses",
            "in": "body",
            "required": true,
            "description": "Requestion object for creating new Menu Classes.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenuClasses"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "put": {
        "summary": "Update catering menu classes",
        "description": "Update catering menu classes <p><strong>OperationId:</strong>putCateringMenuClasses</p>",
        "operationId": "putCateringMenuClasses",
        "parameters": [
          {
            "name": "cateringMenuClasses",
            "in": "body",
            "required": true,
            "description": "Request object for changing Menu Classes.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenuClasses"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringMenuItemClasses": {
      "post": {
        "summary": "Create menu item classes",
        "description": "You can use this API to create menu item classes. <p><strong>OperationId:</strong>postCateringMenuItemClasses</p>",
        "operationId": "postCateringMenuItemClasses",
        "parameters": [
          {
            "name": "cateringMenuItemClasses",
            "in": "body",
            "required": true,
            "description": "Request object for Creating Menu Item Classes.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenuItemClasses"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringMenuItemClasses/{cateringMenuItemClassesCode}": {
      "put": {
        "summary": "Update menu item classes",
        "description": "You can use this API to update menu item classes. <p><strong>OperationId:</strong>putCateringMenuItemClasses</p>",
        "operationId": "putCateringMenuItemClasses",
        "parameters": [
          {
            "name": "cateringMenuItemClassesCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Menu Item Class Id"
          },
          {
            "name": "cateringMenuItemClasses",
            "in": "body",
            "required": true,
            "description": "Request object for updating Menu Item Classes.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenuItemClasses"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "delete": {
        "summary": "Delete menu item classes",
        "description": "You can use this API to delete menu item classes. <p><strong>OperationId:</strong>deleteCateringMenuItemClasses</p>",
        "operationId": "deleteCateringMenuItemClasses",
        "parameters": [
          {
            "name": "cateringMenuItemClassesCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Menu Item Class ID"
          },
          {
            "name": "menuItemClassesIdExtension",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Additional identifying value assigned by the creating system.",
            "items": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "menuItemClassesIdContext",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "menuItemClassesUniqueIdType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "A reference to the type of object defined by the UniqueID element.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringMenuItemClasses/{cateringMenuItemClassesCode}/copy": {
      "put": {
        "summary": "Copy menu item classes",
        "description": "You can use this API to copy menu item classes. <p><strong>OperationId:</strong>copyCateringMenuItemClasses</p>",
        "operationId": "copyCateringMenuItemClasses",
        "parameters": [
          {
            "name": "cateringMenuItemClassesCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Menu Item Class Id"
          },
          {
            "name": "cateringMenuItemClassesCopy",
            "in": "body",
            "required": true,
            "description": "Request object for Copying Menu Item Classes.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenuItemClassesCopy"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringMenuItems/{cateringMenuItemId}": {
      "delete": {
        "summary": "Operation to remove catering menu items by chain.",
        "description": " <p><strong>OperationId:</strong>deleteCateringMenuItemsByChain</p>",
        "operationId": "deleteCateringMenuItemsByChain",
        "parameters": [
          {
            "name": "cateringMenuItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Menu Item Id"
          },
          {
            "name": "hotelId",
            "in": "query",
            "required": false,
            "description": "The Hotel code which the Catering Menu Items belongs to.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringPackageResources": {
      "delete": {
        "summary": "Delete catering package resources",
        "description": "Use this API to delete catering package resources. <p><strong>OperationId:</strong>deleteCateringPackageResources</p>",
        "operationId": "deleteCateringPackageResources",
        "parameters": [
          {
            "name": "hotelId",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "The Hotel code which the Catering Package Event belongs to.",
            "items": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "pkgEventId",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Unique Packages Event ID",
            "items": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "pkgEventIdType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Unique Packages Event Type",
            "items": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "resourceId",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Unique Resources ID",
            "items": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "pkgEventIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "pkgEventIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "pkgEventType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "A reference to the type of object defined by the UniqueID element.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringPackages": {
      "get": {
        "summary": "Fetch catering packages",
        "description": "Fetch existing Catering Packages. <p><strong>OperationId:</strong>getCateringPackagesMultiProperties</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p> <p>This API allows a time span of <strong>90</strong> days.</p>",
        "operationId": "getCateringPackagesMultiProperties",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "hotelIds",
            "in": "query",
            "required": false,
            "type": "array",
            "maxItems": 4000,
            "items": {
              "type": "string"
            }
          },
          {
            "name": "packageCode",
            "in": "query",
            "required": false,
            "type": "array",
            "maxItems": 4000,
            "items": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Revenue Types for which details are to be fetched.",
            "type": "string"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "description": "Duration for which the event is scheduled.",
            "type": "integer"
          },
          {
            "name": "webBookable",
            "in": "query",
            "required": false,
            "description": "Defines if web booking is allowed.",
            "type": "boolean"
          },
          {
            "name": "pkgTmpltType",
            "in": "query",
            "required": false,
            "type": "string",
            "uniqueItems": true,
            "enum": [
              "Packages",
              "Templates",
              "Both"
            ],
            "description": "It represents Catering Packages and Templates both."
          },
          {
            "name": "marketCode",
            "in": "query",
            "required": false,
            "description": "Market Code associated with the price details of the Package.",
            "type": "string"
          },
          {
            "name": "priceCode",
            "in": "query",
            "required": false,
            "description": "Price Code for which details are to be fetched.",
            "type": "string"
          },
          {
            "name": "minAttendees",
            "in": "query",
            "required": false,
            "description": "Minimum Attendees.",
            "type": "integer"
          },
          {
            "name": "maxAttendees",
            "in": "query",
            "required": false,
            "description": "Maximum Attendees.",
            "type": "integer"
          },
          {
            "name": "sellDate",
            "in": "query",
            "required": false,
            "description": "Selling Date associated with the Price Details.",
            "type": "string",
            "format": "date"
          },
          {
            "name": "startDateTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDateTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingType",
            "in": "query",
            "required": false,
            "description": "Collection of configured Booking Types for the package property.",
            "type": "string"
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Fetch instructions that can be used in Catering Packages maintenance.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "PackageInfo",
                "Events",
                "Resources",
                "Pricing",
                "Indicators",
                "BlockPackageInfo",
                "EventNotes"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to fetch Menu .",
            "schema": {
              "$ref": "#/definitions/cateringPackagesInfo"
            }
          },
          "204": {
            "description": "CateringPackagesMultiProperties not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringPackages/{cateringPackageId}": {
      "get": {
        "summary": "Get catering package by chain",
        "description": "Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackageByChain</p>",
        "operationId": "getCateringPackageByChain",
        "parameters": [
          {
            "name": "cateringPackageId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Package ID"
          },
          {
            "name": "hotelId",
            "in": "query",
            "required": false,
            "description": "Hotel code of Catering Package to be fetched.",
            "type": "string"
          },
          {
            "name": "idExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "idContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "pkgIDType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Fetch instructions that can be used in Catering Packages maintenance.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "PackageInfo",
                "Events",
                "Resources",
                "Pricing",
                "Indicators",
                "BlockPackageInfo",
                "EventNotes"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to fetch Menu .",
            "schema": {
              "$ref": "#/definitions/cateringPackage"
            }
          },
          "204": {
            "description": "CateringPackageByChain not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringServings": {
      "get": {
        "summary": "Get catering servings",
        "description": "Get catering servings <p><strong>OperationId:</strong>getCateringServings</p>",
        "operationId": "getCateringServings",
        "parameters": [
          {
            "name": "fetchInactive",
            "in": "query",
            "required": false,
            "description": "Determines wether to fetch inactive records or not.",
            "type": "boolean"
          },
          {
            "name": "servingCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the code.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Catering Code's Serving details.",
            "schema": {
              "$ref": "#/definitions/cateringServingsInfo"
            }
          },
          "204": {
            "description": "CateringServings not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/cateringServings/{cateringServingsCode}": {
      "put": {
        "summary": "Update catering servings",
        "description": "Update catering servings <p><strong>OperationId:</strong>putCateringServings</p>",
        "operationId": "putCateringServings",
        "parameters": [
          {
            "name": "cateringServingsCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Sevrings Code"
          },
          {
            "name": "cateringServings",
            "in": "body",
            "required": true,
            "description": "Request object which holds modified Catering Code's Serving.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringServings"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/eventCodes": {
      "get": {
        "summary": "Get Template Event Codes",
        "description": "Use this API to get Template Event Codes. <p><strong>OperationId:</strong>getTemplateEventCodes</p>",
        "operationId": "getTemplateEventCodes",
        "parameters": [
          {
            "name": "eventsCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "description": "If true, this flag will set the criteria to return only Inactive records.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching template Event Codes.",
            "schema": {
              "$ref": "#/definitions/templateEventCodesDetails"
            }
          },
          "204": {
            "description": "TemplateEventCodes not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "put": {
        "summary": "Change Template Event Codes",
        "description": "Use this API to update Template Event Codes. <p><strong>OperationId:</strong>changeTemplateEventCodes</p>",
        "operationId": "changeTemplateEventCodes",
        "parameters": [
          {
            "name": "templateEventCodesToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object for modifying template Event Codes.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/templateEventCodesToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "post": {
        "summary": "Create Template Event Codes",
        "description": "Use this API to create Template Event Codes. <p><strong>OperationId:</strong>postTemplateEventCodes</p>",
        "operationId": "postTemplateEventCodes",
        "parameters": [
          {
            "name": "templateEventCodesCriteria",
            "in": "body",
            "required": true,
            "description": "Request object for creating new template Event Codes.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/templateEventCodesCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "delete": {
        "summary": "Delete Template Event Codes",
        "description": "Use this API to delete Template Event Codes. <p><strong>OperationId:</strong>removeTemplateEventCodes</p>",
        "operationId": "removeTemplateEventCodes",
        "parameters": [
          {
            "name": "templateEventCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/eventForecasts": {
      "post": {
        "summary": "Create event forecasts",
        "description": "You can define Event Forecasts, with or without a market code or a block type, to manage different revenue forecasts for different types of bookings, such as corporate versus social. This API will allow you to create a new Event Forecast. <p><strong>OperationId:</strong>postEventForecasts</p>",
        "operationId": "postEventForecasts",
        "parameters": [
          {
            "name": "eventForecasts",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/eventForecasts"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "put": {
        "summary": "Update Event forecasts",
        "description": "This API will allow you to update an Event Forecast for a property. <p><strong>OperationId:</strong>putEventForecasts</p>",
        "operationId": "putEventForecasts",
        "parameters": [
          {
            "name": "eventForecasts",
            "in": "body",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/eventForecasts"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/eventForecasts/{forecastsId}/eventTypes/{eventTypesCode}/eventForecasts": {
      "delete": {
        "summary": "Delete event forecasts",
        "description": "This API will allow you to delete an Event Forecast for a property. <p><strong>OperationId:</strong>deleteEventForecasts</p>",
        "operationId": "deleteEventForecasts",
        "parameters": [
          {
            "name": "eventTypesCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Event Type Code"
          },
          {
            "name": "forecastsId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Forecast Id"
          },
          {
            "name": "forecastIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "forecastIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "forecastIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "hotelId",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Hotel Code to which the Event Forecast belongs to.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "revenueTypeCode",
            "in": "query",
            "required": false,
            "description": "Code.",
            "type": "string"
          },
          {
            "name": "revenueTypeDescription",
            "in": "query",
            "required": false,
            "description": "description.",
            "type": "string"
          },
          {
            "name": "amount",
            "in": "query",
            "required": false,
            "description": "A monetary amount.",
            "type": "number"
          },
          {
            "name": "currencyCode",
            "in": "query",
            "required": false,
            "description": "Provides a currency code to reflect the currency in which an amount may be expressed.",
            "type": "string"
          },
          {
            "name": "amountType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Defines values for Amount Type of an event forecast revenue.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "FlatAmount",
                "PerPerson"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/functionSpaceRentalCodes": {
      "get": {
        "summary": "Get Catering s Rental Codes",
        "description": "Use this API to get Catering s Rental Codes. <p><strong>OperationId:</strong>getCateringRentalCodes</p>",
        "operationId": "getCateringRentalCodes",
        "parameters": [
          {
            "name": "fetchInactive",
            "in": "query",
            "required": false,
            "description": "Determines wether to fetch inactive records or not.",
            "type": "boolean"
          },
          {
            "name": "codes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the code.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Catering Rental Code details.",
            "schema": {
              "$ref": "#/definitions/cateringRentalCodesDetails"
            }
          },
          "204": {
            "description": "CateringRentalCodes not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "post": {
        "summary": "Create Catering s Rental Codes",
        "description": "Use this API to create Catering s Rental Codes. <p><strong>OperationId:</strong>postCateringRentalCodes</p>",
        "operationId": "postCateringRentalCodes",
        "parameters": [
          {
            "name": "cateringRentalCodesCriteria",
            "in": "body",
            "required": true,
            "description": "Request object which holds new Catering Rental Code Details.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringRentalCodesCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/functionSpaceRentalCodes/{cateringRentalId}": {
      "put": {
        "summary": "Change Catering s Rental Codes",
        "description": "Use this API to update Catering s Rental Codes. <p><strong>OperationId:</strong>changeCateringRentalCodes</p>",
        "operationId": "changeCateringRentalCodes",
        "parameters": [
          {
            "name": "cateringRentalId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique CateringRentalCode for functionSpace."
          },
          {
            "name": "cateringRentalCodesToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object which holds modified Catering Rental Codes.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringRentalCodesToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "delete": {
        "summary": "Delete Catering s Rental Codes",
        "description": "Use this API to delete Catering s Rental Codes. <p><strong>OperationId:</strong>removeCateringRentalCodes</p>",
        "operationId": "removeCateringRentalCodes",
        "parameters": [
          {
            "name": "cateringRentalId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique CateringRentalCode for functionSpace."
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/functionSpaceTypes": {
      "get": {
        "summary": "Get Function Space Types",
        "description": "Use this API to get Function Space Types. <p><strong>OperationId:</strong>getFunctionSpaceTypes</p>",
        "operationId": "getFunctionSpaceTypes",
        "parameters": [
          {
            "name": "fetchInactive",
            "in": "query",
            "required": false,
            "description": "Determines wether to fetch inactive records or not.",
            "type": "boolean"
          },
          {
            "name": "codes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the code.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Function Space Types.",
            "schema": {
              "$ref": "#/definitions/functionSpaceTypesDetails"
            }
          },
          "204": {
            "description": "FunctionSpaceTypes not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      },
      "post": {
        "summary": "Create Function Space Types",
        "description": "Use this API to create Function Space Types. <p><strong>OperationId:</strong>postFunctionSpaceTypes</p>",
        "operationId": "postFunctionSpaceTypes",
        "parameters": [
          {
            "name": "functionSpaceTypesCriteria",
            "in": "body",
            "required": true,
            "description": "Request object for creating Function Space Types.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpaceTypesCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      }
    },
    "/functionSpaceTypes/{functionSpaceTypesId}": {
      "put": {
        "summary": "Change Function Space Types",
        "description": "Use this API to update Function Space Types. <p><strong>OperationId:</strong>putFunctionSpaceTypes</p>",
        "operationId": "putFunctionSpaceTypes",
        "parameters": [
          {
            "name": "functionSpaceTypesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of Function Space Types."
          },
          {
            "name": "functionSpaceTypesToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object for changing Function Space Types.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpaceTypesToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      },
      "delete": {
        "summary": "Delete Function Space Types",
        "description": "Use this API to delete Function Space Types. <p><strong>OperationId:</strong>deleteFunctionSpaceTypes</p>",
        "operationId": "deleteFunctionSpaceTypes",
        "parameters": [
          {
            "name": "functionSpaceTypesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of Function Space Types."
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      }
    },
    "/functionspaceLocations": {
      "get": {
        "summary": "Get Function space locations",
        "description": "Use this API to get detail information of function space locations. <p><strong>OperationId:</strong>getFunctionSpaceLocations</p>",
        "operationId": "getFunctionSpaceLocations",
        "parameters": [
          {
            "name": "hotelIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "codes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching function space locations.",
            "schema": {
              "$ref": "#/definitions/functionSpaceLocationsDetails"
            }
          },
          "204": {
            "description": "FunctionSpaceLocations not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/functionspaceLocations/{functionspaceLocationCode}": {
      "post": {
        "summary": "Create function space locations",
        "description": "Use this API to create function space locations. <p><strong>OperationId:</strong>postFunctionSpaceLocations</p>",
        "operationId": "postFunctionSpaceLocations",
        "parameters": [
          {
            "name": "functionspaceLocationCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of function space locations."
          },
          {
            "name": "functionSpaceLocationsCriteria",
            "in": "body",
            "required": true,
            "description": "Request object for adding function space location configurations to resort.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpaceLocationsCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "delete": {
        "summary": "Delete function space locations",
        "description": "Use this API to delete function space locations. <p><strong>OperationId:</strong>removeFunctionSpaceLocations</p>",
        "operationId": "removeFunctionSpaceLocations",
        "parameters": [
          {
            "name": "functionspaceLocationCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of function space locations."
          },
          {
            "name": "hotelId",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Hotel where the code is configured.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "put": {
        "summary": "Change function space locations",
        "description": "Use this API to update function space locations. <p><strong>OperationId:</strong>changeFunctionSpaceLocations</p>",
        "operationId": "changeFunctionSpaceLocations",
        "parameters": [
          {
            "name": "functionspaceLocationCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of function space locations."
          },
          {
            "name": "functionSpaceLocationsToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object for modifying function space location(s) for resort.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpaceLocationsToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/functionspaceSetupStyles": {
      "get": {
        "summary": "Get Function space setup styles",
        "description": "Use this API to get Function space setup styles. <p><strong>OperationId:</strong>getFunctionSpaceSetupStyles</p>",
        "operationId": "getFunctionSpaceSetupStyles",
        "parameters": [
          {
            "name": "fetchInactive",
            "in": "query",
            "required": false,
            "description": "Determines wether to fetch inactive records or not.",
            "type": "boolean"
          },
          {
            "name": "codes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the code.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching function space setup styles.",
            "schema": {
              "$ref": "#/definitions/functionSpaceSetupStylesDetails"
            }
          },
          "204": {
            "description": "FunctionSpaceSetupStyles not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "post": {
        "summary": "Create function space setup styles",
        "description": "Use this API to create function space setup styles. <p><strong>OperationId:</strong>postFunctionSpaceSetupStyles</p>",
        "operationId": "postFunctionSpaceSetupStyles",
        "parameters": [
          {
            "name": "functionSpaceSetupStylesCriteria",
            "in": "body",
            "required": true,
            "description": "Request object for adding function space setup styles.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpaceSetupStylesCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/functionspaceSetupStyles/{functionSpaceSetupStyleId}": {
      "delete": {
        "summary": "Delete function space setup styles",
        "description": "Use this API to delete function space setup styles. <p><strong>OperationId:</strong>removeFunctionSpaceSetupStyles</p>",
        "operationId": "removeFunctionSpaceSetupStyles",
        "parameters": [
          {
            "name": "functionSpaceSetupStyleId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of function space setup styles."
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "put": {
        "summary": "Change function space setup styles",
        "description": "Use this API to update function space setup styles. <p><strong>OperationId:</strong>changeFunctionSpaceSetupStyles</p>",
        "operationId": "changeFunctionSpaceSetupStyles",
        "parameters": [
          {
            "name": "functionSpaceSetupStyleId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of function space setup styles."
          },
          {
            "name": "functionSpaceSetupStylesToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object for modifying function space setup style(s)",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpaceSetupStylesToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/functionspaces/{functionSpaceCode}": {
      "get": {
        "summary": "Get Function space ",
        "description": "Retrieve detailed information on function spaces, for example Meeting Room. <p><strong>OperationId:</strong>getFunctionSpace</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p>",
        "operationId": "getFunctionSpace",
        "parameters": [
          {
            "name": "functionSpaceCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique code of  function Space ."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "physical",
            "in": "query",
            "required": false,
            "description": "Is it a physical room type.",
            "type": "boolean"
          },
          {
            "name": "pseudo",
            "in": "query",
            "required": false,
            "description": "Is it a pseudo room type.",
            "type": "boolean"
          },
          {
            "name": "hotelId",
            "in": "query",
            "required": false,
            "description": "Hotel code of room to be searched.",
            "type": "string"
          },
          {
            "name": "roomClassCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "roomTypeCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching complete information of existing function space room.",
            "schema": {
              "$ref": "#/definitions/functionSpaceDetails"
            }
          },
          "204": {
            "description": "FunctionSpace not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringMenuClasses": {
      "get": {
        "summary": "Get menu classes",
        "description": "Get menu classes for a property. <p><strong>OperationId:</strong>getCateringMenuClasses</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p>",
        "operationId": "getCateringMenuClasses",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "className",
            "in": "query",
            "required": false,
            "description": "The name of Menu Class.",
            "type": "string"
          },
          {
            "name": "webBookable",
            "in": "query",
            "required": false,
            "description": "If true this boolean will set the criteria to only return Menu Classes configured as Web Bookable.",
            "type": "boolean"
          },
          {
            "name": "includeMenus",
            "in": "query",
            "required": false,
            "description": "If true this boolean will set the criteria to fetch associated menu for the menu classes.",
            "type": "boolean"
          },
          {
            "name": "inactive",
            "in": "query",
            "required": false,
            "description": "If true this boolean will set the criteria to only return Menu Classes configured as Inactive.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to fetch Menu Classes.",
            "schema": {
              "$ref": "#/definitions/cateringMenuClassesInfo"
            }
          },
          "204": {
            "description": "CateringMenuClasses not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringMenuItemClasses": {
      "get": {
        "summary": "Get menu item classes",
        "description": "Get menu item classes for a property. <p><strong>OperationId:</strong>getCateringMenuItemClasses</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p>",
        "operationId": "getCateringMenuItemClasses",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel Id"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "className",
            "in": "query",
            "required": false,
            "description": "Menu Item class name search filter.",
            "type": "string"
          },
          {
            "name": "menuTypes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Defines values for Menu Type",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "Food",
                "Beverage"
              ]
            },
            "required": false
          },
          {
            "name": "webBookable",
            "in": "query",
            "required": false,
            "description": "Indicates if web bookable.",
            "type": "boolean"
          },
          {
            "name": "includeMenuItems",
            "in": "query",
            "default": "true",
            "required": false,
            "description": "MenuItemClassInfo MenuItemInfo values can be passed as per requirement",
            "type": "boolean"
          },
          {
            "name": "inactive",
            "in": "query",
            "required": false,
            "description": "If true this boolean will set the criteria to only return Menu Item Classes configured as Inactive.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for retrieving Menu Item Classes.",
            "schema": {
              "$ref": "#/definitions/cateringMenuItemClassesInfo"
            }
          },
          "204": {
            "description": "CateringMenuItemClasses not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringMenuItems": {
      "get": {
        "summary": "Get Menu items",
        "description": "Get Menu items for a property. <p><strong>OperationId:</strong>getCateringMenuItems</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>",
        "operationId": "getCateringMenuItems",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel Id"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Menu item name of string lentgth 30",
            "type": "string"
          },
          {
            "name": "codes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "quickInsertCode",
            "in": "query",
            "required": false,
            "description": "Article number of Menu Item in Caps",
            "type": "string"
          },
          {
            "name": "listTypeCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "inactive",
            "in": "query",
            "required": false,
            "description": "If true this boolean will set the criteria to only return Menu Items configured as Inactive.",
            "type": "boolean"
          },
          {
            "name": "eventTypesCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "maxItems": 20,
            "collectionFormat": "multi",
            "description": "Fetch instructions that can be used in Fetching Catering Menus Items. SummaryInfo fetchInstruction is used to fetch limited set of Menu Item information required for Menu Items Panel Drawer and DetailsInfo returns detailed information required for Menu Items listing screen.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "SummaryInfo",
                "DetailsInfo"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for retrieving Menu Items.",
            "schema": {
              "$ref": "#/definitions/cateringMenuItemsInfo"
            }
          },
          "204": {
            "description": "CateringMenuItems not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create menu items",
        "description": "You can use this API to create menu items. <p><strong>OperationId:</strong>postCateringMenuItems</p>",
        "operationId": "postCateringMenuItems",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel Id"
          },
          {
            "name": "cateringMenuItems",
            "in": "body",
            "required": true,
            "description": "Request object for creating Menu Items.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenuItems"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringMenuItems/copy": {
      "post": {
        "summary": "Operation to copy catering menu items.",
        "description": " <p><strong>OperationId:</strong>copyCateringMenuItems</p>",
        "operationId": "copyCateringMenuItems",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel Id"
          },
          {
            "name": "cateringMenuItemsCopy",
            "in": "body",
            "required": true,
            "description": "Request object for Copying Menu Items.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenuItemsCopy"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringMenuItems/{cateringMenuItemId}": {
      "put": {
        "summary": "Update menu items",
        "description": "You can use this API to update menu items. <p><strong>OperationId:</strong>putCateringMenuItems</p>",
        "operationId": "putCateringMenuItems",
        "parameters": [
          {
            "name": "cateringMenuItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Menu Item Id"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel Id"
          },
          {
            "name": "cateringMenuItems",
            "in": "body",
            "required": true,
            "description": "Request object for changing Menu Items.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenuItems"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "delete": {
        "summary": "Operation to remove catering menu items.",
        "description": " <p><strong>OperationId:</strong>deleteCateringMenuItems</p>",
        "operationId": "deleteCateringMenuItems",
        "parameters": [
          {
            "name": "cateringMenuItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Menu Item Id"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel Id"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringMenus": {
      "get": {
        "summary": "Get menus",
        "description": "Retrieve a list of menus for a property. <p><strong>OperationId:</strong>getCateringMenus</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>90</strong> days.</p>",
        "operationId": "getCateringMenus",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "menuId",
            "in": "query",
            "required": false,
            "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
            "type": "string"
          },
          {
            "name": "iDExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "idContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "menuIDType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "This type holds name of Menu Class.",
            "type": "string"
          },
          {
            "name": "classNameListCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "eventTypesCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "menuTypes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Defines values for Menu Type",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "Food",
                "Beverage"
              ]
            },
            "required": false
          },
          {
            "name": "dietaryListCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "inactive",
            "in": "query",
            "required": false,
            "description": "If true, only Composed Menu's marked as Inactive in Menu Configuration will be returned.",
            "type": "boolean"
          },
          {
            "name": "multiChoice",
            "in": "query",
            "required": false,
            "description": "When selected Only Composed Menu's noted as Multi Choice in Menu Configuration will be returned.",
            "type": "boolean"
          },
          {
            "name": "webBookable",
            "in": "query",
            "required": false,
            "description": "Check of Menu if it is web bookable",
            "type": "boolean"
          },
          {
            "name": "end",
            "in": "query",
            "required": false,
            "description": "The ending value of the date range.",
            "type": "string",
            "format": "date"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "description": "The starting value of the date range.",
            "type": "string",
            "format": "date"
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Fetch instructions that can be used in Catering Menus maintenance.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "Revenue",
                "MenuDetails",
                "MenuNotes"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to fetch Menu .",
            "schema": {
              "$ref": "#/definitions/cateringMenusInfo"
            }
          },
          "204": {
            "description": "CateringMenus not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create menus",
        "description": "Create menus for a property. <p><strong>OperationId:</strong>postCateringMenus</p>",
        "operationId": "postCateringMenus",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "cateringMenus",
            "in": "body",
            "required": true,
            "description": "Request object for creating new Menu .",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenus"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringMenus/{cateringMenuId}": {
      "get": {
        "summary": "Get menu",
        "description": "Retrieve details of a Catering menu <p><strong>OperationId:</strong>getCateringMenu</p>",
        "operationId": "getCateringMenu",
        "parameters": [
          {
            "name": "cateringMenuId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of Catering Menu"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "inactive",
            "in": "query",
            "required": false,
            "description": "If true, only Composed Menu's marked as Inactive in Menu Configuration will be returned.",
            "type": "boolean"
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Fetch instructions that can be used in Catering Menus maintenance.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "Revenue",
                "MenuDetails",
                "MenuNotes"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to fetch Menu .",
            "schema": {
              "$ref": "#/definitions/cateringMenusInfo"
            }
          },
          "204": {
            "description": "CateringMenu not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "put": {
        "summary": "Operation to change catering menus.",
        "description": " <p><strong>OperationId:</strong>putCateringMenus</p>",
        "operationId": "putCateringMenus",
        "parameters": [
          {
            "name": "cateringMenuId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of Catering Menu"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "cateringMenus",
            "in": "body",
            "required": true,
            "description": "Request object for changing Menu .",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenus"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "delete": {
        "summary": "Delete a menu",
        "description": "Delete a menu from a property. <p><strong>OperationId:</strong>deleteCateringMenus</p>",
        "operationId": "deleteCateringMenus",
        "parameters": [
          {
            "name": "cateringMenuId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of Catering Menu"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringMenus/{cateringMenuId}/copy": {
      "post": {
        "summary": "Copy a menu",
        "description": "Copy a menu for a property. <p><strong>OperationId:</strong>copyCateringMenus</p>",
        "operationId": "copyCateringMenus",
        "parameters": [
          {
            "name": "cateringMenuId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of Catering Menu"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel Id"
          },
          {
            "name": "cateringMenusCopy",
            "in": "body",
            "required": true,
            "description": "Request object for copying a Menu.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringMenusCopy"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringPackages": {
      "get": {
        "summary": "Fetch catering packages for a property.",
        "description": "Fetch existing Catering Packages for a property. <p><strong>OperationId:</strong>getCateringPackages</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p>",
        "operationId": "getCateringPackages",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "packageCode",
            "in": "query",
            "required": false,
            "type": "array",
            "maxItems": 4000,
            "items": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Revenue Types for which details are to be fetched.",
            "type": "string"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "description": "Duration for which the event is scheduled.",
            "type": "integer"
          },
          {
            "name": "webBookable",
            "in": "query",
            "required": false,
            "description": "Defines if web booking is allowed.",
            "type": "boolean"
          },
          {
            "name": "pkgTmpltType",
            "in": "query",
            "required": false,
            "type": "string",
            "uniqueItems": true,
            "enum": [
              "Packages",
              "Templates",
              "Both"
            ],
            "description": "It represents Catering Packages and Templates both."
          },
          {
            "name": "marketCode",
            "in": "query",
            "required": false,
            "description": "Market Code associated with the price details of the Package.",
            "type": "string"
          },
          {
            "name": "priceCode",
            "in": "query",
            "required": false,
            "description": "Price Code for which details are to be fetched.",
            "type": "string"
          },
          {
            "name": "minAttendees",
            "in": "query",
            "required": false,
            "description": "Minimum Attendees.",
            "type": "integer"
          },
          {
            "name": "maxAttendees",
            "in": "query",
            "required": false,
            "description": "Maximum Attendees.",
            "type": "integer"
          },
          {
            "name": "sellDate",
            "in": "query",
            "required": false,
            "description": "Selling Date associated with the Price Details.",
            "type": "string",
            "format": "date"
          },
          {
            "name": "startDateTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDateTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingType",
            "in": "query",
            "required": false,
            "description": "Collection of configured Booking Types for the package property.",
            "type": "string"
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Fetch instructions that can be used in Catering Packages maintenance.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "PackageInfo",
                "Events",
                "Resources",
                "Pricing",
                "Indicators",
                "BlockPackageInfo",
                "EventNotes"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to fetch Menu .",
            "schema": {
              "$ref": "#/definitions/cateringPackagesInfo"
            }
          },
          "204": {
            "description": "CateringPackages not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create catering packages",
        "description": "Catering packages and templates are designed to make it easier for you to set up Events. They provide pre-configured resources typically used for Events. Templates and packages are similar except that templates do not include prices. <p><strong>OperationId:</strong>postCateringPackages</p>",
        "operationId": "postCateringPackages",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "cateringPackages",
            "in": "body",
            "required": true,
            "description": "Request object for creating new Catering Packages.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringPackages"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringPackages/{cateringPackageId}": {
      "get": {
        "summary": "Get catering package",
        "description": "Use this API to get catering package. <p><strong>OperationId:</strong>getCateringPackage</p>",
        "operationId": "getCateringPackage",
        "parameters": [
          {
            "name": "cateringPackageId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Package ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "idExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "idContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "pkgIDType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Fetch instructions that can be used in Catering Packages maintenance.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "PackageInfo",
                "Events",
                "Resources",
                "Pricing",
                "Indicators",
                "BlockPackageInfo",
                "EventNotes"
              ]
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to fetch Menu .",
            "schema": {
              "$ref": "#/definitions/cateringPackage"
            }
          },
          "204": {
            "description": "CateringPackage not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "put": {
        "summary": "Update Catering packages",
        "description": "Update an existing Catering Package for a property. <p><strong>OperationId:</strong>putCateringPackages</p>",
        "operationId": "putCateringPackages",
        "parameters": [
          {
            "name": "cateringPackageId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Package ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "cateringPackages",
            "in": "body",
            "required": true,
            "description": "Request object for changing Catering Packages.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/cateringPackages"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "delete": {
        "summary": "Delete catering packages",
        "description": "Use this API to delete catering packages. <p><strong>OperationId:</strong>deleteCateringPackages</p>",
        "operationId": "deleteCateringPackages",
        "parameters": [
          {
            "name": "cateringPackageId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Package Id"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Hotel Code"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringPackages/{cateringPackageId}/copy": {
      "post": {
        "summary": "Operation to copy catering package or template.",
        "description": "Use this API to copy catering package or template. <p><strong>OperationId:</strong>copyCateringPackage</p>",
        "operationId": "copyCateringPackage",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 20,
            "description": "Unique OPERA Hotel code."
          },
          {
            "name": "cateringPackageId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 38,
            "description": "Unique Catering Package or Template ID."
          },
          {
            "name": "copyCateringPackageType",
            "in": "body",
            "required": true,
            "description": "Request object for Copying Catering Package/Template.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/copyCateringPackageType"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response object of newly copied resource or configuration code.",
            "schema": {
              "$ref": "#/definitions/resourceCodeInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/cateringPackages/{cateringPackageId}/prices/{pricesId}/copy": {
      "post": {
        "summary": "Operation to copy catering package price.",
        "description": "Use this API to copy catering package price. <p><strong>OperationId:</strong>copyCateringPackagePrice</p>",
        "operationId": "copyCateringPackagePrice",
        "parameters": [
          {
            "name": "pricesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 38,
            "description": "Unique Catering Package Prices ID"
          },
          {
            "name": "cateringPackageId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 38,
            "description": "Unique Catering Package ID."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 20,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "copyCateringPackagePriceType",
            "in": "body",
            "required": true,
            "description": "Request object for Copying Catering Package Price.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/copyCateringPackagePriceType"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response object of newly copied resource or configuration code.",
            "schema": {
              "$ref": "#/definitions/resourceCodeInfo"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/courses/{coursesId}/menuMultiCourses": {
      "delete": {
        "summary": "Remove menu multi courses",
        "description": "Use this API to remove Menu Multi Courses. <p><strong>OperationId:</strong>deleteCateringMenuMultiCourses</p>",
        "operationId": "deleteCateringMenuMultiCourses",
        "parameters": [
          {
            "name": "coursesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Menu Multi Course ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "courseIdListUniqueIdExtension",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Additional identifying value assigned by the creating system.",
            "items": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "courseIdListUniqueIdContext",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "courseIdListUniqueIdType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "A reference to the type of object defined by the UniqueID element.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/dailyInventoryItems": {
      "get": {
        "summary": "Get Daily Item Inventory",
        "description": "Retrieve a list of Daily Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc. API will fetch daily quantity configured for the particular item.  <p><strong>OperationId:</strong>getDailyInventoryItems</p> <p>This API allows a time span of <strong>7</strong> days.</p>",
        "operationId": "getDailyInventoryItems",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "itemClassCode",
            "in": "query",
            "required": false,
            "description": "Item Class ID which daily item belongs to.",
            "type": "string"
          },
          {
            "name": "itemName",
            "in": "query",
            "required": false,
            "description": "Item name which daily item belongs to.",
            "type": "string"
          },
          {
            "name": "friday",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "monday",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "saturday",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sunday",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "thursday",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "tuesday",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "wednesday",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Daily Inventory Items.",
            "schema": {
              "$ref": "#/definitions/dailyInventoryItems"
            }
          },
          "204": {
            "description": "DailyInventoryItems not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/discountAvailable/check": {
      "get": {
        "summary": "Check if discount is available",
        "description": "Check if discount is available <p><strong>OperationId:</strong>checkDiscountAvailable</p>",
        "operationId": "checkDiscountAvailable",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel Id"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to determimne whether the discount is availabe for resort or not.",
            "schema": {
              "$ref": "#/definitions/checkedDiscountAvailable"
            }
          },
          "204": {
            "description": "checkDiscountAvailable not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/eventCodes": {
      "get": {
        "summary": "Get Hotel Event Codes",
        "description": "Use this API to get Hotel Event Codes. <p><strong>OperationId:</strong>getEventCodes</p>",
        "operationId": "getEventCodes",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "hotelIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Hotel code.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "eventsCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "description": "If true, this flag will set the criteria to return only Inactive records.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Event Codes for a hotel.",
            "schema": {
              "$ref": "#/definitions/eventCodesDetails"
            }
          },
          "204": {
            "description": "EventCodes not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "post": {
        "summary": "Create Hotel Event Codes",
        "description": "Use this API to create Hotel Event Codes. <p><strong>OperationId:</strong>postEventCodes</p>",
        "operationId": "postEventCodes",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "eventCodesCriteria",
            "in": "body",
            "required": true,
            "description": "Request object for creating new Event Codes for a hotel.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/eventCodesCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "delete": {
        "summary": "Delete Hotel Event Codes",
        "description": "Use this API to delete Hotel Event Codes. <p><strong>OperationId:</strong>removeEventCodes</p>",
        "operationId": "removeEventCodes",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "eventCode",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Configuration code.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "put": {
        "summary": "Change Hotel Event Codes",
        "description": "Use this API to update Hotel Event Codes. <p><strong>OperationId:</strong>changeEventCodes</p>",
        "operationId": "changeEventCodes",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "eventCodesToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object for modifying Event Codes for a hotel.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/eventCodesToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/hotels/{hotelId}/eventForecasts": {
      "get": {
        "summary": "Get Event Forecasts",
        "description": "This API will allow you to retrieve all Event Forecast for a property. <p><strong>OperationId:</strong>getEventForecasts</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p>",
        "operationId": "getEventForecasts",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "fetchInstructions",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Fetch instructions that can be used in event forecast maintenance.",
            "uniqueItems": true,
            "items": {
              "type": "string",
              "enum": [
                "ForecastInfo",
                "RevenueDetails"
              ]
            },
            "x-example": [
              "forecastInfo"
            ],
            "required": true
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "default": 0,
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "eventTypeCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "eventTypeWildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "revenueTypeCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "revenueTypeWildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "eventDate",
            "in": "query",
            "required": false,
            "description": "Date for which the event is scheduled.",
            "type": "string",
            "format": "date"
          },
          {
            "name": "blockTypeCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "marketCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to fetch Menu .",
            "schema": {
              "$ref": "#/definitions/eventForecastsInfo"
            }
          },
          "204": {
            "description": "EventForecasts not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/events/{eventsId}/revenues/{revenueType}/packages/{priceId}/cateringPackageRevenues": {
      "delete": {
        "summary": "Delete catering package revenues",
        "description": "Use this API to delete catering package revenues. <p><strong>OperationId:</strong>deleteCateringPackageRevenues</p>",
        "operationId": "deleteCateringPackageRevenues",
        "parameters": [
          {
            "name": "priceId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Packages Revenue Price ID"
          },
          {
            "name": "revenueType",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Packages Revenue Type"
          },
          {
            "name": "eventsId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Packages Revenue Event ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "packagePriceIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "packagePriceIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "packagePriceIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "eventIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "eventIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "eventIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/functionSpaces": {
      "get": {
        "summary": "Get Function Spaces",
        "description": "This API fetches the configured function spaces of a specific property with possible search criteria of function space code, and space type. The result returns the function spaces that fit the search criteria with details about space name, short name, attributes such as shareable, combo, web bookable, and more. <p><strong>OperationId:</strong>getFunctionSpaces</p>",
        "operationId": "getFunctionSpaces",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "sortingBy",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "A collection of supported sorting for Event Calendar Function Space.",
            "uniqueItems": true,
            "enum": [
              "Name",
              "AttendeeCapacity",
              "AreaSize",
              "CustomOrder1",
              "CustomOrder2",
              "CustomOrder3"
            ]
          },
          {
            "name": "roomCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "roomType",
            "in": "query",
            "required": false,
            "description": "Room Type where function space belongs to",
            "type": "string"
          },
          {
            "name": "spaceType",
            "in": "query",
            "required": false,
            "description": "Space Type where function space belongs to",
            "type": "string"
          },
          {
            "name": "functionSpaceWildcard",
            "in": "query",
            "required": false,
            "description": "Wild search on Room Code and Function Name.",
            "type": "string"
          },
          {
            "name": "webBookable",
            "in": "query",
            "required": false,
            "description": "If true, will set the criteria to return Function Spaces configured as web bookable only.",
            "type": "boolean"
          },
          {
            "name": "floorCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "locationCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching function spaces summary info at the property level.",
            "schema": {
              "$ref": "#/definitions/functionSpacesDetails"
            }
          },
          "204": {
            "description": "FunctionSpaces not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "post": {
        "summary": "Create Function Spaces",
        "description": "This API allows the creation of function spaces. Criteria that need to be supplied in the request body include function space code, description, space type, and min / max attendees. Optional details such as short name, shareable, combo, web bookable, and dimensions can also be included. <p><strong>OperationId:</strong>postFunctionSpaces</p>",
        "operationId": "postFunctionSpaces",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "functionSpacesCriteria",
            "in": "body",
            "required": true,
            "description": "Request object for creating function spaces.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpacesCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/hotels/{hotelId}/functionSpaces/{functionSpaceCode}": {
      "put": {
        "summary": "Change Function Spaces",
        "description": "Use this API to update Function Spaces. <p><strong>OperationId:</strong>changeFunctionSpaces</p>",
        "operationId": "changeFunctionSpaces",
        "parameters": [
          {
            "name": "functionSpaceCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of functionSpace."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "functionSpacesToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object for changing function spaces.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/functionSpacesToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "delete": {
        "summary": "Delete Function Spaces",
        "description": "Use this API to delete Function Spaces. <p><strong>OperationId:</strong>removeFunctionSpaces</p>",
        "operationId": "removeFunctionSpaces",
        "parameters": [
          {
            "name": "functionSpaceCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of functionSpace."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/hotels/{hotelId}/functionSpaces/{functionSpaceCode}/configurations": {
      "get": {
        "summary": "Get Function Space Configuration",
        "description": " Use this  get Function Space detailed information. <p><strong>OperationId:</strong>getFunctionSpaceConfig</p>",
        "operationId": "getFunctionSpaceConfig",
        "parameters": [
          {
            "name": "functionSpaceCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of function space."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching function space config info.",
            "schema": {
              "$ref": "#/definitions/functionSpaceConfigDetails"
            }
          },
          "204": {
            "description": "FunctionSpaceConfig not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/hotels/{hotelId}/inventoryItems": {
      "get": {
        "summary": "Get Item Inventory",
        "description": "Retrieve a list of Item Inventories that exist for a property.  Examples of Item Inventory in a property could be Crib, Roll Away beds, Microwave etc.  There is typically a quantity configured for each item, such as 5 Roll Away beds.  <p><strong>OperationId:</strong>getInventoryItems</p> <p>The maximum allowable limit for this API is <strong>200</strong>.</p> <p>This API allows a time span of <strong>7</strong> days.</p>",
        "operationId": "getInventoryItems",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "itemClassCode",
            "in": "query",
            "required": false,
            "description": "The Item Class ID which the item belongs to.",
            "type": "string"
          },
          {
            "name": "itemName",
            "in": "query",
            "required": false,
            "description": "The name of Inventory Item.",
            "type": "string"
          },
          {
            "name": "itemCode",
            "in": "query",
            "required": false,
            "description": "The code of Inventory Item, also known as Quick Insert.",
            "type": "string"
          },
          {
            "name": "eventTypecodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "usedForEvents",
            "in": "query",
            "required": false,
            "description": "Flag to indicate whether the item is used for events.",
            "type": "boolean"
          },
          {
            "name": "includeItemsFromTemplates",
            "in": "query",
            "required": false,
            "description": "Indicates whether to include Items from Templates or not.",
            "type": "boolean"
          },
          {
            "name": "startDateTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDateTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object to fetch Inventory Items Setup configuration",
            "schema": {
              "$ref": "#/definitions/inventoryItems"
            }
          },
          "204": {
            "description": "InventoryItems not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create an Item Inventory",
        "description": "You can use this API to create a new Item Inventory Code for a property. <p><strong>OperationId:</strong>postInventoryItems</p>",
        "operationId": "postInventoryItems",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "inventoryItems",
            "in": "body",
            "required": true,
            "description": "Requestion object for creating new Inventory Items Setup configurations",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/inventoryItems"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response object for creating Inventory Items Setup configurations",
            "schema": {
              "$ref": "#/definitions/inventoryItemsCreated"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/inventoryItems/{inventoryItemId}": {
      "delete": {
        "summary": "Delete Item Inventory",
        "description": "Use this API to delete an existing Item Inventory Code  <p><strong>OperationId:</strong>deleteInventoryItems</p>",
        "operationId": "deleteInventoryItems",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Inventory Item Id"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "itemIDExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "idContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "itemIDType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "put": {
        "summary": "Update Item Inventory",
        "description": "Use this API to update an existing Item Inventory Code  <p><strong>OperationId:</strong>putInventoryItems</p>",
        "operationId": "putInventoryItems",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Inventory Item id"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "inventoryItems",
            "in": "body",
            "required": true,
            "description": "Request object for changing Inventory Items Setup configuration",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/inventoryItems"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/itemPools": {
      "get": {
        "summary": "Get Item Pools",
        "description": "Get Item Pools that are configured for a property. <p><strong>OperationId:</strong>getItemPools</p>",
        "operationId": "getItemPools",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "name": "hotelIds",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Hotel code.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "itemClasseCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "itemPoolCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "itemPoolsWildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object which holds collection of Item Pools.",
            "schema": {
              "$ref": "#/definitions/itemPoolsInfo"
            }
          },
          "204": {
            "description": "ItemPools not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/itemPools/{itemPoolsCode}/itemPools": {
      "delete": {
        "summary": "Delete Item Pools",
        "description": "Delete Item Pool for a property. <p><strong>OperationId:</strong>deleteItemPools</p>",
        "operationId": "deleteItemPools",
        "parameters": [
          {
            "name": "itemPoolsCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Item Pool code"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel code"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/notes/{notesId}/cateringPackageResourceNotes": {
      "delete": {
        "summary": "Delete catering package resource notes",
        "description": "Use this API to delete catering package resource notes. <p><strong>OperationId:</strong>deleteCateringPackageResourceNotes</p>",
        "operationId": "deleteCateringPackageResourceNotes",
        "parameters": [
          {
            "name": "notesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Package Resource Notes ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/packageEvents/{packageEventsId}/cateringPackageEvents": {
      "delete": {
        "summary": "Delete catering package events",
        "description": "Use this API to delete catering package events. <p><strong>OperationId:</strong>deleteCateringPackageEvents</p>",
        "operationId": "deleteCateringPackageEvents",
        "parameters": [
          {
            "name": "packageEventsId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Package Events ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "pkgEventIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "pkgEventIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "pkgEventIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/packagePrices/{pricesId}/cateringPackagePrices": {
      "delete": {
        "summary": "Delete Catering package prices",
        "description": "Use this API to delete Catering package prices. <p><strong>OperationId:</strong>deleteCateringPackagePrices</p>",
        "operationId": "deleteCateringPackagePrices",
        "parameters": [
          {
            "name": "pricesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Package Prices ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "packagPriceIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "packagPriceIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "packagPriceIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/packages/{eventId}/notes/{notedId}/cateringPackageEventNotes": {
      "delete": {
        "summary": "Delete catering package event notes",
        "description": "Use this API to delete catering package event notes. <p><strong>OperationId:</strong>deleteCateringPackageEventNotes</p>",
        "operationId": "deleteCateringPackageEventNotes",
        "parameters": [
          {
            "name": "notedId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Package Event Notes ID"
          },
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Package Event ID"
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique OPERA Hotel ID"
          },
          {
            "name": "pkgEventIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "pkgEventIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "pkgEventIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "name": "noteIdExtension",
            "in": "query",
            "required": false,
            "description": "Additional identifying value assigned by the creating system.",
            "type": "integer"
          },
          {
            "name": "noteIdContext",
            "in": "query",
            "required": false,
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "type": "string"
          },
          {
            "name": "noteIdType",
            "in": "query",
            "required": false,
            "description": "A reference to the type of object defined by the UniqueID element.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/hotels/{hotelId}/roomPools": {
      "get": {
        "summary": "Fetch Room Type Pool",
        "description": "This API allows you to Use this API to get Room Type Pool and the associated Room Types. <p><strong>OperationId:</strong>getRoomTypePool</p> <p>The maximum allowable limit for this API is <strong>25</strong>.</p>",
        "operationId": "getRoomTypePool",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "description": "Flag to indicate if inactive room types should be included.",
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Indicates maximum number of records a Web Service should return.",
            "type": "integer"
          },
          {
            "name": "pageNumber",
            "in": "query",
            "required": false,
            "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
            "type": "integer"
          },
          {
            "name": "physical",
            "in": "query",
            "required": false,
            "description": "Is it a physical sleep room type.",
            "type": "boolean"
          },
          {
            "name": "pseudo",
            "in": "query",
            "required": false,
            "description": "Is it a pseudo room type.",
            "type": "boolean"
          },
          {
            "name": "summaryInfo",
            "in": "query",
            "required": false,
            "description": "Flag to indicate if summary or detailed information should be fetched.",
            "type": "boolean"
          },
          {
            "name": "roomTypeCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "roomClassCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "roomTypePoolCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetch room pool information.",
            "schema": {
              "$ref": "#/definitions/roomTypePoolDetails"
            }
          },
          "204": {
            "description": "RoomTypePool not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "post": {
        "summary": "Create Room Type Pools",
        "description": "This API allows you to Use this API to create Room Type Pools. <p><strong>OperationId:</strong>postRoomTypePool</p>",
        "operationId": "postRoomTypePool",
        "parameters": [
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "roomTypePoolCriteria",
            "in": "body",
            "required": true,
            "description": "Request object for creating new room pool.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/roomTypePoolCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/hotels/{hotelId}/roomPools/{roomPoolCode}": {
      "delete": {
        "summary": "Delete  Room Type Pool and Mappings",
        "description": "Use this API to delete  Room Type Pool and Mappings. <p><strong>OperationId:</strong>removeRoomTypePool</p>",
        "operationId": "removeRoomTypePool",
        "parameters": [
          {
            "name": "roomPoolCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of room type pool."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "description",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "The description of room pool type.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "defaultText",
            "in": "query",
            "required": false,
            "description": "Default text with Character length from 0 to 1000.",
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Language code for the translation.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "sequence",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Sequence for representing room type pool record.",
            "items": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "inactive",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Indicates the room type is inactive or not.",
            "items": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "numberOfRooms",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Number of rooms for this room type.",
            "items": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "roomType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "roomClass",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Room class for the room type code.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "shortDescription",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Short Description of room type.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "activeDate",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Active date of the room type.",
            "items": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "pseudo",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Indicates if room type is pseudo.",
            "items": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "accessible",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Indicates if room type is accessible.",
            "items": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "sendToInterface",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Indicates if room type is sent to interface.",
            "items": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "sellSequence",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Indicates room types sell sequence.",
            "items": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "suite",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Indicates room type is a suite.",
            "items": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "meetingRoom",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Indicates room type is meeting room. This Can be Meeting room flag cannot be unmarked at the property level. Can only be marked for non pseudo room types.",
            "items": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "restricted",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Indicates that the room pool cannot be used to allocate inventory to this room type. Inventory must be allocated directly to the room type itself.",
            "items": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      },
      "put": {
        "summary": "Change Room Type Pool ",
        "description": "Use this API to update Room Type Pool and Associated Room Types. <p><strong>OperationId:</strong>changeRoomTypePool</p>",
        "operationId": "changeRoomTypePool",
        "parameters": [
          {
            "name": "roomPoolCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Code of room type pool."
          },
          {
            "name": "hotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of hotel."
          },
          {
            "name": "roomTypePoolToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object for changing existing room pool.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/roomTypePoolToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/hotels/{sourceHotelId}/functionSpaces/copy": {
      "put": {
        "summary": "Copy Function Spaces",
        "description": " Use this API to copy Function Space. <p><strong>OperationId:</strong>copyFunctionSpaces</p>",
        "operationId": "copyFunctionSpaces",
        "parameters": [
          {
            "name": "sourceHotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of source hotel."
          },
          {
            "name": "copyFunctionSpaces",
            "in": "body",
            "required": true,
            "description": "Request object for creating multiple function spaces based on an existing function space. New function space may have different name, display name on function dairy, order of display and combo elements. The rest of the details will be copied from the source function space.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/copyFunctionSpaces"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/hotels/{sourceHotelId}/functionspaceLocations/copy": {
      "put": {
        "summary": "Copy function space locations",
        "description": "Use this API to copy function space locations. <p><strong>OperationId:</strong>copyFunctionSpaceLocations</p>",
        "operationId": "copyFunctionSpaceLocations",
        "parameters": [
          {
            "name": "sourceHotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of source hotel."
          },
          {
            "name": "copyFunctionSpaceLocations",
            "in": "body",
            "required": true,
            "description": "List of function space location(s) to be copied.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/copyFunctionSpaceLocations"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "HotelConfig"
        ]
      }
    },
    "/hotels/{sourceHotelId}/inventoryItems/copy": {
      "put": {
        "summary": "Copy Item Inventories",
        "description": "This API will allow you to select multiple Item Inventories from the Source Property and copy to the Target Property. <p><strong>OperationId:</strong>copyInventoryItems</p>",
        "operationId": "copyInventoryItems",
        "parameters": [
          {
            "name": "sourceHotelId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of source hotel."
          },
          {
            "name": "inventoryItemsCopy",
            "in": "body",
            "required": true,
            "description": "Request object for copying Inventory Items Setup configuration",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/inventoryItemsCopy"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/inventoryItems": {
      "get": {
        "summary": "Get Item Inventory templates",
        "description": "Retrieve a list of Item Inventory templates that exist for a property. <p><strong>OperationId:</strong>getInventoryItemTemplates</p>",
        "operationId": "getInventoryItemTemplates",
        "parameters": [
          {
            "name": "hotelId",
            "in": "query",
            "required": false,
            "description": "Specifies the hotel code to be searched.",
            "type": "string"
          },
          {
            "name": "inventoryItemTemplateName",
            "in": "query",
            "required": false,
            "description": "Wildcard search for the inventory item template.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching inventory item templates.",
            "schema": {
              "$ref": "#/definitions/inventoryItemTemplates"
            }
          },
          "204": {
            "description": "InventoryItemTemplates not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create Item Inventory template",
        "description": "Create an Item Inventory template. <p><strong>OperationId:</strong>postInventoryItemTemplates</p>",
        "operationId": "postInventoryItemTemplates",
        "parameters": [
          {
            "name": "inventoryItemTemplates",
            "in": "body",
            "required": true,
            "description": "Request object for creating new inventory item templates.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/inventoryItemTemplates"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/inventoryItems/{inventoryItemId}": {
      "delete": {
        "summary": "Delete Item Inventory templates",
        "description": "Delete Item Inventory template. <p><strong>OperationId:</strong>deleteInventoryItemTemplates</p>",
        "operationId": "deleteInventoryItemTemplates",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Inventory Item Template code"
          },
          {
            "name": "inventoryItemTemplatesIdExtension",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Additional identifying value assigned by the creating system.",
            "items": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "inventoryItemTemplatesContext",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "inventoryItemTemplatesType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "A reference to the type of object defined by the UniqueID element.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "put": {
        "summary": "Change Item Inventory templates",
        "description": "Change Item Inventory template. <p><strong>OperationId:</strong>putInventoryItemTemplates</p>",
        "operationId": "putInventoryItemTemplates",
        "parameters": [
          {
            "name": "inventoryItemId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Inventory Item Template code"
          },
          {
            "name": "inventoryItemTemplates",
            "in": "body",
            "required": true,
            "description": "Request object for changing existing inventory item templates.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/inventoryItemTemplates"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/itemClasses": {
      "get": {
        "summary": "Get item classes",
        "description": "This API will allow you to fetch all existing Item Classes for a property. Items are categorized into logical entities called Item Classes. Item Classes assist you in filtering when selecting and grouping items on the Banquet Event Order (BEO). For example, you might have an item class for different kinds of audio visual equipment, for floral decorations, for recreational equipment, and so on.  <p><strong>OperationId:</strong>getItemClasses</p>",
        "operationId": "getItemClasses",
        "parameters": [
          {
            "name": "hotelId",
            "in": "query",
            "required": false,
            "type": "array",
            "maxItems": 4000,
            "items": {
              "type": "string"
            }
          },
          {
            "name": "itemClassesCode",
            "in": "query",
            "required": false,
            "description": "Codes to be searched.",
            "type": "array",
            "maxItems": 4000,
            "items": {
              "type": "string"
            }
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "criteria",
            "in": "query",
            "enum": [
              "Reservation",
              "Events",
              "ReservationAndEvents"
            ],
            "x-example": "reservation",
            "required": false,
            "type": "string",
            "description": "Defines values for Item Class Type.",
            "uniqueItems": true
          },
          {
            "name": "classId",
            "in": "query",
            "required": false,
            "type": "number"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching item class.",
            "schema": {
              "$ref": "#/definitions/itemClassesInfo"
            }
          },
          "204": {
            "description": "ItemClasses not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create item classes",
        "description": "You can use this API to create item classes. <p><strong>OperationId:</strong>postItemClasses</p>",
        "operationId": "postItemClasses",
        "parameters": [
          {
            "name": "itemClasses",
            "in": "body",
            "required": true,
            "description": "Request object for creating new item class.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/itemClasses"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/itemClasses/copy": {
      "put": {
        "summary": "Copy item classes",
        "description": "You can use this API to copy item classes. <p><strong>OperationId:</strong>copyItemClasses</p>",
        "operationId": "copyItemClasses",
        "parameters": [
          {
            "name": "itemClassesCopy",
            "in": "body",
            "required": true,
            "description": "List of the Item Class to be copied.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/itemClassesCopy"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/itemClasses/{itemClassesCode}": {
      "put": {
        "summary": "Update item classes",
        "description": "This API allows you to update existing Item Classes for a property. <p><strong>OperationId:</strong>putItemClasses</p>",
        "operationId": "putItemClasses",
        "parameters": [
          {
            "name": "itemClassesCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Item Class Code"
          },
          {
            "name": "itemClasses",
            "in": "body",
            "required": true,
            "description": "Request object for modifying item class.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/itemClasses"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "delete": {
        "summary": "Delete Item classes",
        "description": "This API allows you to delete an existing Item Classes for a property. <p><strong>OperationId:</strong>deleteItemClasses</p>",
        "operationId": "deleteItemClasses",
        "parameters": [
          {
            "name": "itemClassesCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Item Class Code"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/itemPools": {
      "post": {
        "summary": "Create Item Pools",
        "description": "You can create Item Pools, whereby you are grouping Item Inventories into a group.  For example you might have a Item Pool for a Promotional Package where the guest receives a number of Item Inventories; thus creating a group enables you to easily manage this. <p><strong>OperationId:</strong>postItemPools</p>",
        "operationId": "postItemPools",
        "parameters": [
          {
            "name": "itemPools",
            "in": "body",
            "required": true,
            "description": "Request object which holds new Item Pools.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/itemPools"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/itemPools/{itemPoolsCode}": {
      "post": {
        "summary": "Change Item Pools",
        "description": "Change/update an Item Pool that is already configured for a property. <p><strong>OperationId:</strong>putItemPools</p>",
        "operationId": "putItemPools",
        "parameters": [
          {
            "name": "itemPoolsCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Item Pool code"
          },
          {
            "name": "itemPools",
            "in": "body",
            "required": true,
            "description": "Request object which holds modified Item Pools.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/itemPools"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/mealTypes": {
      "get": {
        "summary": "Get Meal Types",
        "description": "Use this API to get Meal Types. <p><strong>OperationId:</strong>getMealTypes</p>",
        "operationId": "getMealTypes",
        "parameters": [
          {
            "name": "fetchInactive",
            "in": "query",
            "required": false,
            "description": "Determines wether to fetch inactive records or not.",
            "type": "boolean"
          },
          {
            "name": "codes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the code.",
            "type": "string"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Meal Types.",
            "schema": {
              "$ref": "#/definitions/mealTypesDetails"
            }
          },
          "204": {
            "description": "MealTypes not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      },
      "post": {
        "summary": "Create Meal Types",
        "description": "Use this API to create Meal Types. <p><strong>OperationId:</strong>postMealTypes</p>",
        "operationId": "postMealTypes",
        "parameters": [
          {
            "name": "mealTypesCriteria",
            "in": "body",
            "required": true,
            "description": "Request object for creating Meal Types.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/mealTypesCriteria"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      }
    },
    "/mealTypes/{mealTypesId}": {
      "put": {
        "summary": "Change Meal Types",
        "description": "Use this API to update Meal Types. <p><strong>OperationId:</strong>putMealTypes</p>",
        "operationId": "putMealTypes",
        "parameters": [
          {
            "name": "mealTypesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of Meal Types."
          },
          {
            "name": "mealTypesToBeChanged",
            "in": "body",
            "required": true,
            "description": "Request object for changing Meal Types.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/mealTypesToBeChanged"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      },
      "delete": {
        "summary": "Delete Meal Types",
        "description": "Use this API to delete Meal Types. <p><strong>OperationId:</strong>deleteMealTypes</p>",
        "operationId": "deleteMealTypes",
        "parameters": [
          {
            "name": "mealTypesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique ID of Meal Types."
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ChainConfig"
        ]
      }
    },
    "/menuClasses/{menuClassesId}/cateringMenuClasses": {
      "delete": {
        "summary": "Delete menu classes",
        "description": "You can use this API to delete menu classes. <p><strong>OperationId:</strong>deleteCateringMenuClasses</p>",
        "operationId": "deleteCateringMenuClasses",
        "parameters": [
          {
            "name": "menuClassesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Catering Menu Class ID"
          },
          {
            "name": "menuClassListIDExtension",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Additional identifying value assigned by the creating system.",
            "items": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "menuClassListIdContext",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "menuClassListUniqueIdType",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "A reference to the type of object defined by the UniqueID element.",
            "items": {
              "type": "string"
            },
            "required": false
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/revenueGroups": {
      "get": {
        "summary": "Get Catering Revenue Groups",
        "description": "You can use this API to retrieve all catering revenue group codes. <p><strong>OperationId:</strong>getRevenueGroups</p>",
        "operationId": "getRevenueGroups",
        "parameters": [
          {
            "name": "fetchInactive",
            "in": "query",
            "required": false,
            "description": "Determines wether to fetch inactive records or not.",
            "type": "boolean"
          },
          {
            "name": "revenueGroupCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "wildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "description",
            "in": "query",
            "required": false,
            "description": "Description of the code.",
            "type": "string"
          },
          {
            "name": "includeRevenueType",
            "in": "query",
            "required": false,
            "description": "Boolean flag to fetch revenue groups with/without revenue types. 'True' indicates including revenue types information for corresponding revenue groups.",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Catering Revenue Groups configurations.",
            "schema": {
              "$ref": "#/definitions/revenueGroupsInfo"
            }
          },
          "204": {
            "description": "RevenueGroups not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create Catering Revenue Groups",
        "description": "You can use this API to create a new catering revenue group code. <p><strong>OperationId:</strong>postRevenueGroups</p>",
        "operationId": "postRevenueGroups",
        "parameters": [
          {
            "name": "revenueGroups",
            "in": "body",
            "required": true,
            "description": "Request object for creating new Catering Revenue Groups Configurations.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/revenueGroups"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/revenueGroups/{revenueGroupsCode}": {
      "put": {
        "summary": "Update Catering Revenue Groups",
        "description": "You can use this API to update a catering revenue group Code. <p><strong>OperationId:</strong>putRevenueGroups</p>",
        "operationId": "putRevenueGroups",
        "parameters": [
          {
            "name": "revenueGroupsCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Revenue Group Code"
          },
          {
            "name": "revenueGroups",
            "in": "body",
            "required": true,
            "description": "Request object for changing existing Catering Revenue Groups Configurations.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/revenueGroups"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "delete": {
        "summary": "Delete Catering Revenue Groups",
        "description": "You can use this API to delete a catering revenue group code. <p><strong>OperationId:</strong>deleteRevenueGroups</p>",
        "operationId": "deleteRevenueGroups",
        "parameters": [
          {
            "name": "revenueGroupsCode",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique Revenue Group Code"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/revenueTypes": {
      "get": {
        "summary": "Get Catering Revenue Types",
        "description": "You can use this API to retrieve all Catering Revenue Type codes configured. <p><strong>OperationId:</strong>getRevenueTypes</p>",
        "operationId": "getRevenueTypes",
        "parameters": [
          {
            "name": "revenueGroupCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "revenueGroupWildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "revenueTypeCodes",
            "in": "query",
            "type": "array",
            "collectionFormat": "multi",
            "description": "Codes to be searched.",
            "items": {
              "type": "string",
              "maxItems": 4000
            },
            "required": false
          },
          {
            "name": "revenueTypeWildCard",
            "in": "query",
            "required": false,
            "description": "Wildcard search on the code.",
            "type": "string"
          },
          {
            "name": "includeInactive",
            "in": "query",
            "required": false,
            "description": "If true this boolean will set the criteria to only return Inactive records.",
            "type": "boolean"
          },
          {
            "name": "includeRevenueTypeDetail",
            "in": "query",
            "required": false,
            "description": "Boolean flag to fetch revenue groups/types with/without associated revenue types/revenue type details. 'True' indicates including revenue types/revenue type details information for corresponding revenue groups/revenue types. (Revenue Type is assoicated to Revenue groups and Revenue Type details are assoicated to Revenue Types)",
            "type": "boolean"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              }
            },
            "description": "Response object for fetching Revenue Types Setup configurations.",
            "schema": {
              "$ref": "#/definitions/revenueTypesInfo"
            }
          },
          "204": {
            "description": "RevenueTypes not found."
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      },
      "post": {
        "summary": "Create Catering Revenue Types",
        "description": "You can use this API to create a new Catering Revenue Type code. <p><strong>OperationId:</strong>postRevenueTypes</p>",
        "operationId": "postRevenueTypes",
        "parameters": [
          {
            "name": "revenueTypes",
            "in": "body",
            "required": true,
            "description": "Request object for creating new Revenue Types Setup Configurations.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/revenueTypes"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "201": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/revenueTypes/{revenueTypesId}": {
      "put": {
        "summary": "Update Catering Revenue Types",
        "description": "You can use this API to update a Catering Revenue Type code. <p><strong>OperationId:</strong>putRevenueTypes</p>",
        "operationId": "putRevenueTypes",
        "parameters": [
          {
            "name": "revenueTypesId",
            "in": "path",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 2000,
            "description": "Unique code for  Revenue Type"
          },
          {
            "name": "revenueTypes",
            "in": "body",
            "required": true,
            "description": "Request object for changing existing Revenue Types Setup Configurations.",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/revenueTypes"
                }
              ]
            }
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "Response Body.",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    },
    "/services/resources/cache": {
      "delete": {
        "summary": "ClearCache",
        "description": "You can use this API to delete the Resource Configuration Service Status Cache. <p><strong>OperationId:</strong>deleteResourceConfigServiceCache</p>",
        "operationId": "deleteResourceConfigServiceCache",
        "parameters": [
          {
            "name": "operaClearInput",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Request object for cleaning WS cache input type"
          },
          {
            "$ref": "#/parameters/authKey"
          },
          {
            "$ref": "#/parameters/x-app-key"
          },
          {
            "$ref": "#/parameters/x-hotelid"
          },
          {
            "$ref": "#/parameters/x-externalsystem"
          },
          {
            "$ref": "#/parameters/Accept-Language"
          }
        ],
        "responses": {
          "200": {
            "headers": {
              "Content-Language": {
                "type": "string",
                "description": "Audience language",
                "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*",
                "x-example": "en-GB"
              },
              "Location": {
                "type": "string",
                "description": "Location of newly created resource"
              }
            },
            "description": "HATEOAS links which help the consumer to navigate to resources",
            "schema": {
              "$ref": "#/definitions/status"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "405": {
            "$ref": "#/responses/405"
          },
          "406": {
            "$ref": "#/responses/406"
          },
          "413": {
            "$ref": "#/responses/413"
          },
          "414": {
            "$ref": "#/responses/414"
          },
          "415": {
            "$ref": "#/responses/415"
          },
          "500": {
            "$ref": "#/responses/500"
          },
          "502": {
            "$ref": "#/responses/502"
          },
          "503": {
            "$ref": "#/responses/503"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "tags": [
          "ResourceConfig"
        ]
      }
    }
  },
  "parameters": {
    "authKey": {
      "name": "authorization",
      "description": "Bearer token that needs to be passed which is generated post user authentication",
      "type": "string",
      "in": "header",
      "required": true
    },
    "x-app-key": {
      "name": "x-app-key",
      "description": "Client or Partner's Application Key",
      "type": "string",
      "pattern": "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}$",
      "in": "header",
      "required": true
    },
    "x-hotelid": {
      "name": "x-hotelid",
      "type": "string",
      "description": "Mandatory parameter to identify the hotel code where the end user is logged in",
      "in": "header",
      "required": true
    },
    "x-externalsystem": {
      "name": "x-externalsystem",
      "type": "string",
      "maxLength": 80,
      "description": "External system code.",
      "in": "header",
      "x-example": "EXTERNALSYSTEMCODE"
    },
    "Accept-Language": {
      "name": "Accept-Language",
      "type": "string",
      "description": "Language code",
      "in": "header"
    },
    "x-hubid": {
      "name": "x-hubid",
      "type": "string",
      "description": "x-hubid is a logical grouping of multiple properties that allows api consumers to manage data from a group of properties. This x-hubid is a valid list of hub codes configured in OPERA to which the user has access. Rest APIs without hotelId in the operation path can support hub level integration using x-hubid",
      "in": "header"
    }
  },
  "responses": {
    "400": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/exceptionDetailType"
      }
    },
    "401": {
      "description": "Unauthorized"
    },
    "403": {
      "description": "Forbidden"
    },
    "404": {
      "description": "Resource not found",
      "schema": {
        "$ref": "#/definitions/exceptionDetailType"
      }
    },
    "405": {
      "description": "Method not allowed"
    },
    "406": {
      "description": "Not acceptable."
    },
    "413": {
      "description": "Request Entity Too Large"
    },
    "414": {
      "description": "Request URI Too Large"
    },
    "415": {
      "description": "Unsupported Media Type"
    },
    "500": {
      "description": "System Error",
      "schema": {
        "$ref": "#/definitions/exceptionDetailType"
      }
    },
    "502": {
      "description": "Bad Gateway"
    },
    "503": {
      "description": "Service Unavailable"
    }
  },
  "definitions": {
    "eventForecastsCopy": {
      "type": "object",
      "description": "Request object for Copying Event Forecasts to multiple hotels.",
      "properties": {
        "criteria": {
          "description": "Criteria for copying Event Forecasts.",
          "$ref": "#/definitions/copyEventForecastsCriteriaType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyEventForecastsCriteriaType": {
      "type": "object",
      "description": "Copy event forecasts criteria type to copy multiple event forecasts from one Hotel to another Hotel.",
      "properties": {
        "eventForecastsList": {
          "description": "Provides Event Forecast details that needs to be copied.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/eventForecastsListType"
          }
        },
        "includeRevenueType": {
          "description": "include Revenue Types for the event forecasts?",
          "type": "boolean"
        }
      }
    },
    "eventForecastsListType": {
      "type": "object",
      "description": "Collection of Event Forecast details that needs to be copied.",
      "properties": {
        "sourceHotelCode": {
          "description": "Property from which Code is to be copied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "targetHotelCode": {
          "description": "Property to which configuration code type to be copied to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "sourceForecastId": {
          "description": "Unique Identifier from which event forecast to be copied.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "sourceEventType": {
          "description": "Source Event Type from which code is to be copied from.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "copyEventTypeAs": {
          "description": "Event Type will be copied From.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "copyDateRangeAs": {
          "description": "Start Date and End Date for the event forecast to be copied.",
          "$ref": "#/definitions/dateRangeType"
        },
        "copyMarketCodeAs": {
          "description": "Copy Market code as.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "copyBookingTypeAs": {
          "description": "Copy Booking Type as.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "uniqueID_Type": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "properties": {
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        }
      }
    },
    "dateRangeType": {
      "type": "object",
      "description": "Date Range with Start and End dates.",
      "properties": {
        "start": {
          "description": "The starting value of the date range.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "end": {
          "description": "The ending value of the date range.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        }
      }
    },
    "links": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/instanceLink"
      }
    },
    "instanceLink": {
      "type": "object",
      "description": "Metadata describing link description objects that MAY appear in the JSON instance representation.",
      "properties": {
        "href": {
          "description": "URI [RFC3986] or URI Template [RFC6570]. If the value is set to URI Template, then the \"templated\" property must be set to true.",
          "type": "string"
        },
        "rel": {
          "description": "Name of the link relation that, in addition to the type property, can be used to retrieve link details. For example, href or profile.",
          "type": "string"
        },
        "templated": {
          "description": "Boolean flag that specifies that \"href\" property is a URI or URI Template. If the property is a URI template, set this value to true. By default, this value is false.",
          "type": "boolean",
          "default": false
        },
        "method": {
          "description": "HTTP method for requesting the target of the link.",
          "type": "string",
          "enum": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH",
            "OPTIONS",
            "HEAD"
          ]
        },
        "targetSchema": {
          "description": "Link to the metadata of the resource, such as JSON-schema, that describes the resource expected when dereferencing the target resource..",
          "type": "string"
        },
        "operationId": {
          "description": "The operationId of the path you can call to follow this link.  This allows you to look up not only the path and method, but the description of that path and any parameters you need to supply.",
          "type": "string"
        },
        "title": {
          "description": "Exact copy of the \"summary\" field on the linked operation.",
          "type": "string"
        }
      }
    },
    "warningsType": {
      "type": "array",
      "description": "Used in conjunction with the Success element to define a business error.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/warningType"
      }
    },
    "warningType": {
      "type": "object",
      "description": "Used when a message has been successfully processed to report any warnings or business errors that occurred.",
      "properties": {
        "value": {
          "type": "string",
          "description": "Property Value"
        },
        "shortText": {
          "description": "An abbreviated version of the error in textual format.",
          "type": "string",
          "maxLength": 2000
        },
        "code": {
          "description": "If present, this refers to a table of coded values exchanged between applications to identify errors or warnings.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "docURL": {
          "description": "If present, this URL refers to an online description of the error that occurred.",
          "type": "string",
          "maxLength": 2000
        },
        "status": {
          "description": "If present, recommended values are those enumerated in the ErrorRS, (NotProcessed Incomplete Complete Unknown) however, the data type is designated as string data, recognizing that trading partners may identify additional status conditions not included in the enumeration.",
          "type": "string",
          "maxLength": 2000
        },
        "tag": {
          "description": "If present, this attribute may identify an unknown or misspelled tag that caused an error in processing. It is recommended that the Tag attribute use XPath notation to identify the location of a tag in the event that more than one tag of the same name is present in the document. Alternatively, the tag name alone can be used to identify missing data [Type=ReqFieldMissing].",
          "type": "string",
          "maxLength": 2000
        },
        "recordId": {
          "description": "If present, this attribute allows for batch processing and the identification of the record that failed amongst a group of records. This value may contain a concatenation of a unique failed transaction ID with specific record(s) associated with that transaction.",
          "type": "string",
          "maxLength": 2000
        },
        "type": {
          "description": "The Warning element MUST contain the Type attribute that uses a recommended set of values to indicate the warning type. The validating XSD can expect to accept values that it has NOT been explicitly coded for and process them by using Type =\"Unknown\".",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "language": {
          "description": "Language identification.",
          "type": "string",
          "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
        },
        "rph": {
          "description": "Reference Place Holder used as an index for this warning.",
          "type": "string",
          "minLength": 1,
          "maxLength": 8
        }
      }
    },
    "status": {
      "type": "object",
      "description": "Response Body.",
      "properties": {
        "warnings": {
          "$ref": "#/definitions/warningsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        }
      }
    },
    "exceptionDetailType": {
      "title": "Error Detail",
      "description": "Complex type that contains error details for a REST call.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML)."
        },
        "title": {
          "type": "string",
          "description": "Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization."
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code for this occurrence of the problem, set by the origin server."
        },
        "detail": {
          "type": "string",
          "description": "Human-readable description specific to this occurrence of the problem."
        },
        "instance": {
          "type": "string",
          "description": "Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced."
        },
        "o:errorCode": {
          "type": "string",
          "description": "Application error code, which is different from HTTP error code."
        },
        "o:errorPath": {
          "type": "string",
          "description": "Path to the problem at the resource or property level."
        },
        "o:errorDetails": {
          "description": "Details of the error message, consisting of a hierarchical tree structure.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorInstance"
          }
        },
        "links": {
          "$ref": "#/definitions/links"
        }
      },
      "required": [
        "type",
        "title"
      ]
    },
    "errorInstance": {
      "title": "Error Instance Details",
      "description": "Complex type that contains error instance details for a REST call.",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Absolute URI [RFC3986] that identifies the problem type.  When dereferenced, it SHOULD provide a human-readable summary of the problem (for example, using HTML)."
        },
        "title": {
          "type": "string",
          "description": "Short, human-readable summary of the problem.  The summary SHOULD NOT change for subsequent occurrences of the problem, except for purposes of localization."
        },
        "status": {
          "type": "integer",
          "description": "HTTP status code for this occurrence of the problem, set by the origin server."
        },
        "detail": {
          "type": "string",
          "description": "Human-readable description specific to this occurrence of the problem."
        },
        "instance": {
          "type": "string",
          "description": "Absolute URI that identifies the specific occurrence of the problem.  It may or may not provide additional information if dereferenced."
        },
        "o:errorCode": {
          "type": "string",
          "description": "Application error code, which is different from HTTP error code."
        },
        "o:errorPath": {
          "type": "string",
          "description": "Path to the problem at the resource or property level."
        }
      },
      "required": [
        "type",
        "title"
      ]
    },
    "cateringContainersInfo": {
      "type": "object",
      "description": "Response object for fetching Catering Code Containers details.",
      "properties": {
        "containers": {
          "description": "Collection of Catering Code Containers Details.",
          "$ref": "#/definitions/cateringCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringCodesType": {
      "type": "array",
      "description": "Catering Code details.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringCodeType"
      }
    },
    "cateringCodeType": {
      "type": "object",
      "description": "Base type provides information about Catering Code which will be used for removal operation",
      "properties": {
        "codeId": {
          "description": "Code ID is used to identify a Catering Code by ID.",
          "type": "number"
        },
        "code": {
          "description": "Code is used to identify a Catering Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "translatableDescription": {
          "description": "Description of the Catering Code.",
          "$ref": "#/definitions/translationTextType200"
        },
        "displaySequence": {
          "description": "Catering Codes display sequence Number",
          "type": "number"
        },
        "webBookable": {
          "description": "Indicator used for only WEB Code Type in Item Rate",
          "type": "boolean"
        }
      }
    },
    "translationTextType200": {
      "type": "object",
      "description": "Contains Multiple translated texts and language codes.",
      "properties": {
        "defaultText": {
          "description": "Default text with Character length from 0 to 200.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "translatedTexts": {
          "description": "List of translated text and language codes.",
          "$ref": "#/definitions/translationsTextType"
        }
      }
    },
    "translationsTextType": {
      "type": "array",
      "description": "Language code for the translation.",
      "maxItems": 4000,
      "items": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Used for Character Strings, length 0 to 2000.",
            "minLength": 0,
            "maxLength": 2000
          },
          "language": {
            "description": "Language identification.",
            "type": "string",
            "pattern": "[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
          }
        },
        "description": "Language code for the translation."
      }
    },
    "cateringContainers": {
      "type": "object",
      "description": "Request object which holds modified Catering Code Containers.",
      "properties": {
        "containers": {
          "description": "Collection of Catering Code Containers to be changed.",
          "$ref": "#/definitions/cateringCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceEventTypesDetails": {
      "type": "object",
      "description": "Response object of the Function Space Event Types.",
      "properties": {
        "eventTypes": {
          "description": "Retrieve the collection of the Function Space Event Types based on the search criteria",
          "$ref": "#/definitions/eventTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "eventTypesType": {
      "type": "array",
      "description": "Collection of Event Type",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/eventTypeConfigType"
      }
    },
    "eventTypeConfigType": {
      "type": "object",
      "description": "Representation of event record type.",
      "properties": {
        "eventTypeCode": {
          "description": "Code Field Value belongs to the Event Type.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "translatableDescription": {
          "description": "Translatable description to elaborate the Event Code Type.",
          "$ref": "#/definitions/translationTextType50"
        },
        "description": {
          "description": "Description to elaborate the Event Code Type.",
          "type": "string",
          "minLength": 0,
          "maxLength": 50
        },
        "timeWindow": {
          "description": "Default Start Time and End Time of the event.",
          "$ref": "#/definitions/timeWindowType"
        },
        "inactive": {
          "description": "Determines the event type status as active or inactive",
          "type": "boolean"
        },
        "mealType": {
          "description": "Meal type associated with the event type.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "coverable": {
          "description": "Indicates if Event Type is coverable or not.",
          "type": "boolean"
        },
        "webBookable": {
          "description": "Defines if web booking is allowed or not.",
          "type": "boolean"
        },
        "sequence": {
          "description": "The sequence number of the event.",
          "type": "integer"
        }
      }
    },
    "translationTextType50": {
      "type": "object",
      "description": "Contains Multiple translated texts and language codes.",
      "properties": {
        "defaultText": {
          "description": "Default text with Character length from 0 to 50.",
          "type": "string",
          "minLength": 0,
          "maxLength": 50
        },
        "translatedTexts": {
          "description": "List of translated text and language codes.",
          "$ref": "#/definitions/translationsTextType"
        }
      }
    },
    "timeWindowType": {
      "type": "object",
      "description": "Defines a Time period with start time and an end time.",
      "properties": {
        "startTime": {
          "description": "Start Time of the Time window.",
          "type": "string"
        },
        "endTime": {
          "description": "End Time of the Time window.",
          "type": "string"
        }
      }
    },
    "functionSpaceEventTypesCriteria": {
      "type": "object",
      "description": "Request object to create new Function Space Event Types.",
      "properties": {
        "eventTypes": {
          "description": "Function Space Event Types to be created.",
          "$ref": "#/definitions/eventTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceEventTypesToBeChanged": {
      "type": "object",
      "description": "Request object to update the existing Function Space Event Types.",
      "properties": {
        "eventTypes": {
          "description": "Function Space Event Types to be changed.",
          "$ref": "#/definitions/eventTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringItemRatesInfo": {
      "type": "object",
      "description": "Response object for fetching Catering Code's Item Rate details.",
      "properties": {
        "itemRates": {
          "description": "Collection of Catering Item Rate Details.",
          "$ref": "#/definitions/cateringCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringItemRates": {
      "type": "object",
      "description": "Request object which holds modified Catering Code's Item Rate.",
      "properties": {
        "itemRates": {
          "description": "Collection of Item Rates to be changed.",
          "$ref": "#/definitions/cateringCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringMenuClasses": {
      "type": "object",
      "description": "Request object for changing Menu Classes.",
      "properties": {
        "menuClassList": {
          "description": "Menu Classes to be changed",
          "$ref": "#/definitions/cateringMenuClassListType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringMenuClassListType": {
      "type": "array",
      "description": "List of Values of Menu.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringMenuClassType"
      }
    },
    "cateringMenuClassType": {
      "type": "object",
      "description": "Catering Menu Class which holds the value of menu class.",
      "properties": {
        "classId": {
          "description": "This type holds Menu Class id.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "hotelId": {
          "description": "The Hotel code which the menu class belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "classInfo": {
          "description": "This type holds Menu class details.",
          "$ref": "#/definitions/cateringMenuClassInfoType"
        },
        "menuList": {
          "description": "This type holds list of menu, along with the menu info,revenue and menu details.",
          "$ref": "#/definitions/cateringMenuListType"
        }
      }
    },
    "cateringMenuClassInfoType": {
      "type": "object",
      "description": "Detailed attributes of Menu Class .",
      "properties": {
        "name": {
          "description": "This type holds name of Menu Class.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "webBookable": {
          "description": "This type tells about whether menu class is book through web or not.",
          "type": "boolean"
        },
        "inactiveDate": {
          "description": "Inactive date of menu class.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "eventTypes": {
          "description": "This type holds list of associated events.",
          "$ref": "#/definitions/codeListType"
        },
        "inactive": {
          "description": "Return true, when this Menu Item Class will not be available to be associated to a Catering Event.",
          "type": "boolean"
        }
      }
    },
    "codeListType": {
      "type": "array",
      "maxItems": 4000,
      "items": {
        "type": "string",
        "minLength": 0,
        "maxLength": 20
      }
    },
    "cateringMenuListType": {
      "type": "array",
      "description": "List of Values of Menu.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringMenuType"
      }
    },
    "cateringMenuType": {
      "type": "object",
      "properties": {
        "id": {
          "description": "This type holds menu id.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "classId": {
          "description": "This type holds class id for given menu.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "hotelId": {
          "description": "The Hotel code which the catering menu belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "info": {
          "description": "This type holds value of Catering Menu Info.",
          "$ref": "#/definitions/cateringMenuInfoType"
        },
        "revenueList": {
          "description": "This type holds revenue list.",
          "$ref": "#/definitions/cateringMenuRevListType"
        },
        "menuDetailList": {
          "description": "This type holds Menu Detail List.",
          "$ref": "#/definitions/cateringMenuDetailListType"
        },
        "multiChoiceList": {
          "$ref": "#/definitions/cateringMultiChoiceMenuListType"
        },
        "menuNoteList": {
          "description": "Collection of notes which belongs to a Menu.",
          "$ref": "#/definitions/eventResourceNotesType"
        }
      }
    },
    "cateringMenuInfoType": {
      "type": "object",
      "properties": {
        "className": {
          "description": "This type holds name of Menu Class Name.",
          "type": "string",
          "minLength": 0,
          "maxLength": 30
        },
        "name": {
          "description": "This type holds name of Menu Name.",
          "$ref": "#/definitions/translationTextType2000"
        },
        "restriction": {
          "description": "This type holds Restrictionn for the given Menu.",
          "$ref": "#/definitions/translationTextType2000"
        },
        "description": {
          "description": "This type holds Description for the given Menu.",
          "$ref": "#/definitions/translationTextType2000"
        },
        "dietaryList": {
          "description": "This type holds DietaryList values for the given Menu.",
          "$ref": "#/definitions/codeListType"
        },
        "eventTypes": {
          "description": "This type holds Event list associated with menu.",
          "$ref": "#/definitions/codeListType"
        },
        "type": {
          "description": "This type holds value of Menu type FOOD ,BEVERAGE for the given Menu.",
          "$ref": "#/definitions/menuTypeType"
        },
        "quickInsertCode": {
          "description": "This type holds quick insert value, v5 functionality as Article Number for the Menu.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "servingType": {
          "description": "This type holds serving type value per person , per table for the given Menu.",
          "$ref": "#/definitions/servingType"
        },
        "servingSize": {
          "description": "This type holds TableCapacity for the given Menu.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "includedInMenu": {
          "description": "Return true, when all Menu Items added will be marked as Included and there will be a Global Price for this menu",
          "type": "boolean"
        },
        "consumptionBased": {
          "description": "This type holds value of consumption, Menu items will be charged on a consumption basis.",
          "type": "boolean"
        },
        "sellDateRange": {
          "description": "Menu will be available to sell for an Event for date range.",
          "$ref": "#/definitions/dateRangeType"
        },
        "eventDateRange": {
          "description": "Date period which the Event will take place.",
          "$ref": "#/definitions/dateRangeType"
        },
        "menusSold": {
          "description": "The total number of menus sold for the day on which the event takes place.",
          "type": "integer"
        },
        "webBookable": {
          "description": "This type tells about whether menu is book through web or not.",
          "type": "boolean"
        },
        "inactive": {
          "description": "Selection will note this Menu is Inactive and unable to be added to a Catering Event.",
          "type": "boolean"
        },
        "salesPrice": {
          "description": "Sales Price for Menu Item in Menu Item Configuration.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "includedInPrice": {
          "description": "Return true means, menu item as Included in the Menu Price",
          "type": "boolean"
        },
        "multiChoice": {
          "description": "Indicator of this being a multi-choice menu",
          "type": "boolean"
        },
        "courseCount": {
          "description": "Define the Courses populated into the Multi Choice Menu Configuration",
          "type": "integer"
        }
      }
    },
    "translationTextType2000": {
      "type": "object",
      "description": "Contains Multiple translated texts and language codes.",
      "properties": {
        "defaultText": {
          "description": "Default text with Character length from 0 to 2000.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "translatedTexts": {
          "description": "List of translated text and language codes.",
          "$ref": "#/definitions/translationsTextType"
        }
      }
    },
    "menuTypeType": {
      "type": "string",
      "description": "Defines values for Menu Type",
      "enum": [
        "Food",
        "Beverage"
      ]
    },
    "servingType": {
      "type": "string",
      "description": "Serving",
      "enum": [
        "Pp",
        "Pt"
      ]
    },
    "currencyAmountType": {
      "type": "object",
      "description": "A monetary value expressed with a currency code.",
      "properties": {
        "amount": {
          "description": "A monetary amount.",
          "type": "number"
        },
        "currencyCode": {
          "description": "Provides a currency code to reflect the currency in which an amount may be expressed.",
          "type": "string",
          "minLength": 3,
          "maxLength": 3
        }
      }
    },
    "cateringMenuRevListType": {
      "type": "array",
      "description": "This type holds revenue list.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringMenuRevType"
      }
    },
    "cateringMenuRevType": {
      "type": "object",
      "properties": {
        "revenueType": {
          "description": "This supports all Revenue Types",
          "type": "string",
          "minLength": 0,
          "maxLength": 30
        },
        "type": {
          "description": "This type holds value of Menu type FOOD ,BEVERAGE for the given Menu.",
          "$ref": "#/definitions/menuTypeType"
        },
        "cost": {
          "description": "This type holds cost of the Menu.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "internalQuote": {
          "description": "This type holds internal quote for the Menu.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "costMargin": {
          "description": "This type holds cost of the Menu.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        },
        "price": {
          "description": "This type holds Price of the Menu.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "priceMargin": {
          "description": "This type holds price margin for the given Menu.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        }
      }
    },
    "cateringMenuDetailListType": {
      "type": "array",
      "description": "List of Values of Catering Menu Detail.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringMenuDetailType"
      }
    },
    "cateringMenuDetailType": {
      "type": "object",
      "description": "Detailed attributes of Menu Item.",
      "properties": {
        "id": {
          "description": "The menu item class unique ID",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "hotelId": {
          "description": "The Hotel code which the menu item class belongs to",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "classInfo": {
          "description": "Displays the Menu Item Name noted in the Menu Item Configuration.",
          "$ref": "#/definitions/codeDescriptionType"
        },
        "displayOrder": {
          "description": "Defines the Display Order of the menu item class, to which the menu item is attached",
          "type": "integer"
        },
        "name1": {
          "description": "First value of menu item which belongs to a menu item class",
          "$ref": "#/definitions/translationTextType2000"
        },
        "name2": {
          "description": "Seond value of menu item which belongs to a menu item class",
          "$ref": "#/definitions/translationTextType2000"
        },
        "name3": {
          "description": "Third value of menu item which belongs to a menu item class",
          "$ref": "#/definitions/translationTextType2000"
        },
        "origin1": {
          "description": "The values entered here most commonly reference a Wine, Meat origin if Restaurant features a Local Farm",
          "$ref": "#/definitions/translationTextType2000"
        },
        "origin2": {
          "description": "The values entered here most commonly reference a Wine, Meat origin if Restaurant features a Local Farm",
          "$ref": "#/definitions/translationTextType2000"
        },
        "menuType": {
          "description": "Type of Menu -Food or Beverage",
          "$ref": "#/definitions/menuTypeType"
        },
        "custom": {
          "description": "Indicates whether this menu item is custom",
          "type": "boolean"
        },
        "year": {
          "description": "This value is typically the year of the Wine",
          "type": "integer"
        },
        "restriction": {
          "description": "Any particular restriction description in 100 charactera",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "description": {
          "description": "Detailed description of menu items in 100 characters",
          "$ref": "#/definitions/translationTextType2000"
        },
        "dietaryPreferenceList": {
          "description": "list of configured Dietary preferences",
          "$ref": "#/definitions/dietaryPrefListType"
        },
        "eventTypes": {
          "description": "Field will be inherited values from the Menu Item Class associated for Event Types.",
          "$ref": "#/definitions/codeListType"
        },
        "responsibleDepartments": {
          "description": "Department Code(s) will be displayed in the field for a particular menu item",
          "$ref": "#/definitions/codeListType"
        },
        "quickInsertCode": {
          "description": "Article number in Caps of menu item",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "revenueType": {
          "description": "RevenueType of Menu Item",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "salesPrice": {
          "description": "Price of Menu Item , Numeric currency value field conforming to Currency Format for the selected Property.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "cost": {
          "description": "Actual Cost of Menu Item",
          "$ref": "#/definitions/currencyAmountType"
        },
        "itemConsumption": {
          "description": "Selection of this notes that the price defined is charged 'as-consumed' basis",
          "type": "boolean"
        },
        "container": {
          "description": "Code and description of the container to be used by Menu Item",
          "$ref": "#/definitions/codeDescriptionType"
        },
        "portion": {
          "description": "Portion of the menu item",
          "$ref": "#/definitions/translationTextType2000"
        },
        "servings": {
          "description": "Numeric value of servings of Menu item",
          "type": "integer"
        },
        "webBookable": {
          "description": "Check of Menu Item if it is web bookable",
          "type": "boolean"
        },
        "print": {
          "description": "check if Print action is required for menu item",
          "type": "boolean"
        },
        "inactive": {
          "description": "Check for the status of menu item",
          "type": "boolean"
        },
        "includedYN": {
          "description": "Included flag",
          "type": "boolean"
        },
        "course": {
          "description": "Course number defined will be the display order of the Menu Items on the screen and in Banquet Event Order.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "order": {
          "description": "Order of Menu.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "demandFactor": {
          "description": "Demand Factor of the Menu.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "menuName": {
          "description": "Holds the value of Menu name.",
          "type": "string",
          "minLength": 0,
          "maxLength": 30
        },
        "includedMenu": {
          "description": "Return true means, menu as Included in the Menu Price",
          "type": "boolean"
        },
        "mandatory": {
          "description": "Return true means, menu as Included in the Menu Price",
          "type": "boolean"
        }
      }
    },
    "codeDescriptionType": {
      "type": "object",
      "description": "This contains a generic code and description information.",
      "properties": {
        "code": {
          "description": "Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "description.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        }
      }
    },
    "dietaryPrefListType": {
      "type": "array",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/dietaryPrefType"
      }
    },
    "dietaryPrefType": {
      "type": "object",
      "description": "Base type provides information about Catering Revenue Types Configuration.",
      "properties": {
        "code": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "type": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "cateringMultiChoiceMenuListType": {
      "type": "array",
      "description": "This type holds Multi choice Menu.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringMultiChoiceMenuType"
      }
    },
    "cateringMultiChoiceMenuType": {
      "type": "object",
      "properties": {
        "courseId": {
          "description": "This attributes identifies the courseldd.",
          "type": "integer"
        },
        "course": {
          "description": "This type holds Courses are defined for Menu.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "choiceCount": {
          "description": "This type holds choice count of the Menu.",
          "type": "integer"
        },
        "courseDescription": {
          "description": "This type holds choice description for Menu.",
          "$ref": "#/definitions/translationTextType100"
        },
        "courseName": {
          "description": "This type holds name of the Course.",
          "$ref": "#/definitions/translationTextType20"
        }
      }
    },
    "translationTextType100": {
      "type": "object",
      "description": "Contains Multiple translated texts and language codes.",
      "properties": {
        "defaultText": {
          "description": "Default text with Character length from 0 to 100.",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "translatedTexts": {
          "description": "List of translated text and language codes.",
          "$ref": "#/definitions/translationsTextType"
        }
      }
    },
    "translationTextType20": {
      "type": "object",
      "description": "Contains Multiple translated texts and language codes.",
      "properties": {
        "defaultText": {
          "description": "Default text with Character length from 0 to 20.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "translatedTexts": {
          "description": "List of translated text and language codes.",
          "$ref": "#/definitions/translationsTextType"
        }
      }
    },
    "eventResourceNotesType": {
      "type": "array",
      "description": "Contains event resource note information.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/eventResourceNoteType"
      }
    },
    "eventResourceNoteType": {
      "type": "object",
      "description": "Contains the event resource's note information.",
      "properties": {
        "noteId": {
          "description": "Unique identifier for event resource note. If it is missing, this indicate that it is a new note. If only NoteID is provided then it is a delete operation",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "noteCode": {
          "description": "Note code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "internal": {
          "description": "Indicates if the note is internal use only.",
          "type": "boolean"
        },
        "noteTitle": {
          "description": "Contains note title.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "note": {
          "description": "Contains note text.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "sequence": {
          "description": "Contains display sequence.",
          "type": "integer"
        },
        "createDateTime": {
          "description": "Time stamp of the creation.",
          "type": "string",
          "format": "date-time"
        },
        "creatorId": {
          "description": "ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "lastModifyDateTime": {
          "description": "Time stamp of last modification.",
          "type": "string",
          "format": "date-time"
        },
        "lastModifierId": {
          "description": "Identifies the last software system or person to modify a record.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "purgeDate": {
          "description": "Date an item will be purged from a database (e.g., from a live database to an archive).",
          "type": "string",
          "format": "date",
          "maxLength": 8
        }
      }
    },
    "cateringMenuItemClasses": {
      "type": "object",
      "description": "Request object for updating Menu Item Classes.",
      "properties": {
        "menuItemClasses": {
          "description": "Menu Item Classes to be changed.",
          "$ref": "#/definitions/cateringMenuItemClassListType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringMenuItemClassListType": {
      "type": "array",
      "description": "List of Values of Menu Item Class.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringMenuItemClassType"
      }
    },
    "cateringMenuItemClassType": {
      "type": "object",
      "description": "Menu Item Class Values.",
      "properties": {
        "id": {
          "description": "The menu item class unique ID",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "itemClassInfo": {
          "description": "The menu item class detailed info",
          "$ref": "#/definitions/cateringMenuItemClassInfoType"
        },
        "itemList": {
          "description": "The menu items detailed attribute which belongs to particular menu item class",
          "$ref": "#/definitions/cateringMenuItemListType"
        }
      }
    },
    "cateringMenuItemClassInfoType": {
      "type": "object",
      "properties": {
        "hotelId": {
          "description": "The Hotel code which the menu item class belongs to",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "className": {
          "description": "Menu Item Class Name",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "eventTypeList": {
          "description": "Event types associated with the Menu Class",
          "$ref": "#/definitions/codeListType"
        },
        "responsibleDepartmentList": {
          "description": "Departments associated with the MenuClass",
          "$ref": "#/definitions/codeListType"
        },
        "menuType": {
          "description": "Menu Type information, it is either Beverage or Food",
          "$ref": "#/definitions/menuTypeType"
        },
        "sequence": {
          "description": "Sequence of the Menu Class",
          "type": "integer"
        },
        "webBookable": {
          "description": "Boolean value indicates whether the Menu Class is web bookable or not",
          "type": "boolean"
        },
        "iconName": {
          "description": "Icon Name of the Menu Class",
          "type": "string",
          "minLength": 0,
          "maxLength": 30
        }
      }
    },
    "cateringMenuItemListType": {
      "type": "array",
      "description": "List of Values of Menu Item.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringMenuItemType"
      }
    },
    "cateringMenuItemType": {
      "type": "object",
      "description": "Detailed attributes of Menu Item.",
      "properties": {
        "id": {
          "description": "The menu item class unique ID",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "hotelId": {
          "description": "The Hotel code which the menu item class belongs to",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "classInfo": {
          "description": "Displays the Menu Item Name noted in the Menu Item Configuration.",
          "$ref": "#/definitions/codeDescriptionType"
        },
        "displayOrder": {
          "description": "Defines the Display Order of the menu item class, to which the menu item is attached",
          "type": "integer"
        },
        "name1": {
          "description": "First value of menu item which belongs to a menu item class",
          "$ref": "#/definitions/translationTextType2000"
        },
        "name2": {
          "description": "Seond value of menu item which belongs to a menu item class",
          "$ref": "#/definitions/translationTextType2000"
        },
        "name3": {
          "description": "Third value of menu item which belongs to a menu item class",
          "$ref": "#/definitions/translationTextType2000"
        },
        "origin1": {
          "description": "The values entered here most commonly reference a Wine, Meat origin if Restaurant features a Local Farm",
          "$ref": "#/definitions/translationTextType2000"
        },
        "origin2": {
          "description": "The values entered here most commonly reference a Wine, Meat origin if Restaurant features a Local Farm",
          "$ref": "#/definitions/translationTextType2000"
        },
        "menuType": {
          "description": "Type of Menu -Food or Beverage",
          "$ref": "#/definitions/menuTypeType"
        },
        "custom": {
          "description": "Indicates whether this menu item is custom",
          "type": "boolean"
        },
        "year": {
          "description": "This value is typically the year of the Wine",
          "type": "integer"
        },
        "restriction": {
          "description": "Any particular restriction description in 100 charactera",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "description": {
          "description": "Detailed description of menu items in 100 characters",
          "$ref": "#/definitions/translationTextType2000"
        },
        "dietaryPreferenceList": {
          "description": "list of configured Dietary preferences",
          "$ref": "#/definitions/dietaryPrefListType"
        },
        "eventTypes": {
          "description": "Field will be inherited values from the Menu Item Class associated for Event Types.",
          "$ref": "#/definitions/codeListType"
        },
        "responsibleDepartments": {
          "description": "Department Code(s) will be displayed in the field for a particular menu item",
          "$ref": "#/definitions/codeListType"
        },
        "quickInsertCode": {
          "description": "Article number in Caps of menu item",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "revenueType": {
          "description": "RevenueType of Menu Item",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "salesPrice": {
          "description": "Price of Menu Item , Numeric currency value field conforming to Currency Format for the selected Property.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "cost": {
          "description": "Actual Cost of Menu Item",
          "$ref": "#/definitions/currencyAmountType"
        },
        "itemConsumption": {
          "description": "Selection of this notes that the price defined is charged 'as-consumed' basis",
          "type": "boolean"
        },
        "container": {
          "description": "Code and description of the container to be used by Menu Item",
          "$ref": "#/definitions/codeDescriptionType"
        },
        "portion": {
          "description": "Portion of the menu item",
          "$ref": "#/definitions/translationTextType2000"
        },
        "servings": {
          "description": "Numeric value of servings of Menu item",
          "type": "integer"
        },
        "webBookable": {
          "description": "Check of Menu Item if it is web bookable",
          "type": "boolean"
        },
        "print": {
          "description": "check if Print action is required for menu item",
          "type": "boolean"
        },
        "inactive": {
          "description": "Check for the status of menu item",
          "type": "boolean"
        },
        "includedYN": {
          "description": "Included flag",
          "type": "boolean"
        }
      }
    },
    "cateringMenuItemClassesCopy": {
      "type": "object",
      "description": "Request object for Copying Menu Item Classes.",
      "properties": {
        "copyMenuItemClasses": {
          "description": "List of Menu Item Classes to be copied.",
          "$ref": "#/definitions/copyMenuItemClassesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyMenuItemClassesType": {
      "type": "object",
      "properties": {
        "sourceHotelCode": {
          "description": "Source Hotel code from where menu item classes needs to be copied",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "itemClasses": {
          "description": "Menu Item classes of to be copied",
          "$ref": "#/definitions/uniqueIDListType"
        },
        "targetHotelCodes": {
          "description": "Target Hotel code where menu item classes need to be copied",
          "$ref": "#/definitions/codeListType"
        },
        "copyInstructions": {
          "description": "Instructions which will be considered when copying from the template. If this element is not sent, all the flags will be ignored.",
          "type": "object",
          "properties": {
            "associatedItems": {
              "description": "When true, this will copy the source block's room allocation counts to the new block.",
              "type": "boolean"
            }
          }
        }
      }
    },
    "uniqueIDListType": {
      "type": "array",
      "description": "Unique Id that references an object uniquely in the system.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/uniqueID_Type"
      }
    },
    "cateringPackagesInfo": {
      "type": "object",
      "properties": {
        "pkgTmplts": {
          "description": "Collection of Catering Packages.",
          "$ref": "#/definitions/cateringPackageListType"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringPackageListType": {
      "type": "array",
      "description": "Collection of multiple Catering Packages.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringPackageType"
      }
    },
    "cateringPackageType": {
      "type": "object",
      "description": "Type used for managing Catering Package.",
      "properties": {
        "pkgId": {
          "description": "Unique Identifier for a Catering Package.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "hotelId": {
          "description": "Hotel Code associated with the Catering Package.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "packageDetail": {
          "description": "Provides information about the Catering Package.",
          "$ref": "#/definitions/cateringPackageInfoType"
        },
        "eventsList": {
          "description": "Provides Events details associated to the Catering Package.",
          "$ref": "#/definitions/cateringPackageEventListType"
        },
        "pricingList": {
          "description": "Provides Pricing details associated to the Catering Package.",
          "$ref": "#/definitions/cateringPackagePricingListType"
        }
      }
    },
    "cateringPackageInfoType": {
      "type": "object",
      "description": "Catering Package details.",
      "properties": {
        "pkgCode": {
          "description": "Package Code associated with the Catering Package.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "Description/Name of the Catering Package.",
          "$ref": "#/definitions/translationTextType200"
        },
        "duration": {
          "description": "Duration (in days) of the Catering Package.",
          "type": "integer"
        },
        "webBookable": {
          "description": "Defines if web booking is allowed.",
          "type": "boolean"
        },
        "isTemplate": {
          "description": "Defines if Catering Package is a Template or not.",
          "type": "boolean"
        }
      }
    },
    "cateringPackageEventListType": {
      "type": "array",
      "description": "Collection of multiple Events associated with a particular Catering Packages.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringPackageEventType"
      }
    },
    "cateringPackageEventType": {
      "type": "object",
      "description": "Type used for managing Events associated with a particular Catering Package.",
      "properties": {
        "id": {
          "description": "Unique Identifier for a Event associated with a particular Catering Package.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "masterEventId": {
          "description": "Master Event associated with the Catering Package Event.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "eventType": {
          "description": "Event Type associated with the Catering Package Event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "eventName": {
          "description": "Event Name for the Catering Package Event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 60
        },
        "dayOrder": {
          "description": "Event Day for the Catering Package Event.",
          "type": "integer"
        },
        "eventTime": {
          "description": "Start/End Time details for the Catering Package Event.",
          "$ref": "#/definitions/dateTimeSpanType"
        },
        "room": {
          "description": "Room details for the Catering Package Event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomSetup": {
          "description": "Room Setup details for the Catering Package Event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomRateCode": {
          "description": "Stores the selected rate code for the meeting room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "isMaster": {
          "description": "Indiciates if this package event has sub-events.",
          "type": "boolean"
        },
        "isShareable": {
          "description": "Indicates if the function space should be booked as sharable.",
          "type": "boolean"
        },
        "alternate": {
          "description": "Indicates if the function space requires an alternate space.",
          "type": "boolean"
        },
        "sub": {
          "description": "Indicates if the package event is a sub-event or not.",
          "type": "boolean"
        },
        "notes": {
          "description": "Collection of Notes associated with the Catering Package Event.",
          "$ref": "#/definitions/cateringPackageEventNoteListType"
        },
        "resources": {
          "description": "Collection of Resources associated with the Catering Package Event.",
          "$ref": "#/definitions/cateringPackageResourceListType"
        }
      }
    },
    "dateTimeSpanType": {
      "type": "object",
      "description": "Allows for a choice in description of the amount of time spanned by this type. EndDate specifies a specific date, while Duration provides a measure of time to add to the StartDate to yield end date.",
      "properties": {
        "startDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "endDateTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "cateringPackageEventNoteListType": {
      "type": "array",
      "description": "Collection of multiple Event Notes associated with a particular Catering Package Event.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringPackageEventNoteType"
      }
    },
    "cateringPackageEventNoteType": {
      "type": "object",
      "description": "Type used for managing Event Notes associated with a particular Catering Package Event.",
      "properties": {
        "id": {
          "description": "Unique Identifier for a Note associated with a particular Catering Package Event.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "noteCode": {
          "description": "Note Code/Type of the Catering Package Event Note.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "title": {
          "description": "Title of the Catering Package Event Note.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "comment": {
          "description": "Comment associated the Catering Package Event Note.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "internal": {
          "description": "Indiciates if this is Internal.",
          "type": "boolean"
        },
        "createDateTime": {
          "description": "Time stamp of the creation.",
          "type": "string",
          "format": "date-time"
        },
        "creatorId": {
          "description": "ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "lastModifyDateTime": {
          "description": "Time stamp of last modification.",
          "type": "string",
          "format": "date-time"
        },
        "lastModifierId": {
          "description": "Identifies the last software system or person to modify a record.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "purgeDate": {
          "description": "Date an item will be purged from a database (e.g., from a live database to an archive).",
          "type": "string",
          "format": "date",
          "maxLength": 8
        }
      }
    },
    "cateringPackageResourceListType": {
      "type": "array",
      "description": "Collection of multiple Resources associated with a particular Catering Package Event.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringPackageEventResourceType"
      }
    },
    "cateringPackageEventResourceType": {
      "type": "object",
      "description": "Type used for managing Resources associated with a particular Catering Package Event.",
      "properties": {
        "resourceId": {
          "description": "Unique Identifier for a Resource associated with a particular Catering Package Event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "type": {
          "description": "Resource Type associated with the Catering Package Event.",
          "$ref": "#/definitions/eventResourceType"
        },
        "name": {
          "description": "Name of the Resource.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "roomSetup": {
          "description": "Setup code of th Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomRate": {
          "description": "RateCode associated with the Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "revenueTypes": {
          "description": "List of revenue types associated with the resource",
          "$ref": "#/definitions/codeListType"
        },
        "isShareable": {
          "description": "Defines if the Function Space is shareable.",
          "type": "boolean"
        },
        "quantity": {
          "description": "Defines the quantity of the Item.",
          "type": "integer"
        },
        "orderBy": {
          "description": "Defines the Display Order of the Item or Pickup Sequence during the booking process for a Function Space.",
          "type": "integer"
        },
        "itemAttribute": {
          "description": "Defines the ID of the Item Attribute associated with the Item.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "itemRate": {
          "description": "Rate Code associated with the Item.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "price": {
          "description": "Price defined for a CUSTOM Rate Code associated with the Item.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "resourceNotes": {
          "description": "Collection of Notes associated with the Catering Package Event Resource.",
          "$ref": "#/definitions/cateringPackageResourceNoteListType"
        }
      }
    },
    "eventResourceType": {
      "type": "string",
      "enum": [
        "Space",
        "Item",
        "Menu"
      ],
      "description": "It represents Menu as Resource."
    },
    "cateringPackageResourceNoteListType": {
      "type": "array",
      "description": "Collection of multiple Resource Notes associated with a particular Catering Package Resource.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringPackageResourceNoteType"
      }
    },
    "cateringPackageResourceNoteType": {
      "type": "object",
      "description": "Type used for managing Resource Notes associated with a particular Catering Package Resource.",
      "properties": {
        "id": {
          "description": "Unique Identifier for a Note associated with a particular Catering Package Resource.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "title": {
          "description": "Title of the Catering Package Resource Note.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "comment": {
          "description": "Comment associated the Catering Package Resource Note.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "internal": {
          "description": "Indiciates if this is Internal.",
          "type": "boolean"
        },
        "createDateTime": {
          "description": "Time stamp of the creation.",
          "type": "string",
          "format": "date-time"
        },
        "creatorId": {
          "description": "ID of creator. The creator could be a software system identifier or an identifier of an employee resposible for the creation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "lastModifyDateTime": {
          "description": "Time stamp of last modification.",
          "type": "string",
          "format": "date-time"
        },
        "lastModifierId": {
          "description": "Identifies the last software system or person to modify a record.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "purgeDate": {
          "description": "Date an item will be purged from a database (e.g., from a live database to an archive).",
          "type": "string",
          "format": "date",
          "maxLength": 8
        }
      }
    },
    "cateringPackagePricingListType": {
      "type": "array",
      "description": "Collection of multiple Pricing Details associated with a particular Catering Package.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringPackagePricingType"
      }
    },
    "cateringPackagePricingType": {
      "type": "object",
      "description": "Type used for managing Pricing Details associated with a particular Catering Package.",
      "properties": {
        "id": {
          "description": "Unique Identifier for a Pricing detail associated with the Catering Package.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "priceCode": {
          "description": "Price Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "Title of the Catering Package Event Note.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "sellDate": {
          "description": "Selling Start/End Date associated with the Price Details.",
          "$ref": "#/definitions/dateTimeSpanType"
        },
        "blockDate": {
          "description": "Booking Start/End Date associated with the Price Details.",
          "$ref": "#/definitions/dateTimeSpanType"
        },
        "marketCode": {
          "description": "Market Code associated with the Price Details.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "webBookable": {
          "description": "Defines if web booking is allowed.",
          "type": "boolean"
        },
        "totalPrice": {
          "description": "Total Price.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "flatRate": {
          "description": "Defines if Flat Rate is applicable.",
          "type": "boolean"
        },
        "minAttendees": {
          "description": "Minimum Attendees.",
          "type": "integer"
        },
        "maxAttendees": {
          "description": "Maximum Attendees.",
          "type": "integer"
        },
        "revenueDetails": {
          "description": "Collection of Revenue Details associated with the Catering Package Price Code.",
          "$ref": "#/definitions/cateringPackageRevenueListType"
        },
        "bookingType": {
          "description": "Collection of configured Booking Types for the package property.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "cateringPackageRevenueListType": {
      "type": "array",
      "description": "Collection of multiple Revenue Details associated with a particular Catering Package Price Code.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/cateringPackageRevenueType"
      }
    },
    "cateringPackageRevenueType": {
      "type": "object",
      "description": "Type used for managing Revenue Details associated with a particular Catering Package Price Code.",
      "properties": {
        "packageEventId": {
          "description": "The Catering Package Event Id asscoaited with Revenue.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "revType": {
          "description": "Revenue Type associated with the Catering Package Price Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "orderBy": {
          "description": "Sorting Order.",
          "type": "integer"
        },
        "revForecast": {
          "description": "Forecasted Revenue.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "revExpected": {
          "description": "Expected Revenue.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "costExpected": {
          "description": "Expected Cost.",
          "$ref": "#/definitions/currencyAmountType"
        }
      }
    },
    "cateringPackage": {
      "type": "object",
      "properties": {
        "pkgTmplts": {
          "description": "Collection of Catering Packages.",
          "$ref": "#/definitions/cateringPackageListType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringServingsInfo": {
      "type": "object",
      "description": "Response object for fetching Catering Code's Serving details.",
      "properties": {
        "servings": {
          "description": "Collection of Catering's Serving Details.",
          "$ref": "#/definitions/cateringCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringServings": {
      "type": "object",
      "description": "Request object which holds modified Catering Code's Serving.",
      "properties": {
        "servings": {
          "description": "Collection of Serving to be changed.",
          "$ref": "#/definitions/cateringCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "templateEventCodesDetails": {
      "type": "object",
      "description": "Response object for fetching template Event Codes.",
      "properties": {
        "templateEventCodes": {
          "description": "Collection of template Event Codes.",
          "$ref": "#/definitions/templateEventCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "templateEventCodesType": {
      "type": "array",
      "description": "Details for Event Code at template level.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/templateEventCodeType"
      }
    },
    "templateEventCodeType": {
      "type": "object",
      "description": "Base structure for template and hotel Event Code.",
      "properties": {
        "code": {
          "description": "Code of an Event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "Description of an Event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "blackOut": {
          "description": "Black Out flag of Event.",
          "type": "boolean"
        },
        "sellSequence": {
          "description": "Sell sequence of Event.",
          "type": "number"
        },
        "inactive": {
          "description": "Inactive flag of Event.",
          "type": "boolean"
        }
      }
    },
    "templateEventCodesToBeChanged": {
      "type": "object",
      "description": "Request object for modifying template Event Codes.",
      "properties": {
        "templateEventCodes": {
          "description": "Collection of template Event Codes to be changed.",
          "$ref": "#/definitions/templateEventCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "templateEventCodesCriteria": {
      "type": "object",
      "description": "Request object for creating new template Event Codes.",
      "properties": {
        "templateEventCodes": {
          "description": "Collection of template Event Codes to be created.",
          "$ref": "#/definitions/templateEventCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "eventForecasts": {
      "type": "object",
      "properties": {
        "eventForecasts": {
          "description": "Consists of modified Event Forecasts to be saved.",
          "$ref": "#/definitions/eventForecastListType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "eventForecastListType": {
      "type": "array",
      "description": "Collection of multiple Event Forecasts.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/eventForecastType"
      }
    },
    "eventForecastType": {
      "type": "object",
      "description": "Type used for managing forecast for any event.",
      "properties": {
        "forecastId": {
          "description": "Unique Identifier for an event forecast.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "hotelId": {
          "description": "Hotel Code to which the Event Forecast belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "forecastInfo": {
          "description": "Provides information about the event forecast.",
          "type": "array",
          "maxItems": 2,
          "items": {
            "$ref": "#/definitions/eventForecastInfoType"
          }
        },
        "revenueDetails": {
          "description": "Provides revenue details attached to the event forecast.",
          "$ref": "#/definitions/eventForecastRevDetailListType"
        }
      }
    },
    "eventForecastInfoType": {
      "type": "object",
      "description": "Associated Information for an event forecast.",
      "properties": {
        "eventType": {
          "description": "Event Type for which the forecast is associated.",
          "$ref": "#/definitions/codeDescriptionType"
        },
        "blockType": {
          "description": "Block type for which the forecast is associated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "marketCode": {
          "description": "Market code for which the forecast is associated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "dateRange": {
          "description": "Start Date and End Date for the event forecast.",
          "$ref": "#/definitions/dateRangeType"
        }
      }
    },
    "eventForecastRevDetailListType": {
      "type": "array",
      "description": "Collection of Event Forecast Revenue Details.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/eventForecastRevDetailType"
      }
    },
    "eventForecastRevDetailType": {
      "type": "object",
      "description": "Revenue Details for a revenue type attached to an event forecast.",
      "properties": {
        "revenueType": {
          "description": "Denotes the Revenue Type for an event forecast.",
          "$ref": "#/definitions/codeDescriptionType"
        },
        "amount": {
          "description": "Forecast Amount associated to the Revenue Type.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "amountType": {
          "description": "Denotes whether Forecast type is per person or flat amount.",
          "$ref": "#/definitions/forecastRevenueAmountTypeType"
        }
      }
    },
    "forecastRevenueAmountTypeType": {
      "type": "string",
      "description": "Defines values for Amount Type of an event forecast revenue.",
      "enum": [
        "FlatAmount",
        "PerPerson"
      ]
    },
    "cateringRentalCodesDetails": {
      "type": "object",
      "description": "Response object for fetching Catering Rental Code details.",
      "properties": {
        "rentalCodes": {
          "description": "Collection of Catering Rental Code Details.",
          "$ref": "#/definitions/cateringCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringRentalCodesCriteria": {
      "type": "object",
      "description": "Request object which holds new Catering Rental Code Details.",
      "properties": {
        "rentalCodes": {
          "description": "Collection of Catering Rental Codes to be created.",
          "$ref": "#/definitions/cateringCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringRentalCodesToBeChanged": {
      "type": "object",
      "description": "Request object which holds modified Catering Rental Codes.",
      "properties": {
        "rentalCodes": {
          "description": "Collection of Catering Rental Codes to be changed.",
          "$ref": "#/definitions/cateringCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceTypesDetails": {
      "type": "object",
      "description": "Response object for fetching Function Space Types.",
      "properties": {
        "functionSpaceTypes": {
          "description": "Collection of Function Space Types.",
          "$ref": "#/definitions/functionSpaceTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceTypesType": {
      "type": "array",
      "description": "List of Function Space Types.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/functionSpaceTypeType"
      }
    },
    "functionSpaceTypeType": {
      "type": "object",
      "description": "Contains Common Master configuration detail.",
      "properties": {
        "code": {
          "description": "Common Master unique code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "description": {
          "description": "Description of the Master code.",
          "$ref": "#/definitions/translationTextType2000"
        },
        "displayOrder": {
          "description": "Common Master record sequence number.",
          "type": "number"
        },
        "managedBy": {
          "$ref": "#/definitions/managedByOptions"
        }
      }
    },
    "functionSpaceTypesCriteria": {
      "type": "object",
      "description": "Request object for creating Function Space Types.",
      "properties": {
        "functionSpaceTypes": {
          "description": "Function Space Typesto be created.",
          "$ref": "#/definitions/functionSpaceTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceTypesToBeChanged": {
      "type": "object",
      "description": "Request object for changing Function Space Types.",
      "properties": {
        "functionSpaceTypes": {
          "description": "Function Space Typesto be changed.",
          "$ref": "#/definitions/functionSpaceTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceLocationsDetails": {
      "type": "object",
      "description": "Response object for fetching function space locations.",
      "properties": {
        "locations": {
          "description": "Collection of function space locations.",
          "$ref": "#/definitions/functionSpaceLocationsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceLocationsType": {
      "type": "array",
      "description": "List of the function space locations to be configured or fetched",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/functionSpaceLocationType"
      }
    },
    "functionSpaceLocationType": {
      "type": "object",
      "description": "Function Space Location details.",
      "properties": {
        "hotelId": {
          "description": "Hotel code that the function space location belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "code": {
          "description": "Function Space Location Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "translatableDescription": {
          "description": "Translatable description of the Function Space Location.",
          "$ref": "#/definitions/translationTextType2000"
        }
      }
    },
    "functionSpaceLocationsCriteria": {
      "type": "object",
      "description": "Request object for adding function space location configurations to resort.",
      "properties": {
        "locations": {
          "description": "List of function space location(s) to be added to the configuration of resort.",
          "$ref": "#/definitions/functionSpaceLocationsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceLocationsToBeChanged": {
      "type": "object",
      "description": "Request object for modifying function space location(s) for resort.",
      "properties": {
        "locations": {
          "description": "List of function space location(s) to be modified in the configuration of the resort.",
          "$ref": "#/definitions/functionSpaceLocationsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceSetupStylesDetails": {
      "type": "object",
      "description": "Response object for fetching function space setup styles.",
      "properties": {
        "setupStyles": {
          "description": "Collection of function space setup styles.",
          "$ref": "#/definitions/functionSpaceSetupStylesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceSetupStylesType": {
      "type": "array",
      "description": "List of the function space setup styles to be configured or fetched",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/functionSpaceSetupStyleType"
      }
    },
    "functionSpaceSetupStyleType": {
      "type": "object",
      "description": "Type for the function space setup style ID",
      "properties": {
        "codeId": {
          "description": "Setup style code id .",
          "type": "number"
        },
        "code": {
          "description": "Function Space Setup Style Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "translatableDescription": {
          "description": "Translatable description of the Function Space Setup Style.",
          "$ref": "#/definitions/translationTextType200"
        },
        "displaySequence": {
          "description": "Description of the Function Space Setup Style.",
          "type": "integer"
        },
        "directory": {
          "description": "Display in Directory True or False.",
          "type": "boolean"
        },
        "webBooking": {
          "description": "Bookmarkable via Website True or False.",
          "type": "boolean"
        },
        "webSetup": {
          "description": "Setup Time for web bookings.",
          "type": "integer"
        },
        "webSetdown": {
          "description": "Setdown Time for web bookings.",
          "type": "integer"
        },
        "inactive": {
          "description": "Indicates if the Setup Style is active.",
          "type": "boolean"
        }
      }
    },
    "functionSpaceSetupStylesCriteria": {
      "type": "object",
      "description": "Request object for adding function space setup styles.",
      "properties": {
        "setupStyles": {
          "description": "List of function space setup style(s) to be added.",
          "$ref": "#/definitions/functionSpaceSetupStylesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceSetupStylesToBeChanged": {
      "type": "object",
      "description": "Request object for modifying function space setup style(s)",
      "properties": {
        "setupStyles": {
          "description": "List of function space setup style(s) to be modified.",
          "$ref": "#/definitions/functionSpaceSetupStylesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceDetails": {
      "type": "object",
      "description": "Response object for fetching complete information of existing function space room.",
      "properties": {
        "functionSpaceRoom": {
          "description": "Detailed information of a function space room.",
          "$ref": "#/definitions/functionSpaceType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceType": {
      "type": "object",
      "description": "This type holds collection of function space room with complete information.",
      "properties": {
        "room": {
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/functionSpaceRoomType"
          }
        },
        "hotelId": {
          "description": "Hotel Code of the room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "functionSpaceRoomType": {
      "type": "object",
      "description": "This type represents the primary room attributes.",
      "properties": {
        "roomType": {
          "description": "Room type basic information of the room.",
          "$ref": "#/definitions/roomTypeShortInfoType"
        },
        "floor": {
          "description": "Floor of the Room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "floorDescription": {
          "description": "Description for the Floor of the Room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomFeatures": {
          "description": "Room Features for the room.",
          "$ref": "#/definitions/roomFeaturesType"
        },
        "roomDescription": {
          "description": "Detail Long Description Of The Room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "Description of the room.",
          "$ref": "#/definitions/translationTextType2000"
        },
        "smokingPreference": {
          "description": "This indicates room smoking preference.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "smokingPreferenceDescription": {
          "description": "This indicates the description of the room smoking preference.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "building": {
          "description": "Building associated with the room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomAssignmentRating": {
          "description": "Assignment Rating associated with the room.",
          "$ref": "#/definitions/ratePlanRatingType"
        },
        "accessible": {
          "description": "Indicates whether the room is accessibility compliant.",
          "type": "boolean"
        },
        "roomId": {
          "description": "Code of the room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "meetingRoom": {
          "description": "Indicates whether the room is a Meeting Room",
          "type": "boolean"
        },
        "roomCapacity": {
          "description": "Minimum and Maximum room capacity information of the function space.",
          "$ref": "#/definitions/roomCapacityType"
        },
        "roomSize": {
          "description": "Collection of room size information of of the function space group by unit of measurement.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/roomSizeType"
          }
        }
      }
    },
    "roomTypeShortInfoType": {
      "type": "object",
      "description": "Basic information of room type.",
      "properties": {
        "pseudo": {
          "description": "Indicates if room is a pseudo. This is read-only.",
          "type": "boolean"
        },
        "suite": {
          "description": "Indicates if room is a suite. This is read-only.",
          "type": "boolean"
        },
        "roomClass": {
          "description": "Room Class of the room. This is read-only.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "shortDescription": {
          "description": "Short Description of room type.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "houseKeeping": {
          "description": "Indicates if room type of the room is flagged as housekeeping. This is read-only.",
          "type": "boolean"
        },
        "smokingPreference": {
          "description": "Specifies the smoking preference for room type of the room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "building": {
          "description": "Building associated with the room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomAssignmentRating": {
          "description": "Assignment Rating associated with the room.",
          "$ref": "#/definitions/ratePlanRatingType"
        },
        "minimumOccupancy": {
          "description": "Minimum occupancy for the room type.",
          "type": "integer"
        },
        "maximumOccupancy": {
          "description": "Maximum occupancy for the room type.",
          "type": "integer"
        },
        "roomFeatures": {
          "description": "Room Features for the room.",
          "$ref": "#/definitions/roomFeaturesType"
        },
        "accessible": {
          "description": "Indicates if room type is accessible.",
          "type": "boolean"
        },
        "roomType": {
          "description": "Room type of the room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "meetingRoom": {
          "description": "Indicates whether function space can be meeting room.",
          "type": "boolean"
        }
      }
    },
    "ratePlanRatingType": {
      "type": "string",
      "description": "Possible Rate plan rating values.",
      "enum": [
        "MostImportant",
        "Important",
        "SomewhatImportant",
        "LessImportant",
        "LeastImportant",
        "NoValueSet"
      ]
    },
    "roomFeaturesType": {
      "type": "array",
      "description": "A recurring element that identifies the room features.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/roomFeatureType"
      }
    },
    "roomFeatureType": {
      "type": "object",
      "description": "Room Feature Information.",
      "properties": {
        "code": {
          "description": "A code representing a room feature.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "A code representing a room feature.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "orderSequence": {
          "description": "Display Order sequence.",
          "type": "number"
        },
        "quantity": {
          "description": "Indicates quantity.",
          "type": "integer"
        }
      }
    },
    "roomCapacityType": {
      "type": "object",
      "description": "Detailed information on the capacity of a room.",
      "properties": {
        "minCapacity": {
          "description": "Minimum capacity of the room.",
          "type": "integer"
        },
        "maxCapacity": {
          "description": "Maximum capacity of the room.",
          "type": "integer"
        }
      }
    },
    "roomSizeType": {
      "type": "object",
      "description": "Detailed information on the capacity of a room.",
      "properties": {
        "width": {
          "description": "Width of the room.",
          "type": "number"
        },
        "length": {
          "description": "Length of the room.",
          "type": "number"
        },
        "area": {
          "description": "Area of the room.",
          "type": "number"
        },
        "minHeight": {
          "description": "Minimum height of the room.",
          "type": "number"
        },
        "maxHeight": {
          "description": "Maximum height of the room.",
          "type": "number"
        },
        "unitOfMeasureCode": {
          "description": "The unit of measure in a code format.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "cateringMenuClassesInfo": {
      "type": "object",
      "description": "Response object to fetch Menu Classes.",
      "properties": {
        "menuClassList": {
          "description": "Collection of Menu classes.",
          "$ref": "#/definitions/cateringMenuClassListType"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringMenuItemClassesInfo": {
      "type": "object",
      "description": "Response object for retrieving Menu Item Classes.",
      "properties": {
        "menuItemClassList": {
          "description": "Collection of Menu Item Classes fetched.",
          "$ref": "#/definitions/cateringMenuItemClassListType"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringMenuItemsInfo": {
      "type": "object",
      "description": "Response object for retrieving Menu Items.",
      "properties": {
        "cateringMenuItems": {
          "description": "Collection of Menu Items fetched.",
          "$ref": "#/definitions/cateringMenuItemListType"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringMenuItems": {
      "type": "object",
      "description": "Request object for changing Menu Items.",
      "properties": {
        "cateringMenuItems": {
          "description": "Menu Items to be changed.",
          "$ref": "#/definitions/cateringMenuItemListType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringMenuItemsCopy": {
      "type": "object",
      "description": "Request object for Copying Menu Items.",
      "properties": {
        "copyMenuItems": {
          "description": "List of Menu Items to be copied.",
          "$ref": "#/definitions/copyMenuItemsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyMenuItemsType": {
      "type": "object",
      "properties": {
        "hotelId": {
          "description": "Source Hotel code from where menu items needs to be copied",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "menuItemList": {
          "description": "Source menu items to be copied",
          "$ref": "#/definitions/cateringMenuItemListType"
        },
        "menuItemClassList": {
          "description": "Target Menu Classes where menu items need to be copied",
          "$ref": "#/definitions/cateringMenuItemClassListType"
        }
      }
    },
    "cateringMenusInfo": {
      "type": "object",
      "description": "Response object to fetch Menu .",
      "properties": {
        "menuList": {
          "description": "Collection of Menu .",
          "$ref": "#/definitions/cateringMenuListType"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringMenus": {
      "type": "object",
      "description": "Request object for changing Menu .",
      "properties": {
        "menuList": {
          "description": "Menu Classes to be changed",
          "$ref": "#/definitions/cateringMenuListType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "cateringMenusCopy": {
      "type": "object",
      "description": "Request object for copying Menu .",
      "properties": {
        "copyCateringMenus": {
          "description": "Copy Menu criteria type to copy multiple Menu.",
          "$ref": "#/definitions/copyCateringMenuType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyCateringMenuType": {
      "type": "object",
      "properties": {
        "menuId": {
          "description": "This type holds the menu id which will be copied.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "hotelId": {
          "description": "Source Hotel code from where the menu will be copied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "menuClassList": {
          "description": "Target Menu Class list where the menu will be copied to.",
          "$ref": "#/definitions/cateringMenuClassListType"
        }
      }
    },
    "cateringPackages": {
      "type": "object",
      "description": "Request object for changing Catering Packages.",
      "properties": {
        "cateringPackageList": {
          "description": "Catering Packages to be changed",
          "$ref": "#/definitions/cateringPackageListType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "dailyInventoryItems": {
      "type": "object",
      "description": "Response object for creating new Catering Packages.",
      "properties": {
        "dailyItems": {
          "description": "Collection of Daily Inventory Items.",
          "$ref": "#/definitions/dailyInventoryItemsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "dailyInventoryItemsType": {
      "type": "array",
      "description": "List of Daily Inventory Items.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/dailyInventoryItemType"
      }
    },
    "dailyInventoryItemType": {
      "type": "object",
      "description": "Details of Daily Inventory Items.",
      "properties": {
        "itemId": {
          "description": "The id of the daily Item Inventory.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "itemName": {
          "description": "The Name of the Daily Item from Inventory.",
          "$ref": "#/definitions/translationTextType200"
        },
        "itemDescription": {
          "description": "The Description of the Daily Item from Inventory.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "itemClassId": {
          "description": "The Item Class ID which the Daily item belongs to.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "quantityInStock": {
          "description": "Item quantity in Stock of the Daily Item from Inventory.",
          "type": "number"
        },
        "dailyItemQuantityByDate": {
          "description": "List of Daily quantity for Item by date/dates.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/itemQuantityDateType"
          }
        },
        "hotelId": {
          "description": "The Hotel code which the daily item belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "itemQuantityDateType": {
      "type": "object",
      "description": "Item Quantity by date",
      "properties": {
        "dailyQuantity": {
          "description": "Daily quantity for Item by date.",
          "type": "number"
        },
        "quantityDate": {
          "description": "Date of the item quantity.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        }
      }
    },
    "checkedDiscountAvailable": {
      "type": "object",
      "description": "Response object to determine whether the discount is available for resort or not.",
      "properties": {
        "discountable": {
          "description": "Determines whether the discount is available for resort or not.",
          "type": "boolean"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "eventCodesDetails": {
      "type": "object",
      "description": "Response object for fetching Event Codes for a hotel.",
      "properties": {
        "eventCodes": {
          "description": "Collection of hotel level Event Codes.",
          "$ref": "#/definitions/eventCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "eventCodesType": {
      "type": "array",
      "description": "Details for Event Code at hotel level.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/eventCodeType"
      }
    },
    "eventCodeType": {
      "type": "object",
      "description": "Base structure for template and hotel Event Code.",
      "properties": {
        "code": {
          "description": "Code of an Event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "Description of an Event.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "blackOut": {
          "description": "Black Out flag of Event.",
          "type": "boolean"
        },
        "sellSequence": {
          "description": "Sell sequence of Event.",
          "type": "number"
        },
        "inactive": {
          "description": "Inactive flag of Event.",
          "type": "boolean"
        },
        "hotelId": {
          "description": "Hotel code to which the Event Code is associated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "eventCodesCriteria": {
      "type": "object",
      "description": "Request object for creating new Event Codes for a hotel.",
      "properties": {
        "eventCodes": {
          "description": "Collection of hotel Event Codes to be created.",
          "$ref": "#/definitions/eventCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "eventCodesToBeChanged": {
      "type": "object",
      "description": "Request object for modifying Event Codes for a hotel.",
      "properties": {
        "eventCodes": {
          "description": "Collection of hotel Event Codes to be changed.",
          "$ref": "#/definitions/eventCodesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "eventForecastsInfo": {
      "type": "object",
      "properties": {
        "eventForecasts": {
          "description": "Collection of Event Forecasts.",
          "$ref": "#/definitions/eventForecastListType"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpacesDetails": {
      "type": "object",
      "description": "Response object for fetching function spaces summary info at the property level.",
      "properties": {
        "functionSpaces": {
          "description": "List of summary information of function space.",
          "$ref": "#/definitions/functionSpacesSummaryType"
        },
        "totalPages": {
          "description": "Evaluated total page count based on the requested max fetch count.",
          "type": "integer"
        },
        "offset": {
          "description": "Index or initial index of the set(page) being requested. If the index goes out of the bounds of the total set count then no data will be returned.",
          "type": "integer"
        },
        "limit": {
          "description": "Indicates maximum number of records a Web Service should return.",
          "type": "integer"
        },
        "hasMore": {
          "description": "Indicates whether all the records are included in the response or not. Absence of the attribute values should be consider as all rows fetched in the response.",
          "type": "boolean"
        },
        "totalResults": {
          "description": "Total number of rows queried",
          "type": "integer"
        },
        "count": {
          "description": "Total number of rows returned",
          "type": "integer"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpacesSummaryType": {
      "type": "array",
      "description": "The summary information for a function space.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/functionSpaceSummaryType"
      }
    },
    "functionSpaceSummaryType": {
      "type": "object",
      "description": "The summary information for a function space.",
      "properties": {
        "hotelId": {
          "description": "Hotel Code where function space belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomCode": {
          "description": "Room Code of the Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomType": {
          "description": "Room Type of the Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "psuedoRoomType": {
          "description": "Indicates whether the room type is psuedo.",
          "type": "boolean"
        },
        "spaceName": {
          "description": "The Name of the Function Space.",
          "$ref": "#/definitions/translationTextType2000"
        },
        "shortName": {
          "description": "The Short Name of the Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "floor": {
          "description": "The floor on which the Function Space is located.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "spaceType": {
          "description": "The Type which the Function Space belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "location": {
          "description": "The building on which the Function Space is located.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "combo": {
          "description": "Indicate if the function space is a combination room.",
          "type": "boolean"
        },
        "element": {
          "description": "Indicate if the function space will be shown in the Function Diary by default.",
          "type": "boolean"
        },
        "shareable": {
          "description": "Indicate if the function space is shareable.",
          "type": "boolean"
        },
        "forceAlternate": {
          "description": "Indicate if the function space is forced to have alternate function spaces in case the function space becomes unvailable.",
          "type": "boolean"
        },
        "webBookable": {
          "description": "Indicates whether the Function Space is web bookable or not.",
          "type": "boolean"
        },
        "webViewable": {
          "description": "Indicates whether the Function Space is web viewable or not.",
          "type": "boolean"
        },
        "fullUtilizationTime": {
          "description": "The time in minutes that the function space would be considered at 100% utilization.",
          "type": "number"
        },
        "handicapFacilities": {
          "description": "Indicates whether the function space has handicap facilities.",
          "type": "boolean"
        },
        "orderBy1": {
          "description": "The first custom order for sorting the function space display.",
          "type": "integer"
        },
        "orderBy2": {
          "description": "The second custom order for sorting the function space display.",
          "type": "integer"
        },
        "orderBy3": {
          "description": "The third custom order for sorting the function space display.",
          "type": "integer"
        }
      }
    },
    "functionSpacesCriteria": {
      "type": "object",
      "description": "Request object for creating function spaces.",
      "properties": {
        "functionSpaces": {
          "description": "List of detail information of function space for function space configuration.",
          "$ref": "#/definitions/functionSpacesConfigType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpacesConfigType": {
      "type": "array",
      "description": "The detail information of function space for function space configuration.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/functionSpaceConfigType"
      }
    },
    "functionSpaceConfigType": {
      "type": "object",
      "description": "The summary information for a function space.",
      "properties": {
        "hotelId": {
          "description": "Hotel Code where function space belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomCode": {
          "description": "Room Code of the Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomType": {
          "description": "Room Type of the Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "psuedoRoomType": {
          "description": "Indicates whether the room type is psuedo.",
          "type": "boolean"
        },
        "spaceName": {
          "description": "The Name of the Function Space.",
          "$ref": "#/definitions/translationTextType2000"
        },
        "shortName": {
          "description": "The Short Name of the Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "floor": {
          "description": "The floor on which the Function Space is located.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "spaceType": {
          "description": "The Type which the Function Space belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "location": {
          "description": "The building on which the Function Space is located.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "combo": {
          "description": "Indicate if the function space is a combination room.",
          "type": "boolean"
        },
        "element": {
          "description": "Indicate if the function space will be shown in the Function Diary by default.",
          "type": "boolean"
        },
        "shareable": {
          "description": "Indicate if the function space is shareable.",
          "type": "boolean"
        },
        "forceAlternate": {
          "description": "Indicate if the function space is forced to have alternate function spaces in case the function space becomes unvailable.",
          "type": "boolean"
        },
        "webBookable": {
          "description": "Indicates whether the Function Space is web bookable or not.",
          "type": "boolean"
        },
        "webViewable": {
          "description": "Indicates whether the Function Space is web viewable or not.",
          "type": "boolean"
        },
        "excludeFromForecast": {
          "description": "Flag to indicate if the event of this function space should be excluded from the forecast report.",
          "type": "boolean"
        },
        "fullUtilizationTime": {
          "description": "The time in minutes that the function space would be considered at 100% utilization.",
          "type": "number"
        },
        "handicapFacilities": {
          "description": "Indicates whether the function space has handicap facilities.",
          "type": "boolean"
        },
        "orderBy1": {
          "description": "The first custom order for sorting the function space display.",
          "type": "integer"
        },
        "orderBy2": {
          "description": "The second custom order for sorting the function space display.",
          "type": "integer"
        },
        "orderBy3": {
          "description": "The third custom order for sorting the function space display.",
          "type": "integer"
        },
        "description": {
          "description": "The description of the function space(eg. historical significance or physical features).",
          "$ref": "#/definitions/translationTextType2000"
        },
        "capacity": {
          "description": "Minimum and Maximum room capacity information of the function space.",
          "$ref": "#/definitions/roomCapacityType"
        },
        "displayInDiary": {
          "description": "Indicate if the function space will be shown in the Function Diary by default.",
          "type": "boolean"
        },
        "maxEvents": {
          "description": "Maximum number of events for a shared function space.",
          "type": "integer"
        },
        "futureEventsExist": {
          "description": "If the function space has future event, the combo elements are not editable.",
          "type": "boolean"
        },
        "setupStyles": {
          "description": "Setup Style Type for function space.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "type": "object",
            "properties": {
              "codeId": {
                "description": "Setup style code id .",
                "type": "number"
              },
              "code": {
                "description": "Function Space Setup Style Code.",
                "type": "string",
                "minLength": 0,
                "maxLength": 20
              },
              "translatableDescription": {
                "description": "Translatable description of the Function Space Setup Style.",
                "$ref": "#/definitions/translationTextType200"
              },
              "displaySequence": {
                "description": "Description of the Function Space Setup Style.",
                "type": "integer"
              },
              "directory": {
                "description": "Display in Directory True or False.",
                "type": "boolean"
              },
              "webBooking": {
                "description": "Bookmarkable via Website True or False.",
                "type": "boolean"
              },
              "webSetup": {
                "description": "Setup Time for web bookings.",
                "type": "integer"
              },
              "webSetdown": {
                "description": "Setdown Time for web bookings.",
                "type": "integer"
              },
              "inactive": {
                "description": "Indicates if the Setup Style is active.",
                "type": "boolean"
              },
              "minCapacity": {
                "description": "Minimum Capacity for function space setup style type.",
                "type": "integer"
              },
              "maxCapacity": {
                "description": "Maximum Capacity for function space setup style type.",
                "type": "integer"
              },
              "default": {
                "description": "Indicate if the setup style is the default.",
                "type": "boolean"
              }
            },
            "description": "Type for the function space setup style ID"
          }
        },
        "comboRooms": {
          "description": "Details of Combo Room Elements for the function space.",
          "$ref": "#/definitions/comboRoomsType"
        },
        "rates": {
          "description": "List of available rates for the function space.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/baseFunctionSpaceRateType"
          }
        },
        "comboElements": {
          "description": "List of combo elements for the function space.",
          "$ref": "#/definitions/codeListType"
        },
        "dimension": {
          "description": "The dimension detail of the function space.",
          "$ref": "#/definitions/functionSpaceDimensionType"
        },
        "alternate": {
          "description": "Details for alternate function spaces.",
          "$ref": "#/definitions/functionSpaceAlternateType"
        }
      }
    },
    "comboRoomsType": {
      "type": "array",
      "description": "This type holds a collection of combo elements for a function space.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/comboElementRoomType"
      }
    },
    "comboElementRoomType": {
      "type": "object",
      "description": "Details of each combo element room.",
      "properties": {
        "roomCode": {
          "description": "Configured code of the room.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomDescription": {
          "description": "The description of the room(eg. historical significance or physical features).",
          "$ref": "#/definitions/translationTextType2000"
        },
        "roomSize": {
          "description": "Configured size of the room.",
          "type": "number"
        },
        "roomProportion": {
          "description": "Percentage occupied by the room.",
          "type": "number"
        }
      }
    },
    "baseFunctionSpaceRateType": {
      "type": "object",
      "description": "Base type provides information about Catering Code which will be used for removal operation",
      "properties": {
        "codeId": {
          "description": "Code ID is used to identify a Catering Code by ID.",
          "type": "number"
        },
        "code": {
          "description": "Code is used to identify a Catering Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "translatableDescription": {
          "description": "Description of the Catering Code.",
          "$ref": "#/definitions/translationTextType200"
        },
        "displaySequence": {
          "description": "Catering Codes display sequence Number",
          "type": "number"
        },
        "rentAmount": {
          "description": "Rent amount.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "revenueType": {
          "description": "Catering revenue type used for function space rent amount.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "rateType": {
          "description": "Indicates the type of rate.",
          "$ref": "#/definitions/functionSpaceRateTypeType"
        },
        "default": {
          "description": "Indicates that this rate is the default for the function space.",
          "type": "boolean"
        },
        "inactive": {
          "description": "Indicates that this rate is inactive.",
          "type": "boolean"
        },
        "hourly": {
          "description": "Indicates that this rate is computed per hour.",
          "type": "boolean"
        },
        "minimunRevenue": {
          "description": "Indicates that minimum revenue should be enforced for this rate code.",
          "type": "boolean"
        }
      }
    },
    "functionSpaceRateTypeType": {
      "type": "string",
      "description": "Indicates the function space rate is applied per person.",
      "enum": [
        "PerRoom",
        "PerPerson"
      ]
    },
    "functionSpaceDimensionType": {
      "type": "object",
      "description": "Detailed information on the capacity of a room.",
      "properties": {
        "width": {
          "description": "Width of the room.",
          "type": "number"
        },
        "length": {
          "description": "Length of the room.",
          "type": "number"
        },
        "area": {
          "description": "Area of the room.",
          "type": "number"
        },
        "minHeight": {
          "description": "Minimum height of the room.",
          "type": "number"
        },
        "maxHeight": {
          "description": "Maximum height of the room.",
          "type": "number"
        },
        "unitOfMeasureCode": {
          "description": "The unit of measure in a code format.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "weight": {
          "description": "The maximum load that can be supported by the floor in this function space.",
          "type": "number"
        },
        "note": {
          "description": "Additional information for the function space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        }
      }
    },
    "functionSpaceAlternateType": {
      "type": "object",
      "description": "Details for alternate function spaces.",
      "properties": {
        "forceAlternate": {
          "description": "Flag to indicate if the function space must have an alternate space when used.",
          "type": "boolean"
        },
        "excludedCateringEventTypes": {
          "description": "A list of catering event types that are not forced or required to have an alternate function space when this function space is used.",
          "$ref": "#/definitions/codeListType"
        }
      }
    },
    "functionSpacesToBeChanged": {
      "type": "object",
      "description": "Request object for changing function spaces.",
      "properties": {
        "functionSpaces": {
          "description": "List of detail information of function space for function space configuration.",
          "$ref": "#/definitions/functionSpacesConfigType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "functionSpaceConfigDetails": {
      "type": "object",
      "description": "Response object for fetching function space config info.",
      "properties": {
        "functionSpace": {
          "description": "The detail information of function space for function space configuration.",
          "$ref": "#/definitions/functionSpaceConfigType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "inventoryItems": {
      "type": "object",
      "description": "Response object to fetch Inventory Items Setup configuration",
      "properties": {
        "items": {
          "description": "Collection of Inventory Items Setup configurations",
          "$ref": "#/definitions/inventoryItemsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "inventoryItemsType": {
      "type": "array",
      "description": "List of Inventory Items.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/inventoryItemType"
      }
    },
    "inventoryItemType": {
      "type": "object",
      "description": "Inventory Items identification details.",
      "properties": {
        "hotelId": {
          "description": "The Hotel code which the item belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "itemId": {
          "description": "The id of the Item class.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "itemClassId": {
          "description": "The Item Class ID which the item belongs to.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "itemClassCode": {
          "description": "The Item Class Code which the item belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "itemClassDescription": {
          "description": "The Description of the Item Class.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "itemName": {
          "description": "The Name of the Item.",
          "$ref": "#/definitions/translationTextType200"
        },
        "itemDescription": {
          "description": "The Description of the Item.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "itemCode": {
          "description": "The Article Number of the Item.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "revenueType": {
          "description": "The Revenue Type of the Item.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "revenueTypeEditable": {
          "description": "If true, the revenue could be changed.",
          "type": "boolean"
        },
        "externalOrder": {
          "description": "Flag to define if the inventory item can be ordered externally when the item is marked as critical.",
          "type": "boolean"
        },
        "print": {
          "description": "The Revenue Type of the Item.",
          "type": "boolean"
        },
        "sellInfo": {
          "description": "The Sell Information of the Item.",
          "type": "object",
          "properties": {
            "available": {
              "description": "The available period of the Item.",
              "$ref": "#/definitions/dateTimeSpanType"
            },
            "availableQty": {
              "description": "Available quantity during a period of time.",
              "type": "number"
            },
            "qtyInStock": {
              "description": "Item quantity in Stock.",
              "type": "number"
            },
            "defaultQty": {
              "description": "Defines the default quantity when booking the Item.",
              "type": "number"
            },
            "sellSeparate": {
              "description": "If true, the item could be sold separately.",
              "type": "boolean"
            },
            "sellControl": {
              "description": "If true, item is mandatory for booking.",
              "type": "boolean"
            },
            "welcomeOffer": {
              "description": "If true, the item can be attached as part of a Welcome Offer",
              "type": "boolean"
            },
            "webBookable": {
              "description": "If true, web booking is allowed.",
              "type": "boolean"
            },
            "itemClassWebBookable": {
              "description": "Specifies if web booking is allowed for the Item Class.",
              "type": "boolean"
            },
            "outsideStay": {
              "description": "Define if the the Item could be held outside of the reservation stay days.",
              "type": "boolean"
            },
            "fixedCharge": {
              "description": "If true, the Fixed Charges screen will be automatically displayed when this item gets attached to a reservation.",
              "type": "boolean"
            },
            "discountable": {
              "description": "Specifies if a discount is allowed for this item.",
              "type": "boolean"
            },
            "itemClassDiscountable": {
              "description": "Specifies if a discount is allowed for the Item Class.",
              "type": "boolean"
            },
            "criticalInventory": {
              "description": "Flag to issue a warning if this inventory item is overbooked.",
              "type": "boolean"
            },
            "price": {
              "description": "The Cost of the Item.",
              "$ref": "#/definitions/currencyAmountType"
            },
            "defaultDuration": {
              "description": "Define the default duration days when booking the Item.",
              "type": "integer"
            }
          }
        },
        "setupTime": {
          "description": "Setup Time of the Item in minutes.",
          "type": "number"
        },
        "setdownTime": {
          "description": "Setdown Time of the Item in minutes.",
          "type": "number"
        },
        "traceText": {
          "description": "The Trace Text of the Item.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "tracesPerDay": {
          "description": "Flag to indicate that trace text will be created for each day of the Item Inventory.",
          "type": "boolean"
        },
        "itemPool": {
          "description": "The Item Pool description of the Item.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "displaySequence": {
          "description": "The display sequence of the Item.",
          "type": "number"
        },
        "eventTypes": {
          "description": "List of Event Types for the Item.",
          "$ref": "#/definitions/codeListType"
        },
        "departments": {
          "description": "List of Departments for the Item.",
          "$ref": "#/definitions/codeListType"
        },
        "attributes": {
          "description": "List of Attributes of the Item.",
          "$ref": "#/definitions/itemAttributesType"
        },
        "rates": {
          "description": "List of Rates of the Item.",
          "$ref": "#/definitions/itemRatesType"
        },
        "vendors": {
          "description": "List of Vendors of the Item.",
          "$ref": "#/definitions/itemVendorsType"
        },
        "resourceNotes": {
          "description": "Collection of notes which belongs to a resource (either Item or Menu or FunctionSpace).",
          "$ref": "#/definitions/eventResourceNotesType"
        },
        "itemClassDisplaySequence": {
          "description": "Display sequence of Item Class.",
          "type": "number"
        },
        "usedForEvents": {
          "description": "If true, the item is used for events.",
          "type": "boolean"
        },
        "usedForReservation": {
          "description": "If true, the item is used for reservation.",
          "type": "boolean"
        },
        "itemFromTemplate": {
          "description": "Indicates whether Item is from a Template or not.",
          "type": "boolean"
        }
      }
    },
    "itemAttributesType": {
      "type": "array",
      "description": "List of Item Attributes.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/itemAttributeType"
      }
    },
    "itemAttributeType": {
      "type": "object",
      "description": "Details of the Item Attribute.",
      "properties": {
        "itemAttributeId": {
          "description": "The ID of the Item Attribute.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "translatableName": {
          "description": "Translatable Name of the Item Attribute.",
          "$ref": "#/definitions/translationTextType200"
        },
        "setupTime": {
          "description": "The Setup Time of the Item Attribute in minutes.",
          "type": "number"
        },
        "setdownTime": {
          "description": "The Setdown Time of the Item Attribute in minutes.",
          "type": "number"
        },
        "default": {
          "description": "If true, it's the default Attribute for the Item.",
          "type": "boolean"
        }
      }
    },
    "itemRatesType": {
      "type": "array",
      "description": "List of Item Rates.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/itemRateType"
      }
    },
    "itemRateType": {
      "type": "object",
      "description": "Details of the Item Rate.",
      "properties": {
        "itemRateId": {
          "description": "The ID of the Item Rate.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "itemRateCode": {
          "description": "The Rate Code of the Item Rate.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "name": {
          "description": "The Name of the Item Rate.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "price": {
          "description": "The Price of the Item.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "hourly": {
          "description": "If true, it's hourly rate.",
          "type": "boolean"
        },
        "default": {
          "description": "If true, it's the default Rate for the Item.",
          "type": "boolean"
        }
      }
    },
    "itemVendorsType": {
      "type": "array",
      "description": "List of Item Vendors.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/itemVendorType"
      }
    },
    "itemVendorType": {
      "type": "object",
      "description": "Details of the Item Vendor.",
      "properties": {
        "profileId": {
          "description": "The ID of the vendor.",
          "$ref": "#/definitions/profileId"
        },
        "name": {
          "description": "The Name of the vendor.",
          "type": "string",
          "minLength": 0,
          "maxLength": 100
        },
        "leadTime": {
          "description": "Lead time for ordering.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "price": {
          "description": "Purchase Price.",
          "$ref": "#/definitions/currencyAmountType"
        },
        "priority": {
          "description": "The Priority of the Vendor.",
          "type": "number"
        },
        "phone": {
          "description": "The phone number of the Vendor.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "fax": {
          "description": "The fax number of the Vendor.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "email": {
          "description": "The email address of the Vendor.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        }
      }
    },
    "profileId": {
      "type": "object",
      "description": "An identifier used to uniquely reference an object in a system (e.g. an airline reservation reference, customer profile reference, booking confirmation number, or a reference to a previous availability quote).",
      "properties": {
        "url": {
          "description": "URL that identifies the location associated with the record identified by the UniqueID.",
          "type": "string"
        },
        "type": {
          "description": "A reference to the type of object defined by the UniqueID element.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "instance": {
          "description": "The identification of a record as it exists at a point in time. An instance is used in update messages where the sender must assure the server that the update sent refers to the most recent modification level of the object being updated.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idContext": {
          "description": "Used to identify the source of the identifier (e.g., IATA, ABTA).",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "id": {
          "description": "A unique identifying value assigned by the creating system. The ID attribute may be used to reference a primary-key value within a database or in a particular implementation.",
          "type": "string",
          "minLength": 0,
          "maxLength": 80
        },
        "idExtension": {
          "description": "Additional identifying value assigned by the creating system.",
          "type": "integer"
        }
      }
    },
    "inventoryItemsCreated": {
      "type": "object",
      "description": "Response object for creating Inventory Items Setup configurations",
      "properties": {
        "items": {
          "description": "Inventory Item Setup configurations created.",
          "$ref": "#/definitions/inventoryItemsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "itemPoolsInfo": {
      "type": "object",
      "description": "Response object which holds collection of Item Pools.",
      "properties": {
        "itemPools": {
          "description": "Collection of Item Pools.",
          "$ref": "#/definitions/itemPoolsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "itemPoolsType": {
      "type": "array",
      "description": "Item Pools details for hotels.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/itemPoolType"
      }
    },
    "itemPoolType": {
      "type": "object",
      "description": "A type which holds the Item pool.",
      "properties": {
        "hotelId": {
          "description": "Hotel Code which belong to Item Pool",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "code": {
          "description": "Item Pools Code",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "Description of the Item Pool code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "itemClass": {
          "description": "Item Class which associated to Item codes.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "displaySequence": {
          "description": "Sequence of Item Pool code.",
          "type": "number"
        },
        "itemIds": {
          "description": "List of Item Id which belongs to Item Pools Code",
          "$ref": "#/definitions/itemIDListType"
        }
      }
    },
    "itemIDListType": {
      "type": "array",
      "description": "Collection of Item Id which belongs to Item Code.",
      "maxItems": 4000,
      "items": {
        "type": "number"
      }
    },
    "roomTypePoolDetails": {
      "type": "object",
      "description": "Response object for fetch room pool information.",
      "properties": {
        "roomTypePools": {
          "description": "Collection of room pool information.",
          "$ref": "#/definitions/roomTypePoolTypes"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "roomTypePoolTypes": {
      "type": "array",
      "description": "Collection of room type pool and associated room type(s).",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/roomTypePoolType"
      }
    },
    "roomTypePoolType": {
      "type": "object",
      "description": "This type represents complete information of room type pool and Associated Room Type(s).",
      "properties": {
        "hotelId": {
          "description": "Hotel Code where room pool belongs to.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "roomTypePoolCode": {
          "description": "Room type pool Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "The description of room pool type.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "shortDescription": {
          "description": "The short description of type room pool.",
          "$ref": "#/definitions/translationTextType1000"
        },
        "sequence": {
          "description": "Sequence for representing room type pool record.",
          "type": "integer"
        },
        "associatedRoomTypes": {
          "description": "Pertain associated room type(s) detail information.",
          "$ref": "#/definitions/roomPoolRoomTypesType"
        }
      }
    },
    "translationTextType1000": {
      "type": "object",
      "description": "Contains Multiple translated texts and language codes.",
      "properties": {
        "defaultText": {
          "description": "Default text with Character length from 0 to 1000.",
          "type": "string",
          "minLength": 0,
          "maxLength": 1000
        },
        "translatedTexts": {
          "description": "List of translated text and language codes.",
          "$ref": "#/definitions/translationsTextType"
        }
      }
    },
    "roomPoolRoomTypesType": {
      "type": "array",
      "description": "Collection of room type pool mapping type.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/roomPoolRoomTypeType"
      }
    },
    "roomPoolRoomTypeType": {
      "type": "object",
      "description": "This extension will only use for consuming RoomType and SellSequence elements for consistency.",
      "properties": {
        "roomClass": {
          "description": "Room class for the room type code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "shortDescription": {
          "description": "Short Description of room type.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "activeDate": {
          "description": "Active date of the room type.",
          "type": "string",
          "format": "date",
          "maxLength": 8
        },
        "pseudo": {
          "description": "Indicates if room type is pseudo.",
          "type": "boolean"
        },
        "accessible": {
          "description": "Indicates if room type is accessible.",
          "type": "boolean"
        },
        "sendToInterface": {
          "description": "Indicates if room type is sent to interface.",
          "type": "boolean"
        },
        "sellSequence": {
          "description": "Indicates room types sell sequence.",
          "type": "number"
        },
        "suite": {
          "description": "Indicates room type is a suite.",
          "type": "boolean"
        },
        "meetingRoom": {
          "description": "Indicates room type is meeting room. This Can be Meeting room flag cannot be unmarked at the property level. Can only be marked for non pseudo room types.",
          "type": "boolean"
        },
        "roomType": {
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "numberOfRooms": {
          "description": "Number of rooms for this room type.",
          "type": "integer"
        },
        "inactive": {
          "description": "Indicates the room type is inactive or not.",
          "type": "boolean"
        },
        "restricted": {
          "description": "Indicates that the room pool cannot be used to allocate inventory to this room type. Inventory must be allocated directly to the room type itself.",
          "type": "boolean"
        }
      }
    },
    "roomTypePoolCriteria": {
      "type": "object",
      "description": "Request object for creating new room pool.",
      "properties": {
        "roomPoolTypes": {
          "description": "Collection of room pool information.",
          "$ref": "#/definitions/roomTypePoolTypes"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "roomTypePoolToBeChanged": {
      "type": "object",
      "description": "Request object for changing existing room pool.",
      "properties": {
        "roomPoolTypes": {
          "description": "Collection of room pool information.",
          "$ref": "#/definitions/roomTypePoolTypes"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyFunctionSpaces": {
      "type": "object",
      "description": "Request object for creating multiple function spaces based on an existing function space. New function space may have different name, display name on function dairy, order of display and combo elements. The rest of the details will be copied from the source function space.",
      "properties": {
        "copyFunctionSpace": {
          "description": "Object that holds primary details of function space to be copied and collection of function spaces to be created from it.",
          "$ref": "#/definitions/copyFunctionSpaceType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyFunctionSpaceType": {
      "type": "object",
      "description": "Primary details of function space to be copied and collection of function spaces to be created from it.",
      "properties": {
        "targetFunctionSpace": {
          "description": "Function Space details that may differ from the source function space.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/targetFunctionSpaceType"
          }
        },
        "sourceHotelCode": {
          "description": "Hotel code of source function space that will serve as the basis for the target function spaces.",
          "type": "string"
        },
        "sourceRoomNumber": {
          "description": "Room number of source function space that will serve as the basis for the target function spaces.",
          "type": "string"
        }
      }
    },
    "targetFunctionSpaceType": {
      "type": "object",
      "description": "Function Space details that may be different from the source function space. If any of Space Name, Short Name, Custom Orders and Combo Element types are not passed together with this type, it means that it is expected that these would be copied from source function space",
      "properties": {
        "spaceName": {
          "description": "The Name of the Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "shortName": {
          "description": "The Short Name of the Function Space.",
          "type": "string",
          "minLength": 0,
          "maxLength": 2000
        },
        "orderBy1": {
          "description": "The first custom order for sorting the function space display.",
          "type": "integer"
        },
        "orderBy2": {
          "description": "The second custom order for sorting the function space display.",
          "type": "integer"
        },
        "orderBy3": {
          "description": "The third custom order for sorting the function space display.",
          "type": "integer"
        },
        "comboElements": {
          "description": "List of combo elements for the function space.",
          "$ref": "#/definitions/codeListType"
        },
        "targetRoomNumber": {
          "description": "Room number of the new function space to be created.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "copyFunctionSpaceLocations": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "description": "List of function space location(s) to be copied.",
          "items": {
            "$ref": "#/definitions/copyConfigurationCodeType"
          }
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyConfigurationCodeType": {
      "type": "object",
      "description": "Information needed to copy configuration code from one property to the other.",
      "properties": {
        "targetHotelCode": {
          "description": "Property to which configuration code type to be copied to.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "type": "string",
            "minLength": 0,
            "maxLength": 20
          }
        },
        "sourceHotelCode": {
          "description": "Code that is to be copied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "code": {
          "description": "Source hotel code from which code is to be copied from.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        }
      }
    },
    "inventoryItemsCopy": {
      "type": "object",
      "description": "Request object for copying Inventory Items Setup configuration",
      "properties": {
        "copyInventoryItems": {
          "description": "Copy Inventory Items criteria type to copy multiple Inventory Items from one Hotel to other Hotels.",
          "$ref": "#/definitions/copyInventoryItemsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyInventoryItemsType": {
      "type": "object",
      "description": "Copy Inventory Items criteria type to copy multiple Inventory Items from one Hotel to other Hotels.",
      "properties": {
        "copyInventoryItem": {
          "description": "The details of Inventory Items to be copied.",
          "type": "array",
          "maxItems": 4000,
          "items": {
            "$ref": "#/definitions/copyInventoryItemType"
          }
        },
        "hotelId": {
          "description": "Hotel Code from which Inventory Items are being copied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "includeRates": {
          "description": "If true, include to copy the Item Rates.",
          "type": "boolean"
        },
        "includeAttributes": {
          "description": "If true, include to copy the Item Attributes.",
          "type": "boolean"
        },
        "includeVendors": {
          "description": "If true, include to copy the Item Vendor.",
          "type": "boolean"
        }
      }
    },
    "copyInventoryItemType": {
      "type": "object",
      "description": "The type describes Inventory Item Details being copied.",
      "properties": {
        "hotelId": {
          "description": "Hotel code to which item code will be copied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "itemCode": {
          "description": "Item code being copied.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "copyAs": {
          "description": "The code and description to be used for the item being copied.",
          "$ref": "#/definitions/codeDescriptionType"
        }
      }
    },
    "inventoryItemTemplates": {
      "type": "object",
      "description": "Response object for fetching inventory item templates.",
      "properties": {
        "inventoryItemTemplates": {
          "description": "Collection of inventory item templates fetched.",
          "$ref": "#/definitions/inventoryItemTemplatesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "inventoryItemTemplatesType": {
      "type": "array",
      "description": "This type holds a collection of inventory item templates.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/inventoryItemTemplateType"
      }
    },
    "inventoryItemTemplateType": {
      "type": "object",
      "description": "This gives detailed information about an inventory item template.",
      "properties": {
        "hotelId": {
          "description": "Specifies the hotel code for which the inventory item template is defined.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "inventoryItemTemplateId": {
          "description": "Specifies the inventory item template ID.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "inventoryItemTemplateName": {
          "description": "Specifies the name of the inventory item template.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "inventoryItemTemplateItems": {
          "description": "Collection of inventory items which are grouped together in the inventory item template.",
          "$ref": "#/definitions/inventoryItemTemplateItemsType"
        }
      }
    },
    "inventoryItemTemplateItemsType": {
      "type": "array",
      "description": "This type holds a collection of inventory items which are to be grouped under a single inventory item template.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/inventoryItemTemplateItemType"
      }
    },
    "inventoryItemTemplateItemType": {
      "type": "object",
      "description": "This type holds the information of the inventory item which will be grouped in the inventory item template.",
      "properties": {
        "id": {
          "description": "Specifies the ID of the item.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "name": {
          "description": "Specifies the name of the item.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "articleNumber": {
          "description": "Specifies the article number of the item.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "rateId": {
          "description": "Specifies the identifier of the default rate for the item in the inventory item template.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "rateCode": {
          "description": "Specifies the code of the default rate for the item in the inventory item template.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "rateName": {
          "description": "Specifies the name of the default rate for the item in the inventory item template.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "attributeId": {
          "description": "Specifies the identifier of the default attribute for the item in the inventory item template.",
          "$ref": "#/definitions/uniqueID_Type"
        },
        "attributeName": {
          "description": "Specifies the name of the default attribute for the item in the inventory item template.",
          "type": "string",
          "minLength": 0,
          "maxLength": 200
        },
        "classSequence": {
          "description": "Specifies the sorting sequence number for the item class.",
          "type": "integer"
        },
        "sequence": {
          "description": "Specifies the sorting sequence number for the item.",
          "type": "integer"
        },
        "quantity": {
          "description": "Specifies the quantity of the item.",
          "type": "integer"
        }
      }
    },
    "itemClassesInfo": {
      "type": "object",
      "description": "Response object for fetching item class.",
      "properties": {
        "itemClasses": {
          "description": "Collection of item class.",
          "$ref": "#/definitions/itemClassesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "itemClassesType": {
      "type": "array",
      "description": "Holds Item Class details.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/itemClassType"
      }
    },
    "itemClassType": {
      "type": "object",
      "description": "Provides information about the Item Class.",
      "properties": {
        "hotelId": {
          "description": "Code of the Hotel.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "code": {
          "description": "Code of the Item Class.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "description": {
          "description": "Description of the Item Class.",
          "$ref": "#/definitions/translationTextType200"
        },
        "type": {
          "description": "Item Class Type. e.g. Reservations,Events",
          "$ref": "#/definitions/itemClassTypeType"
        },
        "classId": {
          "description": "ClassID of the Item Class.",
          "type": "number"
        },
        "displaySequence": {
          "description": "Sequence of Item Class.",
          "type": "number"
        },
        "eventTypes": {
          "description": "Event Types of Item Class.",
          "$ref": "#/definitions/codeListType"
        },
        "departments": {
          "description": "Departmnents of Item Class.",
          "$ref": "#/definitions/codeListType"
        },
        "discountable": {
          "description": "Indicates whether the Item Class is discountable or not.",
          "type": "boolean"
        },
        "webBookable": {
          "description": "Indicates whether the Item Class is BookableViaWebsite or not.",
          "type": "boolean"
        },
        "overrideWarnings": {
          "description": "Indicates whether the all items to be updated when there are warnings.",
          "type": "boolean"
        },
        "discountOverrideWarnings": {
          "description": "Indicates whether the all items to be updated when there are warnings for discountable.",
          "type": "boolean"
        }
      }
    },
    "itemClassTypeType": {
      "type": "string",
      "description": "Defines values for Item Class Type.",
      "enum": [
        "Reservation",
        "Events",
        "ReservationAndEvents"
      ]
    },
    "itemClasses": {
      "type": "object",
      "description": "Request object for modifying item class.",
      "properties": {
        "itemClasses": {
          "description": "Collection of item class to be changed.",
          "$ref": "#/definitions/itemClassesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "itemClassesCopy": {
      "type": "array",
      "description": "List of the Item Class to be copied.",
      "items": {
        "$ref": "#/definitions/copyConfigurationCodeType"
      }
    },
    "itemPools": {
      "type": "object",
      "description": "Request object which holds modified Item Pools.",
      "properties": {
        "itemPools": {
          "description": "Collection of Item Pools to be changed.",
          "$ref": "#/definitions/itemPoolsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "mealTypesDetails": {
      "type": "object",
      "description": "Response object for fetching Meal Types.",
      "properties": {
        "mealTypes": {
          "description": "Collection of Meal Types.",
          "$ref": "#/definitions/mealTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "mealTypesType": {
      "type": "array",
      "description": "List of Meal Types.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/mealTypeType"
      }
    },
    "mealTypeType": {
      "type": "object",
      "description": "Contains Common Master configuration detail.",
      "properties": {
        "code": {
          "description": "Common Master unique code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 40
        },
        "description": {
          "description": "Description of the Master code.",
          "$ref": "#/definitions/translationTextType2000"
        },
        "displayOrder": {
          "description": "Common Master record sequence number.",
          "type": "number"
        },
        "managedBy": {
          "$ref": "#/definitions/managedByOptions"
        }
      }
    },
    "mealTypesCriteria": {
      "type": "object",
      "description": "Request object for creating Meal Types.",
      "properties": {
        "mealTypes": {
          "description": "Meal Typesto be created.",
          "$ref": "#/definitions/mealTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "mealTypesToBeChanged": {
      "type": "object",
      "description": "Request object for changing Meal Types.",
      "properties": {
        "mealTypes": {
          "description": "Meal Typesto be changed.",
          "$ref": "#/definitions/mealTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "revenueGroupsInfo": {
      "type": "object",
      "description": "Response object for fetching Catering Revenue Groups configurations.",
      "properties": {
        "revenueGroups": {
          "description": "Collection of Catering Revenue Groups configurations.",
          "$ref": "#/definitions/revenueGroupsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "revenueGroupsType": {
      "type": "array",
      "description": "Details for Catering Revenue Group along with associated Revenue Type codes.",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/revenueGroupType"
      }
    },
    "revenueGroupType": {
      "type": "object",
      "description": "Provides information about Catering Revenue Group along with Revenue Type Code.",
      "properties": {
        "code": {
          "description": "Code is used to identify a Catering Revenue Group.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "translatableDescription": {
          "description": "Translatable description of the Catering Revenue Group.",
          "$ref": "#/definitions/translationTextType200"
        },
        "displaySequence": {
          "description": "Sequence Number of the Catering Revenue Group.",
          "type": "number"
        },
        "inactive": {
          "description": "Indicates if the Catering Revenue Group is inactive.",
          "type": "boolean"
        },
        "revenueTypes": {
          "description": "Collection of Catering Revenue Type Codes which are associated for a Catering Revenue Group.",
          "$ref": "#/definitions/revenueTypesType"
        }
      }
    },
    "revenueTypesType": {
      "type": "array",
      "description": "List of Revenue Types to be configured",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/revenueTypeType"
      }
    },
    "revenueTypeType": {
      "type": "object",
      "description": "Base type provides information about Catering Revenue Types Configuration.",
      "properties": {
        "code": {
          "description": "Code is used to identify a Catering Revenue Type/Code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "translatableDescription": {
          "description": "Translatable Description of the Catering Revenue Types.",
          "$ref": "#/definitions/translationTextType200"
        },
        "displaySequence": {
          "description": "Revenue Types display sequence Number",
          "type": "number"
        },
        "revenueGroup": {
          "description": "Revenue Group",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "foodAndBeverage": {
          "description": "Flag for Food and Beverages.",
          "type": "boolean"
        },
        "inactive": {
          "description": "Indicates if the Revenue type Code is inactive.",
          "type": "boolean"
        },
        "revenueDetails": {
          "description": "Collection of Revenue details assoicated to a Revenue Type (Additional Details)",
          "$ref": "#/definitions/revenueTypeDetailsType"
        }
      }
    },
    "revenueTypeDetailsType": {
      "type": "array",
      "description": "List of Revenue details assoicated to a Revenue Type (Additional Details)",
      "maxItems": 4000,
      "items": {
        "$ref": "#/definitions/revenueTypeDetailType"
      }
    },
    "revenueTypeDetailType": {
      "type": "object",
      "description": "Details type provides information about Catering Revenue Type Details.",
      "properties": {
        "hotelId": {
          "description": "Hotel Code is used to set associated revenue type details.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "revenueMinimum": {
          "description": "Indicates if this revenue type contributes to the revenue minimum.",
          "type": "boolean"
        },
        "tax": {
          "description": "VAT % to calculate Net Catering Revenues.",
          "type": "number",
          "minimum": 0,
          "maximum": 100
        }
      }
    },
    "revenueGroups": {
      "type": "object",
      "description": "Request object for changing existing Catering Revenue Groups Configurations.",
      "properties": {
        "revenueGroups": {
          "description": "Catering Revenue Groups Configurations to be changed.",
          "$ref": "#/definitions/revenueGroupsType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "revenueTypesInfo": {
      "type": "object",
      "description": "Response object for fetching Revenue Types Setup configurations.",
      "properties": {
        "revenueTypes": {
          "description": "Collection of Revenue Types Setup configurations.",
          "$ref": "#/definitions/revenueTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "revenueTypes": {
      "type": "object",
      "description": "Request object for changing existing Revenue Types Setup Configurations.",
      "properties": {
        "revenueTypes": {
          "description": "Revenue Types Setup Configurations to be changed.",
          "$ref": "#/definitions/revenueTypesType"
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "managedByOptions": {
      "description": "Describes of the Configuration is Managed by Enterprise or Property.",
      "type": "string",
      "enum": [
        "EnterpriseManaged",
        "PropertyManaged",
        "EnterpriseEnforced",
        "PropertyOverriden"
      ]
    },
    "resourceCodeInfo": {
      "type": "object",
      "description": "Response object of newly copied resource or configuration code.",
      "properties": {
        "resourceCode": {
          "description": "Newly copied resource or configuration code.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "links": {
          "$ref": "#/definitions/links"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyCateringPackageType": {
      "type": "object",
      "description": "Request object for Copying Catering Package/Template.",
      "properties": {
        "code": {
          "description": "Code associated with the newly copied Catering Package/template.",
          "type": "string",
          "minLength": 0,
          "maxLength": 10
        },
        "translatableDescription": {
          "description": "Description of the the newly copied Catering Package/template.",
          "$ref": "#/definitions/translationTextType200"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    },
    "copyCateringPackagePriceType": {
      "type": "object",
      "description": "Request object for Copying Catering Package Price.",
      "properties": {
        "code": {
          "description": "Code associated with the newly copied Catering Package Price.",
          "type": "string",
          "minLength": 0,
          "maxLength": 20
        },
        "translatableDescription": {
          "description": "Description of the newly copied Catering Package Price.",
          "$ref": "#/definitions/translationTextType200"
        },
        "warnings": {
          "$ref": "#/definitions/warningsType"
        }
      }
    }
  },
  "tags": [
    {
      "name": "ResourceConfig",
      "description": "The Resource Config Service Web Service offers capability to configure Master Data needed for Hotel Resources such as managing Inventory Items, Item Pools, Item Classes, etc."
    },
    {
      "name": "ChainConfig",
      "description": "These APIs will allow you to configure events related configuration related to Administration."
    },
    {
      "name": "HotelConfig",
      "description": "These APIs will allow you to configure events related configuration related to Administration."
    }
  ],
  "externalDocs": {
    "description": "Find out more about Oracle Hospitality",
    "url": "https://docs.oracle.com/en/industries/hospitality/integration_platforms.html"
  }
}